v2.0 raw
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `stack` - which is also never modified. Replacing refs to latter with the former and deleting the copy: stack <- c U32
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `t7f48` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t7f48 <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `s` - which is also never modified. Replacing refs to latter with the former and deleting the copy: s <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb2e9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb2e9 <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb1ed` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb1ed <- c U32
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `t4760` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4760 <- c U32
# In IlFunctionId("RpnCalc_run"), `calc` is never written to, but is copied to `td337` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td337 <- calc U32
# In IlFunctionId("add_U64"), `a` is never written to, but is copied to `t3203` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t3203 <- a U32
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `teec0` - which is also never modified. Replacing refs to latter with the former and deleting the copy: teec0 <- b U32
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `t24ae` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t24ae <- b U32
# In IlFunctionId("div32"), removing no-op il instruction: t4a94 <- te825 Add Number(0n0/0x00000000u32)
# In IlFunctionId("div32_by10"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t1c61`.
# In IlFunctionId("div32_by10"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t9`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `tca8`.
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t8956` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8956 <- c U32
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t2558` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t2558 <- c U32
# In IlFunctionId("mul8"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8_16"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8_16"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("print_dec32_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("print_dec8_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U8
# In IlFunctionId("putc"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_get"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stack_init"), `s` is never written to, but is copied to `t4bb9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4bb9 <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("test_add_U64"), resolved the constant val `Number(0n987740/0x000f125cu32)` for var `tcc7b`.
# In IlFunctionId("test_add_U64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_add_U64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_mul32_64"), resolved the constant val `Number(0n987748/0x000f1264u32)` for var `tcc7b`.
# In IlFunctionId("test_mul32_64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_mul32_64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_s`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_t4d4f`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_Keyboard_poll_queue_push_37_tc1ff`.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Keyboard.j':(31,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #48: goto inline_Keyboard_poll_queue_push_37_function_end_queue_push
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_tac13`.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_15_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_16_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_17_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_18_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_19_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_20_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_21_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_22_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_23_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_24_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `t506b` is written to, but never read. Removing the instruction that writes to it: (t506b <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Number(0n58/0x3au8)", "Number(0n58/0x3au8)"] })
# In IlFunctionId("RpnCalc_handle"), var `t7ec4` is written to, but never read. Removing the instruction that writes to it: (t7ec4 <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Number(0n69/0x45u8)", "Number(0n69/0x45u8)"] })
# In IlFunctionId("RpnCalc_handle"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("RpnCalc_handle"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #811: goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #772: goto inline_RpnCalc_handle_putc_24_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #756: goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #745: goto inline_RpnCalc_handle_putc_23_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #717: goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #712: goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #698: goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #685: goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #651: goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #638: goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #596: goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #577: goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #552: goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #533: goto inline_RpnCalc_handle_putc_22_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #507: goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #488: goto inline_RpnCalc_handle_putc_21_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #471: goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #456: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #408: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #350: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #292: goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #273: goto inline_RpnCalc_handle_putc_20_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #247: goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #228: goto inline_RpnCalc_handle_putc_19_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #201: goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #176: goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #149: goto inline_RpnCalc_handle_putc_18_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #134: goto inline_RpnCalc_handle_putc_17_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #120: goto inline_RpnCalc_handle_putc_16_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #106: goto inline_RpnCalc_handle_putc_15_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #82: goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #69: goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff`.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #73: goto inline_RpnCalc_run_getchar_39_function_end_getchar
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #67: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #29: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# In IlFunctionId("div32"), removing no-op goto instruction #305: goto inline_div32_shiftright1_45_function_end_shiftright1
# In IlFunctionId("div32"), removing no-op goto instruction #260: goto inline_div32_shiftright1_44_function_end_shiftright1
# In IlFunctionId("div32"), removing no-op goto instruction #203: goto inline_div32_div16_43_function_end_div16
# In IlFunctionId("div32"), removing no-op goto instruction #142: goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# In IlFunctionId("div32"), removing no-op goto instruction #94: goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `inline_lcd_draw_char_lcd_logical_to_physical_3_i` - which is also never modified. Replacing refs to latter with the former and deleting the copy: inline_lcd_draw_char_lcd_logical_to_physical_3_i <- i U8
# In IlFunctionId("lcd_draw_char"), removing no-op goto instruction #14: goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987728/0x000f1250u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987732/0x000f1254u32)` for var `inline_main_RpnCalc_init_51_t6e8e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_tac13`.
# In IlFunctionId("main"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 , Some('programs/app/rpn.j':(12,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 , Some('/lutcomp/programs/lib/rpnlib.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), var `inline_main_putc_25_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_25_c <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_26_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_26_c <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_27_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_27_c <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_28_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_28_c <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("main"), var `t25ee` is written to, but never read. Removing the instruction that writes to it: (t25ee <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Number(0n10/0x0au8)", "Number(0n10/0x0au8)"] })
# In IlFunctionId("main"), var `t6adf` is written to, but never read. Removing the instruction that writes to it: (t6adf <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Number(0n78/0x4eu8)", "Number(0n78/0x4eu8)"] })
# In IlFunctionId("main"), var `td749` is written to, but never read. Removing the instruction that writes to it: (td749 <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Number(0n80/0x50u8)", "Number(0n80/0x50u8)"] })
# In IlFunctionId("main"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("main"), removing no-op goto instruction #66: goto inline_main_putc_28_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #52: goto inline_main_putc_27_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #38: goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# In IlFunctionId("main"), removing no-op goto instruction #33: goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("main"), removing no-op goto instruction #27: goto inline_main_putc_26_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #13: goto inline_main_putc_25_function_end_putc
# In IlFunctionId("mul32_64"), removing no-op goto instruction #318: goto inline_mul32_64_add_U64_1_function_end_add_U64
# In IlFunctionId("mul32_64"), removing no-op goto instruction #262: goto inline_mul32_64_mul16_32_11_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #214: goto inline_mul32_64_add_U64_0_function_end_add_U64
# In IlFunctionId("mul32_64"), removing no-op goto instruction #158: goto inline_mul32_64_mul16_32_10_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #107: goto inline_mul32_64_mul16_32_9_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #57: goto inline_mul32_64_mul16_32_8_function_end_mul16_32
# In IlFunctionId("print_dec32"), removing no-op goto instruction #100: goto inline_print_dec32_putc_29_function_end_putc
# In IlFunctionId("print_dec32"), removing no-op goto instruction #82: goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# In IlFunctionId("print_dec32"), removing no-op goto instruction #62: goto inline_print_dec32_div32_by10_47_function_end_div32_by10
# In IlFunctionId("print_dec32"), removing no-op goto instruction #59: goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# In IlFunctionId("print_dec8"), removing no-op goto instruction #30: goto inline_print_dec8_putc_30_function_end_putc
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_s`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_t4d4f`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_stdio_init_queue_init_35_tb702`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_stdio_init_queue_init_35_tc1ff`.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_s` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("stdio_init"), removing no-op goto instruction #12: goto inline_stdio_init_queue_init_35_function_end_queue_init
# IlFunctionId("KeyBoard_init")()
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  return None # None
#  :function_end_KeyBoard_init # None
#  Unreachable # None

# IlFunctionId("Keyboard_poll")()
#  Some(t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_true_0_1 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  return None # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  goto Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_else_0_2 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  Some(code) <= call io_read2() # Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
#  tf68c <- code U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  t528d U32 <- tf68c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  index <- t528d Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t379c <- mem[td45b] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_true_0_4 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t674 <- td18e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t23a <- t4c8b Add Var(t674) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[t23a] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  goto Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_else_0_5 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tb62e <- t4c8b Add Var(td18e) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[tb62e] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_true_0_7 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tac13 <- c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_n <- tac13 U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  :inline_Keyboard_poll_queue_push_37_function_end_queue_push # None
#  goto Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_else_0_8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ted94 <- t4c8b Add Var(te5cf) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t2ca9 <- mem[ted94] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_10 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_13 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_14 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_11 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t6cd9 <- t4c8b Add Var(t5e63) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t7b09 <- mem[t6cd9] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_true_0_16 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  goto Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_else_0_17 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  return None # None
#  :function_end_Keyboard_poll # None
#  Unreachable # None

# IlFunctionId("RpnCalc_handle")(c,ch,)
#  a <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#  b <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_1_3 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_1_4 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_2_5 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_2_6 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_3_7 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_3_8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_4_9 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_4_10 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_true_0_12 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_else_0_13 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tbf93 <- c Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#  stack_count_usize <- mem[tbf93] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#  stack_count <- stack_count_usize[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_true_0_15 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_function_end_putc # None
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_function_end_putc # None
#  inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_function_end_putc # None
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_function_end_putc # None
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  goto RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_else_0_16 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_true_0_18 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop # None
#  goto RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_else_0_19 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_true_0_21 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop # None
#  goto RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_else_0_22 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_0_24 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  sum <- tace9 Add Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t670d,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_n <- t670d U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_54_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_0_25 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_1_26 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  diff <- tace9 Subtract Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t17ee,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_55_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_1_27 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_2_28 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(32,5))
#  inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
#  inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
#  inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
#  inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(36,5))
#  inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
#  inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
#  inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
#  inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
#  inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(43,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(43,5))
#  inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(44,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(44,5))
#  inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 # None
#  t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t2754,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_56_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_2_29 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_3_30 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  Some(quotient) <= call div32(tace9,t8792,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t1ba9,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_57_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_3_31 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_4_32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_58_function_end_stack_push # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_59_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_4_33 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdf6e <- 0n113/0x71u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_5_34 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  return Some(ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_5_35 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_6_36 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_6_37 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_7_38 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_7_39 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t47ec <- 0n99/0x63u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_8_40 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_8_41 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tcc42 <- 0n100/0x64u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_9_42 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_body_45 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec8(td0f3,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t4376 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  :inline_RpnCalc_handle_stack_get_48_function_end_stack_get # None
#  None <= call print_dec32(tb336,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_function_end_putc # None
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_end_46 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_9_43 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  teed8 <- 0n57/0x39u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_10_47 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcb0 <- 0n48/0x30u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_0_50 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  mem[tfdb7] <- ta11a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 # None
#  mem[t6e8e] <- tadd U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t9dae <- tdcd9 Subtract Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdc11 U32 <- t9dae U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tbdb5 <- td60 Add Var(tdc11) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  mem[t6e8e] <- tbdb5 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_49 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_0_51 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_end_49 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_10_48 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#  return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#  :function_end_RpnCalc_handle # None
#  Unreachable # None

# IlFunctionId("RpnCalc_run")(calc,)
#  :RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_while_body_1 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(19,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_body_1 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tb816 <- ttyin # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push # None
#  goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  None <= call Keyboard_poll() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # None
#  goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_end_2 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  :inline_RpnCalc_run_getchar_39_function_end_getchar # None
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  Some(result) <= call RpnCalc_handle(calc,tdcd9,) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  t57fd <- result U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_true_0_4 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  return Some(ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  goto RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_else_0_5 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  goto RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_while_end_2 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :function_end_RpnCalc_run # None
#  Unreachable # None

# IlFunctionId("delay")(x,)
#  :delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  :delay_while_body_1 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  x <- tad57 Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  goto delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  :delay_while_end_2 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  return None # None
#  :function_end_delay # None
#  Unreachable # None

# IlFunctionId("div32")(a,b,)
#  __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(67,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(67,5))
#  return Some(t60ec) # Some('/lutcomp/programs/lib/div.j':(67,5))
#  goto div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_else_0_2 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  t4917 <- 0n65536/0x00010000u32  # Some('/lutcomp/programs/lib/div.j':(71,5))
#  if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_a <- t8792 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_b <- tace9 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(21,5))
#  te81f <- inline_div32_div16_43_t60ec U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  goto inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_else_0_2 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/div.j':(25,5))
#  if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  te81f <- inline_div32_div16_43_tb0ef U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  goto inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_else_0_5 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(29,5))
#  inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  # Some('/lutcomp/programs/lib/div.j':(30,5))
#  :inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_while_body_7 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 # None
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 # None
#  inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_11 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_14 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_17 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_20 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_22 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_23 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_while_end_8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  te81f <- inline_div32_div16_43_t1506 U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  :inline_div32_div16_43_function_end_div16 # None
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(71,5))
#  return Some(te81f) # Some('/lutcomp/programs/lib/div.j':(71,5))
#  goto div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_else_0_5 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(75,5))
#  hi <- 0xffffffffu32  # Some('/lutcomp/programs/lib/div.j':(76,5))
#  :div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_while_body_7 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_44_a <- t1506 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  t9599 <- inline_div32_shiftright1_44_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_shiftright1_44_function_end_shiftright1 # None
#  t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_45_a <- t5508 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  t3803 <- inline_div32_shiftright1_45_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_shiftright1_45_function_end_shiftright1 # None
#  mid <- t9599 Add Var(t3803) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tb608 <- te825 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  None <= call mul32_64(tfd7e,tace9,tb608,) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tb973 <- mem[t3f2a] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_11 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  x <- mem[te546] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_14 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_17 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  r <- t8792 Subtract Var(tad57) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  taee0 <- r U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_20 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  lo <- tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_while_end_8 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(108,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(108,5))
#  return Some(t1506) # Some('/lutcomp/programs/lib/div.j':(108,5))
#  :function_end_div32 # None
#  Unreachable # None

# IlFunctionId("io_read2")()
#  Unreachable # None
#  :function_end_io_read2 # None
#  Unreachable # None

# IlFunctionId("io_ready_to_read")()
#  Unreachable # None
#  :function_end_io_ready_to_read # None
#  Unreachable # None

# IlFunctionId("io_write0")(data,)
#  Unreachable # None
#  return None # None
#  :function_end_io_write0 # None
#  Unreachable # None

# IlFunctionId("io_write1")(data,)
#  Unreachable # None
#  return None # None
#  :function_end_io_write1 # None
#  Unreachable # None

# IlFunctionId("lcd_draw_char")(i,ch,)
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(9,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(9,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical # None
#  t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t1730 <- t136d ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  None <= call io_write1(t2176,) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  None <= call io_write1(t791e,) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(19,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(19,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  None <= call io_write1(t3e8f,) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  None <= call io_write1(tb5dc,) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(23,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(23,5))
#  return None # None
#  :function_end_lcd_draw_char # None
#  Unreachable # None

# IlFunctionId("lcd_init")()
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  mem[t0] <- ta97f U8 # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(72,5))
#  :lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  :lcd_init_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  goto lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  :lcd_init_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(78,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(78,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(79,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(79,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(80,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(80,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(81,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(81,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(82,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(82,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(83,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(83,5))
#  t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(85,5))
#  None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(85,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(86,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(86,5))
#  t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(88,5))
#  None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(88,5))
#  t477 <- 0n8/0x08u8  # Some('/lutcomp/programs/lib/lcd.j':(89,5))
#  None <= call io_write1(t477,) # Some('/lutcomp/programs/lib/lcd.j':(89,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(90,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(90,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(92,5))
#  None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(92,5))
#  tec13 <- 0n12/0x0cu8  # Some('/lutcomp/programs/lib/lcd.j':(93,5))
#  None <= call io_write1(tec13,) # Some('/lutcomp/programs/lib/lcd.j':(93,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(94,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(94,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(96,5))
#  None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(96,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/lcd.j':(97,5))
#  None <= call io_write1(ta11a,) # Some('/lutcomp/programs/lib/lcd.j':(97,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(98,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(98,5))
#  return None # None
#  :function_end_lcd_init # None
#  Unreachable # None

# IlFunctionId("lcd_putc")(ch,)
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_true_0_1 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t78f0 <- t5dda Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tf5a3 <- t78f0 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  next <- tf5a3 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t1 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t1] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  ta5ff <- next U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_body_4 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t2 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t2] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t164d] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t3 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t4 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t4] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t3] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  goto lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_end_5 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  goto lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_else_0_2 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t5] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t164d] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t6 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t6] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  None <= call lcd_draw_char(t5dda,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t7 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t8 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t8] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t7] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t9 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  t5dda <- mem[t9] U8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_true_0_7 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  None <= call lcd_scroll_up() # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  goto lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_else_0_8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  return None # None
#  :function_end_lcd_putc # None
#  Unreachable # None

# IlFunctionId("lcd_scroll_up")()
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t1 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t5dda <- mem[t1] U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t81b5 <- t5dda Subtract Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  mem[t0] <- t81b5 U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(29,5))
#  :lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9586 <- 0n60/0x3cu8  # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tfd89 <- td0f3 Add Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t760c U32 <- tfd89 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t54b2 <- t760c Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  ch <- mem[t54b2] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_true_0_4 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  mem[t9e70] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  None <= call lcd_draw_char(td0f3,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  goto lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_else_0_5 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  goto lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_predicate_6 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_while_body_7 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_true_0_10 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  None <= call lcd_draw_char(td0f3,tdf3b,) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  goto lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_else_0_11 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  goto lcd_scroll_up_while_predicate_6 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_while_end_8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  return None # None
#  :function_end_lcd_scroll_up # None
#  Unreachable # None

# IlFunctionId("main")()
#  None <= call stdio_init() # Some('programs/app/rpn.j':(4,5))
#  inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_function_end_putc # None
#  inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_function_end_putc # None
#  tca8 <- 0n987664/0x000f1210u32  # Some('programs/app/rpn.j':(12,5))
#  inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  :inline_main_RpnCalc_init_51_function_end_RpnCalc_init # None
#  inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_function_end_putc # None
#  inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_function_end_putc # None
#  tca8 <- 0n987664/0x000f1210u32  # Some('programs/app/rpn.j':(17,5))
#  Some(t2a99) <= call RpnCalc_run(tca8,) # Some('programs/app/rpn.j':(17,5))
#  return Some(t2a99) # Some('programs/app/rpn.j':(17,5))
#  :function_end_main # None
#  Unreachable # None

# IlFunctionId("mul32_64")(a,b,c,)
#  __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
#  a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(58,5))
#  t94df <- a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
#  a_hi[0x01..0x02] <- t94df U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
#  t3b02 <- a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
#  a_hi[0x00..0x01] <- t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
#  b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(62,5))
#  ta5f7 <- b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
#  b_hi[0x01..0x02] <- ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
#  t82cc <- b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
#  b_hi[0x00..0x01] <- t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  t720d <- inline_mul32_64_mul16_32_8_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_8_function_end_mul16_32 # None
#  mem[c] <- t720d U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  t1335 <- c Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_9_function_end_mul16_32 # None
#  mem[t1335] <- t5a04 U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  temp_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(71,5))
#  temp_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(72,5))
#  t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  temp <- inline_mul32_64_mul16_32_10_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_10_function_end_mul16_32 # None
#  t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
#  temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
#  t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
#  temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
#  t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
#  temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
#  t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
#  temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_function_end_add_U64 # None
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  temp <- inline_mul32_64_mul16_32_11_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_11_function_end_mul16_32 # None
#  t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
#  temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
#  t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
#  temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
#  t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
#  temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
#  t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
#  temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_function_end_add_U64 # None
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # None
#  return None # None
#  :function_end_mul32_64 # None
#  Unreachable # None

# IlFunctionId("print_dec32")(a,)
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  None <= call print_dec8(t3404,) # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  return None # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  goto print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#  inline_print_dec32_div32_by10_47_a <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#  inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  # Some('/lutcomp/programs/lib/div.j':(130,5))
#  inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  # Some('/lutcomp/programs/lib/div.j':(130,5))
#  None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) # Some('/lutcomp/programs/lib/div.j':(130,5))
#  inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 # None
#  b <- inline_print_dec32_div32_by10_47_t45ae U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  :inline_print_dec32_div32_by10_47_function_end_div32_by10 # None
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#  None <= call print_dec32(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  inline_print_dec32_mul32_by10_14_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 # None
#  a <- t8792 Subtract Var(t86e2) # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  t6f38 <- t3404 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  inline_print_dec32_putc_29_c <- t6f38 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_function_end_putc # None
#  return None # None
#  :function_end_print_dec32 # None
#  Unreachable # None

# IlFunctionId("print_dec8")(a,)
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  b <- t8792 Divide Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  None <= call print_dec8(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tf5e0 <- tace9 Multiply Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  a <- t8792 Subtract Var(tf5e0) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  goto print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  t5673 <- t8792 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  inline_print_dec8_putc_30_c <- t5673 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_function_end_putc # None
#  return None # None
#  :function_end_print_dec8 # None
#  Unreachable # None

# IlFunctionId("stdio_init")()
#  t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  mem[t0] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  t1 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  mem[t1] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  :inline_stdio_init_queue_init_35_function_end_queue_init # None
#  None <= call lcd_init() # Some('/lutcomp/programs/lib/stdio.j':(14,5))
#  None <= call KeyBoard_init() # Some('/lutcomp/programs/lib/stdio.j':(15,5))
#  return None # None
#  :function_end_stdio_init # None
#  Unreachable # None


# ImageBaseAddress=0x00080400
# entry
# 80400 Init []
#       Initialzing flags and internal regs.
00 

# 80401 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 80407 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 8040d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 04 08 00 

# 80413 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 73 25 08 

# 80417 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 8041d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([16]) Number(0n0/0x00u8)
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987140/0x000f1004u32)
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 80827 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 14 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8082d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 80830 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80833 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 14 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80839 LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 8083c Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# return None None
# Return { value: None }
# 8083f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 80841 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(U32) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35]) Number(0n987392/0x000f1100u32)
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([36])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987652/0x000f1204u32)
# Var inline_Keyboard_poll_queue_push_37_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([24])
# Var t23a (t23a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }) Reg(U32) Some([48, 49, 50, 51])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) Reg(U32) Some([28, 29, 30, 31])
# Var t5ea1 (t5ea1 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))) Reg(U8) Some([24])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([52])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([24]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([36]) Number(0n0/0x00u8)
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb62e (tb62e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([48, 49, 50, 51])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987140/0x000f1004u32)
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 80846 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 

# t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# 80848 AndImm8 [Register(0x18), Constant8(0x04=4)]
#       t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
18 18 04 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8084b LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# 8084e Cmp8 [Register(0x18), Register(0x24)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
15 18 24 

# 80851 JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
72 59 08 08 

# 80855 JmpImm [Label24(Keyboard_poll_if_else_0_2)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
70 5f 08 08 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 80859 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 8085b JmpImm [Label24(Keyboard_poll_if_end_0)]
#       goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
70 5f 08 08 

# :Keyboard_poll_if_else_0_2 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 8085f In2 [Register(0x18)]
#       IoRead2
62 18 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\")) }\nArithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# 80861 LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
20 30 00 00 00 00 

# 80867 Copy8 [Register(0x18), Register(0x30)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
0b 18 30 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# 8086a LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
20 00 04 00 00 00 

# 80870 Mul8_16 [Register(0x30), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
11 30 00 1c 

# 80874 LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1e 00 

# 80877 LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1f 00 

# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 8087a LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# 80880 Load8 [Register(0x20), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
05 20 18 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80883 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# 80886 Cmp8 [Register(0x18), Register(0x24)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
15 18 24 

# 80889 JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
72 a9 08 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 8088d LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# 80893 Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
21 1c 20 

# 80896 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 8089c ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
03 

# 8089d AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
30 30 20 30 

# 808a1 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 808a2 Load8 [Register(0x30), Register(0x18)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
05 30 18 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 808a5 JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 b8 08 08 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 808a9 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 808af ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 808b0 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 30 1c 30 

# 808b4 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 808b5 Load8 [Register(0x30), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 30 18 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 808b8 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 808be Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 808c1 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 808c4 Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 808c7 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 cf 08 08 

# 808cb JmpImm [Label24(Keyboard_poll_if_else_0_8)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
70 0d 09 08 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# 808cf LoadImm32 [Register(0x20), Constant32(0x000f1100=987392)]
#       inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
20 20 00 11 0f 00 

# inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 808d5 LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 808db Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 808de LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 28 00 00 00 00 

# 808e4 Copy8 [Register(0x24), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 24 28 

# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 808e7 ClearCarry []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 808e8 AddCarry32_1 [Register(0x20), Register(0x28), Register(0x20)]
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 20 28 20 

# 808ec AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 808ed Store8 [Register(0x18), Register(0x20)]
#       mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 20 

# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 808f0 LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 808f6 LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 808fc Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 808ff LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 80902 Add8NoCarryIn [Register(0x24), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 24 00 18 

# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 80906 Store8 [Register(0x18), Register(0x2c)]
#       mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 18 2c 

# :inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# inline_Keyboard_poll_queue_push_37_function_end_queue_push
# goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 80909 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
70 0d 09 08 

# :Keyboard_poll_if_else_0_8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Number(0n0/0x00u8)
# 8090d LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80910 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# 80916 Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
21 1c 20 

# 80919 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 8091f ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
03 

# 80920 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
30 30 20 30 

# 80924 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 80925 Load8 [Register(0x30), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
05 30 18 

# if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# 80928 Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
15 24 18 

# 8092b JzImm [Label24(Keyboard_poll_if_else_0_11)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
72 62 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 8092f LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 80935 Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80938 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 8093b Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 8093e JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 52 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 80942 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80948 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 8094b Store8 [Register(0x24), Register(0x20)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 8094e JmpImm [Label24(Keyboard_poll_if_end_12)]
#       goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 5e 09 08 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 80952 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 80958 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# 8095b Store8 [Register(0x18), Register(0x20)]
#       mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# :Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 8095e JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 62 09 08 

# :Keyboard_poll_if_else_0_11 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Number(0n0/0x00u8)
# 80962 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80965 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# 8096b AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
32 1c 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 80971 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
03 

# 80972 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
30 30 1c 30 

# 80976 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 80977 Load8 [Register(0x30), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
05 30 18 

# if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# 8097a Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
15 24 18 

# 8097d JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
72 91 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80981 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 80987 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# 8098a Store8 [Register(0x18), Register(0x20)]
#       mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 8098d JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 9d 09 08 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80991 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80997 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 8099a Store8 [Register(0x24), Register(0x20)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 8099d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 8099f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var a (Local a Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([64, 65, 66, 67])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([68])
# Var diff (Local diff Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([60, 61, 62, 63]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([56, 57, 58, 59]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([76, 77, 78, 79]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([89]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([60, 61, 62, 63]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([97]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([60, 61, 62, 63]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([97]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([98]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([100]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([99])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([89]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_15_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_15_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n69/0x45u8)
# Var inline_RpnCalc_handle_putc_16_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_16_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n82/0x52u8)
# Var inline_RpnCalc_handle_putc_17_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_17_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_17_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_17_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n82/0x52u8)
# Var inline_RpnCalc_handle_putc_18_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_18_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_19_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_19_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_19_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_19_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_20_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_20_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_20_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([68]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_20_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_21_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_21_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_21_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_21_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_22_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_22_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_22_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_23_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_23_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_23_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([68]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n58/0x3au8)
# Var inline_RpnCalc_handle_putc_24_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_24_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_24_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([68]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_24_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var product (Local product Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var quotient (Local quotient Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([89])
# Var stack_count_usize (Local stack_count_usize Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([100])
# Var sum (Local sum Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var t13c5 (t13c5 Number(0n47/0x2fu8)) Reg(U8) Some([99]) Number(0n47/0x2fu8)
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([56, 57, 58, 59])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([56, 57, 58, 59])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([56, 57, 58, 59])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([60, 61, 62, 63])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([99])
# Var t47ec (t47ec Number(0n99/0x63u8)) Reg(U8) Some([69]) Number(0n99/0x63u8)
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([88])
# Var t622 (t622 Number(0n42/0x2au8)) Reg(U8) Some([99]) Number(0n42/0x2au8)
# Var t670d (t670d Ident("sum")) Reg(U32) Some([56, 57, 58, 59])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t8f63 (t8f63 Number(0n45/0x2du8)) Reg(U8) Some([99]) Number(0n45/0x2du8)
# Var t9dae (t9dae Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))) Reg(U8) Some([69])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([88]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([88]) Number(0n0/0x00u8)
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([56, 57, 58, 59])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })) Reg(U32) Some([60, 61, 62, 63])
# Var tbdb5 (tbdb5 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })) Reg(U32) Some([56, 57, 58, 59])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var tc333 (tc333 Number(0n43/0x2bu8)) Reg(U8) Some([99]) Number(0n43/0x2bu8)
# Var tcc42 (tcc42 Number(0n100/0x64u8)) Reg(U8) Some([69]) Number(0n100/0x64u8)
# Var tcdcd (tcdcd Number(0n115/0x73u8)) Reg(U8) Some([99]) Number(0n115/0x73u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([69])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var tdc11 (tdc11 Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tdcb0 (tdcb0 Number(0n48/0x30u8)) Reg(U8) Some([69]) Number(0n48/0x30u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([68])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([69]) Number(0n32/0x20u8)
# Var tdf6e (tdf6e Number(0n113/0x71u8)) Reg(U8) Some([69]) Number(0n113/0x71u8)
# Var teed8 (teed8 Number(0n57/0x39u8)) Reg(U8) Some([69]) Number(0n57/0x39u8)
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# 809a4 Copy32 [Register(0x00), Register(0x40)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [64, 65, 66, 67].
21 00 40 

# 809a7 Copy8 [Register(0x04), Register(0x44)]
#       Save function parameter 'ch' registers [4] to locals [68].
0b 04 44 

# a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 809aa LoadImm8 [Register(0x38), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 38 00 

# b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 809ad LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 3c 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 809b0 LoadImm8 [Register(0x63), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 63 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 809b3 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 63 

# 809b6 JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 be 09 08 

# 809ba JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 c5 09 08 

# :RpnCalc_handle_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809be LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809c1 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 809c5 LoadImm8 [Register(0x63), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 63 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 809c8 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 63 

# 809cb JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 d3 09 08 

# 809cf JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 da 09 08 

# :RpnCalc_handle_if_true_1_3 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809d3 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809d6 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_1_4 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 809da LoadImm8 [Register(0x63), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 63 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 809dd Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 63 

# 809e0 JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 e8 09 08 

# 809e4 JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 ef 09 08 

# :RpnCalc_handle_if_true_2_5 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809e8 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809eb JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_2_6 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 809ef LoadImm8 [Register(0x63), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 63 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 809f2 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 63 

# 809f5 JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 fd 09 08 

# 809f9 JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 04 0a 08 

# :RpnCalc_handle_if_true_3_7 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809fd LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 80a00 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_3_8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 80a04 LoadImm8 [Register(0x63), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 63 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 80a07 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 63 

# 80a0a JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 12 0a 08 

# 80a0e JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 19 0a 08 

# :RpnCalc_handle_if_true_4_9 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 80a12 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 80a15 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_4_10 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80a19 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# :RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 80a1c Copy8 [Register(0x64), Register(0x63)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 64 63 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80a1f LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 58 00 

# if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# 80a22 Cmp8 [Register(0x63), Register(0x58)]
#       if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
15 63 58 

# 80a25 JcImm [Label24(RpnCalc_handle_if_else_0_13)]
#       if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
71 c9 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 80a29 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 80a2c Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 48 4c 

# 80a2f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 4c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 80a35 Load8 [Register(0x4c), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 4c 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80a38 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 80a3b Cmp8 [Register(0x58), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 58 59 

# 80a3e JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 c5 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 80a42 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 80a45 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 80a4b Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 50 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a4e Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a51 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a54 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80a5a Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80a5d LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80a63 Mul8_16 [Register(0x50), Register(0x00), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 50 00 50 

# 80a67 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 52 00 

# 80a6a LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 53 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80a6d ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80a6e AddCarry32_1 [Register(0x48), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 48 50 50 

# 80a72 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80a73 Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 4c 50 

# 80a76 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a77 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a7a Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a7d AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a83 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a86 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a89 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80a8f Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80a92 Copy32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 50 4c 

# 80a95 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 4c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80a9b Store32_1 [Register(0x4c), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 4c 54 

# 80a9e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 80a9f Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 80aa2 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 80aa8 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 4c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 80aae Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 4c 50 

# 80ab1 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 80ab2 Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 48 4c 

# 80ab5 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 4c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80abb LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 80abe Store8 [Register(0x59), Register(0x4c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 59 4c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 80ac1 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 c5 0a 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 80ac5 JmpImm [Label24(RpnCalc_handle_if_end_11)]
#       goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
70 c9 0a 08 

# :RpnCalc_handle_if_else_0_13 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_end_11
# tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
# 80ac9 Copy32 [Register(0x40), Register(0x48)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
21 40 48 

# 80acc AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
32 48 40 00 00 00 

# stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 80ad2 Load32 [Register(0x48), Register(0x48)]
#       stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 48 48 

# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
# Index("stack_count_usize", Number(0n0/0x00u8))
# 80ad5 Copy8 [Register(0x48), Register(0x59)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
#       Index("stack_count_usize", Number(0n0/0x00u8))
0b 48 59 

# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 80ad8 Copy8 [Register(0x64), Register(0x63)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 64 63 

# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 80adb Copy8 [Register(0x59), Register(0x58)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 59 58 

# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 80ade Cmp8 [Register(0x63), Register(0x58)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 63 58 

# 80ae1 JcImm [Label24(RpnCalc_handle_if_else_0_16)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 d4 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 80ae5 LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80ae8 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80aea LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80af0 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80af3 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 80af6 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 80af9 JzImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 1d 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_15_putc_if_true_0_1
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 80afd LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b00 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 80b03 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b09 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 13 0b 08 00 

# 80b0f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 80b13 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b19 JmpImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 1d 0b 08 

# :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_end_0
# :inline_RpnCalc_handle_putc_15_function_end_putc None
# inline_RpnCalc_handle_putc_15_function_end_putc
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 80b1d LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b20 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80b22 LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80b28 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80b2b LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 80b2e Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 80b31 JzImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 55 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_16_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 80b35 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b38 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 80b3b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b41 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 4b 0b 08 00 

# 80b47 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 80b4b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b51 JmpImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 55 0b 08 

# :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_end_0
# :inline_RpnCalc_handle_putc_16_function_end_putc None
# inline_RpnCalc_handle_putc_16_function_end_putc
# inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# 80b55 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b58 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80b5a LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80b60 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80b63 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 80b66 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 80b69 JzImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 8d 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_17_putc_if_true_0_1
# inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# 80b6d LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b70 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_17_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 80b73 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b79 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 83 0b 08 00 

# 80b7f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 80b83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b89 JmpImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 8d 0b 08 

# :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_end_0
# :inline_RpnCalc_handle_putc_17_function_end_putc None
# inline_RpnCalc_handle_putc_17_function_end_putc
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 80b8d LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 80b90 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b93 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80b95 LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80b9b Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80b9e LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 80ba1 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 80ba4 JzImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 c8 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_18_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 80ba8 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80bab Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 80bae AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80bb4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c be 0b 08 00 

# 80bba JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 80bbe AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80bc4 JmpImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 c8 0b 08 

# :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_end_0
# :inline_RpnCalc_handle_putc_18_function_end_putc None
# inline_RpnCalc_handle_putc_18_function_end_putc
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 80bc8 LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 58 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 80bcb Copy8 [Register(0x58), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 58 00 

# 80bce JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 80bd0 JmpImm [Label24(RpnCalc_handle_if_end_14)]
#       goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
70 d4 0b 08 

# :RpnCalc_handle_if_else_0_16 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 80bd4 Copy8 [Register(0x64), Register(0x63)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 64 63 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80bd7 LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 58 00 

# if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# 80bda Cmp8 [Register(0x63), Register(0x58)]
#       if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
15 63 58 

# 80bdd JcImm [Label24(RpnCalc_handle_if_else_0_19)]
#       if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
71 2c 0c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80be1 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 38 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80be4 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80be7 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80bed Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80bf0 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80bf6 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80bf9 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80bff Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 80c02 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c03 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80c06 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80c0c Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80c0f LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80c15 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 80c19 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 80c1c LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80c1f ClearCarry []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80c20 AddCarry32_1 [Register(0x38), Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 48 38 

# 80c24 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80c25 Load32 [Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 38 38 

# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 80c28 JmpImm [Label24(RpnCalc_handle_if_end_17)]
#       goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
70 2c 0c 08 

# :RpnCalc_handle_if_else_0_19 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Ident("stack_needed")
# 80c2c Copy8 [Register(0x64), Register(0x63)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Ident("stack_needed")
0b 64 63 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 80c2f LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 58 01 

# if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# 80c32 Cmp8 [Register(0x63), Register(0x58)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
15 63 58 

# 80c35 JcImm [Label24(RpnCalc_handle_if_else_0_22)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
71 84 0c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80c39 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 3c 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c3c Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c3f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c45 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c48 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80c4e Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80c51 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80c57 Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 80c5a Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c5b Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c5e AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80c64 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80c67 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80c6d Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 80c71 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 80c74 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80c77 ClearCarry []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80c78 AddCarry32_1 [Register(0x3c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 48 3c 

# 80c7c AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80c7d Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 

# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 80c80 JmpImm [Label24(RpnCalc_handle_if_end_20)]
#       goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
70 84 0c 08 

# :RpnCalc_handle_if_else_0_22 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(U32)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 80c84 LoadImm8 [Register(0x63), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 63 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 80c87 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 63 

# 80c8a JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 92 0c 08 

# 80c8e JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 fb 0d 08 

# :RpnCalc_handle_if_true_0_24 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 80c92 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 80c95 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 80c98 ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 80c99 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 5c 48 5c 

# 80c9d AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 80c9e Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 5c 38 

# None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 80ca1 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 80ca4 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6b 

# 80ca6 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6a 

# 80ca8 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 69 

# 80caa Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 68 

# 80cac Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 64 

# 80cae Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 63 

# 80cb0 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 62 

# 80cb2 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 61 

# 80cb4 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 60 

# 80cb6 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5f 

# 80cb8 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5e 

# 80cba Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5d 

# 80cbc Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5c 

# 80cbe Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 59 

# 80cc0 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 58 

# 80cc2 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 57 

# 80cc4 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 56 

# 80cc6 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 55 

# 80cc8 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 54 

# 80cca Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 53 

# 80ccc Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 52 

# 80cce Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 51 

# 80cd0 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 50 

# 80cd2 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4f 

# 80cd4 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4e 

# 80cd6 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4d 

# 80cd8 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4c 

# 80cda Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4b 

# 80cdc Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4a 

# 80cde Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 49 

# 80ce0 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 48 

# 80ce2 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 45 

# 80ce4 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 44 

# 80ce6 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 43 

# 80ce8 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 42 

# 80cea Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 41 

# 80cec Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 40 

# 80cee Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3f 

# 80cf0 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3e 

# 80cf2 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3d 

# 80cf4 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3c 

# 80cf6 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3b 

# 80cf8 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3a 

# 80cfa Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 39 

# 80cfc Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 38 

# 80cfe AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 80d04 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 0e 0d 08 00 

# 80d0a JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 63 2b 08 

# 80d0e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 80d14 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 38 

# 80d16 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 39 

# 80d18 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3a 

# 80d1a Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3b 

# 80d1c Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3c 

# 80d1e Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3d 

# 80d20 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3e 

# 80d22 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3f 

# 80d24 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 40 

# 80d26 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 41 

# 80d28 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 42 

# 80d2a Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 43 

# 80d2c Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 44 

# 80d2e Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 45 

# 80d30 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 48 

# 80d32 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 49 

# 80d34 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4a 

# 80d36 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4b 

# 80d38 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4c 

# 80d3a Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4d 

# 80d3c Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4e 

# 80d3e Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4f 

# 80d40 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 50 

# 80d42 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 51 

# 80d44 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 52 

# 80d46 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 53 

# 80d48 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 54 

# 80d4a Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 55 

# 80d4c Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 56 

# 80d4e Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 57 

# 80d50 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 58 

# 80d52 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 59 

# 80d54 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5c 

# 80d56 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5d 

# 80d58 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5e 

# 80d5a Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5f 

# 80d5c Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 60 

# 80d5e Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 61 

# 80d60 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 62 

# 80d62 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 63 

# 80d64 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 64 

# 80d66 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 68 

# 80d68 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 69 

# 80d6a Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6a 

# 80d6c Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 80d6e LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# 80d71 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80d74 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80d76 LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80d7c Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80d7f LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 80d82 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 80d85 JzImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 a9 0d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_19_putc_if_true_0_1
# inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# 80d89 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80d8c Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_19_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 80d8f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80d95 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 9f 0d 08 00 

# 80d9b JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 80d9f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80da5 JmpImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 a9 0d 08 

# :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_end_0
# :inline_RpnCalc_handle_putc_19_function_end_putc None
# inline_RpnCalc_handle_putc_19_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 80da9 Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 5c 38 

# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 80dac Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80daf Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80db2 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80db8 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80dbb LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80dc1 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 80dc5 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 80dc8 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80dcb ClearCarry []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80dcc AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 80dd0 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80dd1 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 80dd4 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80dd5 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80dd8 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80dde Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80de1 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80de7 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80dea Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 80ded AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80df3 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 80df6 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80df7 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_0_25 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 80dfb LoadImm8 [Register(0x63), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 63 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 80dfe Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 63 

# 80e01 JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 09 0e 08 

# 80e05 JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 7d 0f 08 

# :RpnCalc_handle_if_true_1_26 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 80e09 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 80e0c Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 80e0f Copy32 [Register(0x48), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 48 00 

# 80e12 Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 

# 80e14 Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 

# 80e16 Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 

# 80e18 Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 

# 80e1a AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 

# 80e20 ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 

# 80e21 AddCarry32_1 [Register(0x5c), Register(0x00), Register(0x38)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 5c 00 38 

# 80e25 AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 

# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 80e26 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 80e29 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6b 

# 80e2b Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6a 

# 80e2d Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 69 

# 80e2f Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 68 

# 80e31 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 64 

# 80e33 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 63 

# 80e35 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 62 

# 80e37 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 61 

# 80e39 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 60 

# 80e3b Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5f 

# 80e3d Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5e 

# 80e3f Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5d 

# 80e41 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5c 

# 80e43 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 59 

# 80e45 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 58 

# 80e47 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 57 

# 80e49 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 56 

# 80e4b Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 55 

# 80e4d Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 54 

# 80e4f Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 53 

# 80e51 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 52 

# 80e53 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 51 

# 80e55 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 50 

# 80e57 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4f 

# 80e59 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4e 

# 80e5b Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4d 

# 80e5d Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4c 

# 80e5f Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4b 

# 80e61 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4a 

# 80e63 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 49 

# 80e65 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 48 

# 80e67 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 45 

# 80e69 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 44 

# 80e6b Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 43 

# 80e6d Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 42 

# 80e6f Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 41 

# 80e71 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 40 

# 80e73 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3f 

# 80e75 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3e 

# 80e77 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3d 

# 80e79 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3c 

# 80e7b Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3b 

# 80e7d Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3a 

# 80e7f Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 39 

# 80e81 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 38 

# 80e83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 80e89 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 93 0e 08 00 

# 80e8f JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 63 2b 08 

# 80e93 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 80e99 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 38 

# 80e9b Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 39 

# 80e9d Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3a 

# 80e9f Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3b 

# 80ea1 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3c 

# 80ea3 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3d 

# 80ea5 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3e 

# 80ea7 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3f 

# 80ea9 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 40 

# 80eab Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 41 

# 80ead Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 42 

# 80eaf Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 43 

# 80eb1 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 44 

# 80eb3 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 45 

# 80eb5 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 48 

# 80eb7 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 49 

# 80eb9 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4a 

# 80ebb Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4b 

# 80ebd Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4c 

# 80ebf Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4d 

# 80ec1 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4e 

# 80ec3 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4f 

# 80ec5 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 50 

# 80ec7 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 51 

# 80ec9 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 52 

# 80ecb Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 53 

# 80ecd Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 54 

# 80ecf Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 55 

# 80ed1 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 56 

# 80ed3 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 57 

# 80ed5 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 58 

# 80ed7 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 59 

# 80ed9 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5c 

# 80edb Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5d 

# 80edd Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5e 

# 80edf Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5f 

# 80ee1 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 60 

# 80ee3 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 61 

# 80ee5 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 62 

# 80ee7 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 63 

# 80ee9 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 64 

# 80eeb Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 68 

# 80eed Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 69 

# 80eef Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6a 

# 80ef1 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 80ef3 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# 80ef6 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80ef9 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80efb LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80f01 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80f04 LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 44 00 

# if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 80f07 Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 60 44 

# 80f0a JzImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 2e 0f 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_20_putc_if_true_0_1
# inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# 80f0e LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80f11 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_20_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 80f14 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80f1a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 24 0f 08 00 

# 80f20 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 80f24 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80f2a JmpImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 2e 0f 08 

# :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_end_0
# :inline_RpnCalc_handle_putc_20_function_end_putc None
# inline_RpnCalc_handle_putc_20_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 80f2e Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80f31 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80f34 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80f3a Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80f3d LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80f43 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 80f47 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 80f4a LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80f4d ClearCarry []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80f4e AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 80f52 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80f53 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 80f56 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80f57 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80f5a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80f60 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80f63 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80f69 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80f6c Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 80f6f AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80f75 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 80f78 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80f79 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_1_27 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 80f7d LoadImm8 [Register(0x63), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 63 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 80f80 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 63 

# 80f83 JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 8b 0f 08 

# 80f87 JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 31 13 08 

# :RpnCalc_handle_if_true_2_28 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 80f8b Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 80f8e Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f91 Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 5c 38 

# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f94 Copy32 [Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 48 5c 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f97 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f9a Copy32 [Register(0x5c), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 5c 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 80f9d Mul8_16 [Register(0x3c), Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 48 4c 

# 80fa1 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 80fa4 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 80fa7 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 80faa LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 80fb0 Copy8 [Register(0x60), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 80fb3 Copy8 [Register(0x49), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 80fb6 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 80fbc Copy8 [Register(0x63), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 63 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 80fbf Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 54 50 50 

# 80fc3 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 52 00 

# 80fc6 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 80fc9 Copy8 [Register(0x51), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 51 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 80fcc Copy8 [Register(0x59), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 59 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 80fcf Copy8 [Register(0x50), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 50 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 80fd2 Copy8 [Register(0x59), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 59 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80fd5 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 80fd8 Copy8 [Register(0x62), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80fdb LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 80fde Copy8 [Register(0x62), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 80fe1 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 80fe2 AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 80fe6 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 80fe7 Copy8 [Register(0x49), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 80fea LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 80ff0 Copy8 [Register(0x63), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 63 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 80ff3 Mul8_16 [Register(0x3c), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 50 50 

# 80ff7 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 52 00 

# 80ffa LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 80ffd Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81000 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 81006 Copy8 [Register(0x60), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 81009 Mul8_16 [Register(0x54), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 54 48 3c 

# 8100d LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 81010 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81013 Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81016 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81017 AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 3c 50 

# 8101b AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 8101c Copy8 [Register(0x52), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 52 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 8101f Copy8 [Register(0x60), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 81022 Copy8 [Register(0x51), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 51 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 81025 Copy8 [Register(0x60), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 81028 Copy8 [Register(0x50), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 50 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 8102b Copy8 [Register(0x60), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8102e LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81031 Copy8 [Register(0x62), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81034 Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81037 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 81038 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 48 3c 

# 8103c AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 8103d Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 4c 

# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81040 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 81046 Copy8 [Register(0x3b), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 3b 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 81049 Copy8 [Register(0x45), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 45 3d 

# inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 8104c Copy8 [Register(0x3a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 3a 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 8104f Copy8 [Register(0x45), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 45 3c 

# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81052 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 48 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 81058 Copy8 [Register(0x5f), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 5f 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 8105b Copy8 [Register(0x44), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 44 49 

# inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 8105e Copy8 [Register(0x5e), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 5e 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 81061 Copy8 [Register(0x44), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 44 48 

# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 81064 Mul8_16 [Register(0x3c), Register(0x5c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 5c 50 

# 81068 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 8106b LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8106e Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81071 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 81077 Copy8 [Register(0x60), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8107a Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8107d LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 81083 Copy8 [Register(0x44), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81086 Mul8_16 [Register(0x68), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 68 54 54 

# 8108a LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 8108d LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 81090 Copy8 [Register(0x55), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 81093 Copy8 [Register(0x62), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 62 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 81096 Copy8 [Register(0x54), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 81099 Copy8 [Register(0x62), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 62 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8109c LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 8109f Copy8 [Register(0x64), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 810a2 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 810a5 Copy8 [Register(0x64), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 810a8 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 810a9 AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 810ad AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 810ae Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 810b1 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 810b7 Copy8 [Register(0x44), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 810ba Mul8_16 [Register(0x3c), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 54 54 

# 810be LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 810c1 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 810c4 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 810c7 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 810cd Copy8 [Register(0x60), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 810d0 Mul8_16 [Register(0x68), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 68 5c 3c 

# 810d4 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 810d7 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 810da Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 810dd ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 810de AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 5c 3c 54 

# 810e2 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 810e3 Copy8 [Register(0x56), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 810e6 Copy8 [Register(0x60), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 810e9 Copy8 [Register(0x55), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 810ec Copy8 [Register(0x60), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 810ef Copy8 [Register(0x54), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 810f2 Copy8 [Register(0x60), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 810f5 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 810f8 Copy8 [Register(0x64), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 810fb Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 810fe ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 810ff AddCarry32_1 [Register(0x50), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 5c 3c 

# 81103 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 81104 Copy32 [Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 54 

# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 81107 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 8110a Mul8_16 [Register(0x38), Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 5c 

# 8110e LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5e 00 

# 81111 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81114 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81117 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 8111d Copy8 [Register(0x45), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81120 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81123 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 81129 Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 8112c Mul8_16 [Register(0x50), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 50 48 48 

# 81130 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 81133 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 81136 Copy8 [Register(0x49), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 49 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 81139 Copy8 [Register(0x63), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 63 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 8113c Copy8 [Register(0x48), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 48 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 8113f Copy8 [Register(0x63), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 63 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81142 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81145 Copy8 [Register(0x59), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 59 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81148 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 8114b Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 8114e ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 8114f AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 5c 48 5c 

# 81153 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81154 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81157 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 8115d Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81160 Mul8_16 [Register(0x38), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 48 48 

# 81164 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 81167 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8116a Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 8116d LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 81173 Copy8 [Register(0x45), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 81176 Mul8_16 [Register(0x50), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 50 3c 38 

# 8117a LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 8117d LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81180 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81183 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81184 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 48 

# 81188 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 81189 Copy8 [Register(0x4a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4a 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 8118c Copy8 [Register(0x45), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 45 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8118f Copy8 [Register(0x49), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 49 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 81192 Copy8 [Register(0x45), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 81195 Copy8 [Register(0x48), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 48 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 81198 Copy8 [Register(0x45), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8119b LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 8119e Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 811a1 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 811a4 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 811a5 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 5c 3c 38 

# 811a9 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 811aa ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 

# 811ab AddCarry32_1 [Register(0x54), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 54 38 38 

# 811af AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 

# inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 811b0 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 811b3 Copy8 [Register(0x45), Register(0x3b)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 3b 

# inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 811b6 Copy8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 38 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 811b9 Copy8 [Register(0x45), Register(0x3a)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 3a 

# inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 811bc LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 811bf Copy8 [Register(0x60), Register(0x39)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 60 39 

# inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 811c2 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 811c5 Copy8 [Register(0x60), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 60 38 

# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 811c8 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 4c 3c 

# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 811cb ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 811cc AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 38 

# 811d0 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 811d1 Copy32 [Register(0x38), Register(0x5c)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 38 5c 

# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 None
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 811d4 Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 5c 38 

# None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 811d7 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 811da Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6b 

# 811dc Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6a 

# 811de Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 69 

# 811e0 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 68 

# 811e2 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 64 

# 811e4 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 63 

# 811e6 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 62 

# 811e8 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 61 

# 811ea Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 60 

# 811ec Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5f 

# 811ee Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5e 

# 811f0 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5d 

# 811f2 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5c 

# 811f4 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 59 

# 811f6 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 58 

# 811f8 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 57 

# 811fa Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 56 

# 811fc Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 55 

# 811fe Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 54 

# 81200 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 53 

# 81202 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 52 

# 81204 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 51 

# 81206 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 50 

# 81208 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4f 

# 8120a Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4e 

# 8120c Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4d 

# 8120e Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4c 

# 81210 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4b 

# 81212 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4a 

# 81214 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 49 

# 81216 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 48 

# 81218 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 45 

# 8121a Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 44 

# 8121c Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 43 

# 8121e Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 42 

# 81220 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 41 

# 81222 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 40 

# 81224 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3f 

# 81226 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3e 

# 81228 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3d 

# 8122a Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3c 

# 8122c Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3b 

# 8122e Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3a 

# 81230 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 39 

# 81232 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 38 

# 81234 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 8123a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 44 12 08 00 

# 81240 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 63 2b 08 

# 81244 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 8124a Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 38 

# 8124c Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 39 

# 8124e Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3a 

# 81250 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3b 

# 81252 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3c 

# 81254 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3d 

# 81256 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3e 

# 81258 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3f 

# 8125a Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 40 

# 8125c Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 41 

# 8125e Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 42 

# 81260 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 43 

# 81262 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 44 

# 81264 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 45 

# 81266 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 48 

# 81268 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 49 

# 8126a Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4a 

# 8126c Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4b 

# 8126e Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4c 

# 81270 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4d 

# 81272 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4e 

# 81274 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4f 

# 81276 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 50 

# 81278 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 51 

# 8127a Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 52 

# 8127c Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 53 

# 8127e Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 54 

# 81280 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 55 

# 81282 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 56 

# 81284 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 57 

# 81286 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 58 

# 81288 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 59 

# 8128a Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5c 

# 8128c Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5d 

# 8128e Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5e 

# 81290 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5f 

# 81292 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 60 

# 81294 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 61 

# 81296 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 62 

# 81298 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 63 

# 8129a Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 64 

# 8129c Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 68 

# 8129e Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 69 

# 812a0 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6a 

# 812a2 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 812a4 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# 812a7 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 812aa Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 812ac LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 812b2 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 812b5 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 812b8 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 812bb JzImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 df 12 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_21_putc_if_true_0_1
# inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# 812bf LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 812c2 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_21_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 812c5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 812cb StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c d5 12 08 00 

# 812d1 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 812d5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 812db JmpImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 df 12 08 

# :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_end_0
# :inline_RpnCalc_handle_putc_21_function_end_putc None
# inline_RpnCalc_handle_putc_21_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 812df Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 5c 38 

# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 812e2 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 812e5 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 812e8 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 812ee Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 812f1 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 812f7 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 812fb LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 812fe LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81301 ClearCarry []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 81302 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 81306 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81307 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 8130a Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8130b Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 8130e AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81314 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81317 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 8131d Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 81320 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 81323 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81329 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 8132c Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8132d JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_2_29 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 81331 LoadImm8 [Register(0x63), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 63 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 81334 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 63 

# 81337 JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 3f 13 08 

# 8133b JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 75 15 08 

# :RpnCalc_handle_if_true_3_30 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 8133f Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 81342 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 81345 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 5c 00 

# 81348 Copy32 [Register(0x48), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 48 04 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 8134b Push8 [Register(0x6b)]
#       Saving reg0x6b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6b 

# 8134d Push8 [Register(0x6a)]
#       Saving reg0x6a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6a 

# 8134f Push8 [Register(0x69)]
#       Saving reg0x69 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 69 

# 81351 Push8 [Register(0x68)]
#       Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 68 

# 81353 Push8 [Register(0x64)]
#       Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 64 

# 81355 Push8 [Register(0x63)]
#       Saving reg0x63 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 63 

# 81357 Push8 [Register(0x62)]
#       Saving reg0x62 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 62 

# 81359 Push8 [Register(0x61)]
#       Saving reg0x61 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 61 

# 8135b Push8 [Register(0x60)]
#       Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 60 

# 8135d Push8 [Register(0x5f)]
#       Saving reg0x5f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5f 

# 8135f Push8 [Register(0x5e)]
#       Saving reg0x5e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5e 

# 81361 Push8 [Register(0x5d)]
#       Saving reg0x5d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5d 

# 81363 Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5c 

# 81365 Push8 [Register(0x59)]
#       Saving reg0x59 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 59 

# 81367 Push8 [Register(0x58)]
#       Saving reg0x58 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 58 

# 81369 Push8 [Register(0x57)]
#       Saving reg0x57 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 57 

# 8136b Push8 [Register(0x56)]
#       Saving reg0x56 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 56 

# 8136d Push8 [Register(0x55)]
#       Saving reg0x55 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 55 

# 8136f Push8 [Register(0x54)]
#       Saving reg0x54 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 54 

# 81371 Push8 [Register(0x53)]
#       Saving reg0x53 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 53 

# 81373 Push8 [Register(0x52)]
#       Saving reg0x52 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 52 

# 81375 Push8 [Register(0x51)]
#       Saving reg0x51 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 51 

# 81377 Push8 [Register(0x50)]
#       Saving reg0x50 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 50 

# 81379 Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4f 

# 8137b Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4e 

# 8137d Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4d 

# 8137f Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4c 

# 81381 Push8 [Register(0x4b)]
#       Saving reg0x4b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4b 

# 81383 Push8 [Register(0x4a)]
#       Saving reg0x4a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4a 

# 81385 Push8 [Register(0x49)]
#       Saving reg0x49 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 49 

# 81387 Push8 [Register(0x48)]
#       Saving reg0x48 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 48 

# 81389 Push8 [Register(0x45)]
#       Saving reg0x45 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 45 

# 8138b Push8 [Register(0x44)]
#       Saving reg0x44 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 44 

# 8138d Push8 [Register(0x43)]
#       Saving reg0x43 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 43 

# 8138f Push8 [Register(0x42)]
#       Saving reg0x42 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 42 

# 81391 Push8 [Register(0x41)]
#       Saving reg0x41 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 41 

# 81393 Push8 [Register(0x40)]
#       Saving reg0x40 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 40 

# 81395 Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3f 

# 81397 Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3e 

# 81399 Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3d 

# 8139b Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3c 

# 8139d Push8 [Register(0x3b)]
#       Saving reg0x3b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3b 

# 8139f Push8 [Register(0x3a)]
#       Saving reg0x3a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3a 

# 813a1 Push8 [Register(0x39)]
#       Saving reg0x39 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 39 

# 813a3 Push8 [Register(0x38)]
#       Saving reg0x38 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 38 

# 813a5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 

# 813ab StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c b5 13 08 00 

# 813b1 JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 ff 1b 08 

# 813b5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 

# 813bb Pop8 [Register(0x38)]
#       Restoring reg0x38 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 38 

# 813bd Pop8 [Register(0x39)]
#       Restoring reg0x39 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 39 

# 813bf Pop8 [Register(0x3a)]
#       Restoring reg0x3a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3a 

# 813c1 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3b 

# 813c3 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3c 

# 813c5 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3d 

# 813c7 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3e 

# 813c9 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3f 

# 813cb Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 40 

# 813cd Pop8 [Register(0x41)]
#       Restoring reg0x41 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 41 

# 813cf Pop8 [Register(0x42)]
#       Restoring reg0x42 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 42 

# 813d1 Pop8 [Register(0x43)]
#       Restoring reg0x43 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 43 

# 813d3 Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 44 

# 813d5 Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 45 

# 813d7 Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 48 

# 813d9 Pop8 [Register(0x49)]
#       Restoring reg0x49 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 49 

# 813db Pop8 [Register(0x4a)]
#       Restoring reg0x4a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4a 

# 813dd Pop8 [Register(0x4b)]
#       Restoring reg0x4b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4b 

# 813df Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4c 

# 813e1 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4d 

# 813e3 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4e 

# 813e5 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4f 

# 813e7 Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 50 

# 813e9 Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 51 

# 813eb Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 52 

# 813ed Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 53 

# 813ef Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 54 

# 813f1 Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 55 

# 813f3 Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 56 

# 813f5 Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 57 

# 813f7 Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 58 

# 813f9 Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 59 

# 813fb Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5c 

# 813fd Pop8 [Register(0x5d)]
#       Restoring reg0x5d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5d 

# 813ff Pop8 [Register(0x5e)]
#       Restoring reg0x5e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5e 

# 81401 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5f 

# 81403 Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 60 

# 81405 Pop8 [Register(0x61)]
#       Restoring reg0x61 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 61 

# 81407 Pop8 [Register(0x62)]
#       Restoring reg0x62 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 62 

# 81409 Pop8 [Register(0x63)]
#       Restoring reg0x63 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 63 

# 8140b Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 64 

# 8140d Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 68 

# 8140f Pop8 [Register(0x69)]
#       Restoring reg0x69 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 69 

# 81411 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6a 

# 81413 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6b 

# 81415 Copy32 [Register(0x00), Register(0x5c)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 5c 

# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 81418 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 8141b Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 8141e Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6b 

# 81420 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6a 

# 81422 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 69 

# 81424 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 68 

# 81426 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 64 

# 81428 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 63 

# 8142a Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 62 

# 8142c Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 61 

# 8142e Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 60 

# 81430 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5f 

# 81432 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5e 

# 81434 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5d 

# 81436 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5c 

# 81438 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 59 

# 8143a Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 58 

# 8143c Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 57 

# 8143e Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 56 

# 81440 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 55 

# 81442 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 54 

# 81444 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 53 

# 81446 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 52 

# 81448 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 51 

# 8144a Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 50 

# 8144c Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4f 

# 8144e Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4e 

# 81450 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4d 

# 81452 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4c 

# 81454 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4b 

# 81456 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4a 

# 81458 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 49 

# 8145a Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 48 

# 8145c Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 45 

# 8145e Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 44 

# 81460 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 43 

# 81462 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 42 

# 81464 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 41 

# 81466 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 40 

# 81468 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3f 

# 8146a Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3e 

# 8146c Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3d 

# 8146e Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3c 

# 81470 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3b 

# 81472 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3a 

# 81474 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 39 

# 81476 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 38 

# 81478 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 8147e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 88 14 08 00 

# 81484 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 63 2b 08 

# 81488 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 8148e Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 38 

# 81490 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 39 

# 81492 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3a 

# 81494 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3b 

# 81496 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3c 

# 81498 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3d 

# 8149a Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3e 

# 8149c Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3f 

# 8149e Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 40 

# 814a0 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 41 

# 814a2 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 42 

# 814a4 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 43 

# 814a6 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 44 

# 814a8 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 45 

# 814aa Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 48 

# 814ac Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 49 

# 814ae Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4a 

# 814b0 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4b 

# 814b2 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4c 

# 814b4 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4d 

# 814b6 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4e 

# 814b8 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4f 

# 814ba Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 50 

# 814bc Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 51 

# 814be Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 52 

# 814c0 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 53 

# 814c2 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 54 

# 814c4 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 55 

# 814c6 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 56 

# 814c8 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 57 

# 814ca Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 58 

# 814cc Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 59 

# 814ce Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5c 

# 814d0 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5d 

# 814d2 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5e 

# 814d4 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5f 

# 814d6 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 60 

# 814d8 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 61 

# 814da Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 62 

# 814dc Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 63 

# 814de Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 64 

# 814e0 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 68 

# 814e2 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 69 

# 814e4 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6a 

# 814e6 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 814e8 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# 814eb LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 814ee Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 814f0 LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 814f6 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 814f9 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 814fc Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 814ff JzImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 23 15 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_22_putc_if_true_0_1
# inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# 81503 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 81506 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_22_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 81509 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8150f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 19 15 08 00 

# 81515 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 81519 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 8151f JmpImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 23 15 08 

# :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_end_0
# :inline_RpnCalc_handle_putc_22_function_end_putc None
# inline_RpnCalc_handle_putc_22_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 81523 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 81526 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81529 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 8152c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81532 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 81535 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 8153b Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 8153f LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81542 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81545 ClearCarry []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 81546 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 8154a AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8154b Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 8154e Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8154f Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81552 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81558 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 8155b AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 81561 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 81564 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 81567 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 8156d Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 81570 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81571 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_3_31 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 81575 LoadImm8 [Register(0x63), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 63 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 81578 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 63 

# 8157b JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 83 15 08 

# 8157f JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 29 16 08 

# :RpnCalc_handle_if_true_4_32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 81583 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 81586 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 40 5c 

# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 81589 Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 48 38 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8158c Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 8158f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81595 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 81598 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 8159e Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 815a2 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 815a5 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 815a8 ClearCarry []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 815a9 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 5c 48 48 

# 815ad AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 815ae Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 48 

# 815b1 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 815b2 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 815b5 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 815bb Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 815be AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 815c4 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 815c7 Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 48 38 

# 815ca AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 815d0 Store32_1 [Register(0x38), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 4c 

# 815d3 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 815d4 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 3c 5c 

# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 815d7 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 815da Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 5c 38 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 815dd Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 815e0 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 815e6 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 815e9 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 815ef Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 815f3 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 815f6 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 815f9 ClearCarry []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 815fa AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 815fe AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 815ff Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 81602 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81603 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81606 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8160c Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 8160f AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 81615 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 81618 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 8161b AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81621 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 81624 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81625 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_4_33 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Number(0n113/0x71u8)
# 81629 LoadImm8 [Register(0x45), Constant8(0x71=113)]
#       tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
#       Number(0n113/0x71u8)
04 45 71 

# if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# 8162c Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
15 44 45 

# 8162f JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
72 37 16 08 

# 81633 JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
70 43 16 08 

# :RpnCalc_handle_if_true_5_34 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 81637 LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 58 00 

# return Some(ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 8163a Copy8 [Register(0x58), Register(0x00)]
#       return Some(ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 58 00 

# 8163d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8163f JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_5_35 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 81643 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 60 0a 

# if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 81646 Cmp8 [Register(0x44), Register(0x60)]
#       if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 44 60 

# 81649 JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 51 16 08 

# 8164d JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 f1 16 08 

# :RpnCalc_handle_if_true_6_36 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 81651 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 81654 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 81657 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 8165d Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81660 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 61 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 81663 Cmp8 [Register(0x60), Register(0x61)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 60 61 

# 81666 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 ed 16 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 8166a Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 40 

# 8166d AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 81673 Load32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 40 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 81676 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81679 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 8167c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81682 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 81685 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 8168b Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 8168f LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81692 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81695 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 81696 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 8169a AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8169b Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 8169e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 8169f Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 816a2 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 816a5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 816ab Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 816ae Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 816b1 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 816b7 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 816ba Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 816bd AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 816c3 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 816c6 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 816c7 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 40 

# 816ca AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 816d0 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 816d6 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 3c 40 

# 816d9 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 816da Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 816dd AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 816e3 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 61 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 816e6 Store8 [Register(0x61), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 61 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 816e9 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 ed 16 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 816ed JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_6_37 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 816f1 LoadImm8 [Register(0x45), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 45 20 

# if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# 816f4 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
15 44 45 

# 816f7 JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
72 ff 16 08 

# 816fb JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
70 9f 17 08 

# :RpnCalc_handle_if_true_7_38 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 816ff Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 81702 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 81705 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 8170b Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8170e LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 61 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 81711 Cmp8 [Register(0x60), Register(0x61)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 60 61 

# 81714 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 9b 17 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81718 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 40 

# 8171b AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 81721 Load32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 40 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 81724 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81727 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 8172a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81730 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 81733 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 81739 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 8173d LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81740 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81743 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 81744 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 81748 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81749 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 8174c Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 8174d Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81750 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 81753 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 81759 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8175c Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 8175f AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 81765 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 81768 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 8176b AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81771 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 81774 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81775 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 40 

# 81778 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 8177e LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 81784 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 3c 40 

# 81787 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 81788 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 8178b AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81791 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 61 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 81794 Store8 [Register(0x61), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 61 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 81797 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 9b 17 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8179b JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_7_39 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Number(0n99/0x63u8)
# 8179f LoadImm8 [Register(0x45), Constant8(0x63=99)]
#       t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
#       Number(0n99/0x63u8)
04 45 63 

# if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# 817a2 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
15 44 45 

# 817a5 JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
72 ad 17 08 

# 817a9 JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
70 da 17 08 

# :RpnCalc_handle_if_true_8_40 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 817ad Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 817b0 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 40 

# 817b3 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 40 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 817b9 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 817bf Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 3c 40 

# 817c2 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 817c3 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 817c6 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 817cc LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 38 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 817d2 Store32_1 [Register(0x38), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 38 3c 

# 817d5 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 817d6 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_8_41 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Number(0n100/0x64u8)
# 817da LoadImm8 [Register(0x45), Constant8(0x64=100)]
#       tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
#       Number(0n100/0x64u8)
04 45 64 

# if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# 817dd Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
15 44 45 

# 817e0 JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
72 e8 17 08 

# 817e4 JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
70 82 19 08 

# :RpnCalc_handle_if_true_9_42 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 817e8 LoadImm8 [Register(0x45), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 45 00 

# :RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 817eb Copy8 [Register(0x59), Register(0x58)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 59 58 

# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 817ee Cmp8 [Register(0x58), Register(0x45)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 58 45 

# 817f1 JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 7e 19 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 817f5 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 817f8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 817fe StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 08 18 08 00 

# 81804 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 5a 2d 08 

# 81808 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 8180e LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 81811 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 81813 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 81819 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8181c LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 44 00 

# if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 8181f Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 60 44 

# 81822 JzImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 46 18 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_23_putc_if_true_0_1
# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 81826 LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 81829 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 8182c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 81832 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 3c 18 08 00 

# 81838 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 8183c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 81842 JmpImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 46 18 08 

# :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_end_0
# :inline_RpnCalc_handle_putc_23_function_end_putc None
# inline_RpnCalc_handle_putc_23_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# 81846 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
20 3c 00 00 00 00 

# 8184c Copy8 [Register(0x45), Register(0x3c)]
#       t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
0b 45 3c 

# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# 8184f Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
21 40 5c 

# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
# 81852 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 81858 Mul8_16 [Register(0x3c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
11 3c 00 3c 

# 8185c LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3e 00 

# 8185f LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3f 00 

# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# 81862 ClearCarry []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
03 

# 81863 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
30 5c 3c 3c 

# 81867 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 81868 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 3c 3c 

# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# :inline_RpnCalc_handle_stack_get_48_function_end_stack_get None
# inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# 8186b Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
21 3c 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 8186e Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6b 

# 81870 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6a 

# 81872 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 69 

# 81874 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 68 

# 81876 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 64 

# 81878 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 63 

# 8187a Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 62 

# 8187c Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 61 

# 8187e Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 60 

# 81880 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5f 

# 81882 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5e 

# 81884 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5d 

# 81886 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5c 

# 81888 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 59 

# 8188a Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 58 

# 8188c Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 57 

# 8188e Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 56 

# 81890 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 55 

# 81892 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 54 

# 81894 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 53 

# 81896 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 52 

# 81898 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 51 

# 8189a Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 50 

# 8189c Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4f 

# 8189e Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4e 

# 818a0 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4d 

# 818a2 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4c 

# 818a4 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4b 

# 818a6 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4a 

# 818a8 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 49 

# 818aa Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 48 

# 818ac Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 45 

# 818ae Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 44 

# 818b0 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 43 

# 818b2 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 42 

# 818b4 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 41 

# 818b6 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 40 

# 818b8 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3f 

# 818ba Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3e 

# 818bc Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3d 

# 818be Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3c 

# 818c0 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3b 

# 818c2 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3a 

# 818c4 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 39 

# 818c6 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 38 

# 818c8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 818ce StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c d8 18 08 00 

# 818d4 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 63 2b 08 

# 818d8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 818de Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 38 

# 818e0 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 39 

# 818e2 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3a 

# 818e4 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3b 

# 818e6 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3c 

# 818e8 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3d 

# 818ea Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3e 

# 818ec Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3f 

# 818ee Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 40 

# 818f0 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 41 

# 818f2 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 42 

# 818f4 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 43 

# 818f6 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 44 

# 818f8 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 45 

# 818fa Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 48 

# 818fc Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 49 

# 818fe Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4a 

# 81900 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4b 

# 81902 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4c 

# 81904 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4d 

# 81906 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4e 

# 81908 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4f 

# 8190a Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 50 

# 8190c Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 51 

# 8190e Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 52 

# 81910 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 53 

# 81912 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 54 

# 81914 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 55 

# 81916 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 56 

# 81918 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 57 

# 8191a Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 58 

# 8191c Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 59 

# 8191e Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5c 

# 81920 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5d 

# 81922 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5e 

# 81924 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5f 

# 81926 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 60 

# 81928 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 61 

# 8192a Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 62 

# 8192c Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 63 

# 8192e Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 64 

# 81930 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 68 

# 81932 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 69 

# 81934 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6a 

# 81936 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 81938 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# 8193b LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8193e Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 81940 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 81946 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81949 LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 44 00 

# if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 8194c Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 60 44 

# 8194f JzImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 73 19 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_24_putc_if_true_0_1
# inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# 81953 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 81956 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_24_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 81959 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8195f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 69 19 08 00 

# 81965 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 81969 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 8196f JmpImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 73 19 08 

# :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_end_0
# :inline_RpnCalc_handle_putc_24_function_end_putc None
# inline_RpnCalc_handle_putc_24_function_end_putc
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 81973 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 81976 Add8NoCarryIn [Register(0x45), Register(0x00), Register(0x45)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 45 00 45 

# goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8197a JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 eb 17 08 

# :RpnCalc_handle_while_end_46 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8197e JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_9_43 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Number(0n57/0x39u8)
# 81982 LoadImm8 [Register(0x45), Constant8(0x39=57)]
#       teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
#       Number(0n57/0x39u8)
04 45 39 

# if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# 81985 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
15 44 45 

# 81988 JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
71 90 19 08 

# 8198c JmpImm [Label24(RpnCalc_handle_if_else_10_48)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
70 24 1a 08 

# :RpnCalc_handle_if_true_10_47 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Number(0n48/0x30u8)
# 81990 LoadImm8 [Register(0x45), Constant8(0x30=48)]
#       tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
#       Number(0n48/0x30u8)
04 45 30 

# if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# 81993 Cmp8 [Register(0x45), Register(0x44)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
15 45 44 

# 81996 JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
71 9e 19 08 

# 8199a JmpImm [Label24(RpnCalc_handle_if_else_0_51)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
70 20 1a 08 

# :RpnCalc_handle_if_true_0_50 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 8199e Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 819a1 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 38 48 00 00 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 819a7 LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 58 01 

# mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# 819aa Store8 [Register(0x58), Register(0x38)]
#       mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
06 58 38 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 819ad Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 819b0 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 819b3 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 819b9 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 819bc Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 819bf AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 819c5 Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 48 3c 

# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 819c8 Copy32 [Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 3c 38 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 819cb ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 819cc AddCarry32_1 [Register(0x38), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 38 

# 819d0 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 819d1 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 819d2 AddCarry32_1 [Register(0x38), Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 3c 

# 819d6 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 819d7 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 819d8 AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 3c 3c 3c 

# 819dc AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 819dd ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 819de AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 3c 38 38 

# 819e2 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 None
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 819e3 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 38 48 

# 819e6 Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 819e7 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 819ea Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 819ed AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 819f3 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 819f6 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 819f9 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# 819ff Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
22 48 3c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) })\nCast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# 81a02 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
04 00 d0 

# 81a05 Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x45)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
14 44 00 45 

# tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# 81a09 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
20 38 00 00 00 00 

# 81a0f Copy8 [Register(0x45), Register(0x38)]
#       tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
0b 45 38 

# tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# 81a12 ClearCarry []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
03 

# 81a13 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
30 3c 38 38 

# 81a17 AddCarry32_2 []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
31 

# mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# 81a18 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
23 38 48 

# 81a1b Store32_2 []
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
24 

# goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81a1c JmpImm [Label24(RpnCalc_handle_if_end_49)]
#       goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 20 1a 08 

# :RpnCalc_handle_if_else_0_51 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81a20 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 1a 08 

# :RpnCalc_handle_if_else_10_48 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_23
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 81a24 LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 58 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 81a27 Copy8 [Register(0x58), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 58 00 

# 81a2a JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 81a2c Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([108, 109, 110, 111])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([116, 117, 118, 119]) Number(0n987392/0x000f1100u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([112]) Number(0n0/0x00u8)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([124, 125, 126, 127]) Number(0n987648/0x000f1200u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([124, 125, 126, 127]) Number(0n987652/0x000f1204u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([129])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([124, 125, 126, 127]) Number(0n987392/0x000f1100u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([136, 137, 138, 139]) Number(0n987652/0x000f1204u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_t0 (static "keyboard_enable" addr) Reg(U32) Some([116, 117, 118, 119]) Number(0n987144/0x000f1008u32)
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([120]) Number(0n0/0x00u8)
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_te3c4 (te3c4 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([112])
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([112])
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([120]) Number(0n0/0x00u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([112])
# 81a31 Copy32 [Register(0x00), Register(0x6c)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [108, 109, 110, 111].
21 00 6c 

# :RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81a34 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81a37 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# 81a3a Cmp8 [Register(0x78), Register(0x78)]
#       if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
15 78 78 

# 81a3d JzImm [Label24(RpnCalc_run_while_body_1)]
#       if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
72 45 1a 08 

# 81a41 JmpImm [Label24(RpnCalc_run_while_end_2)]
#       if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
70 d0 1b 08 

# :RpnCalc_run_while_body_1 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81a45 LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 70 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81a48 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# 81a4b Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
15 70 78 

# 81a4e JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
72 56 1a 08 

# 81a52 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
70 3b 1b 08 

# :inline_RpnCalc_run_getchar_39_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 81a56 IoReadyToRead [Register(0x70)]
#       ReadyToRead
79 70 

# inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# 81a58 AndImm8 [Register(0x70), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
18 70 01 

# inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81a5b LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# 81a5e Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
15 70 78 

# 81a61 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
72 a5 1a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 81a65 In0 [Register(0x70)]
#       inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 70 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# 81a67 LoadImm32 [Register(0x7c), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
20 7c 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# 81a6d LoadImm32 [Register(0x88), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
20 88 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 81a73 Load8 [Register(0x88), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 88 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 81a76 LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 84 00 00 00 00 

# 81a7c Copy8 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 80 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 81a7f ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 81a80 AddCarry32_1 [Register(0x7c), Register(0x84), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 7c 84 7c 

# 81a84 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 81a85 Store8 [Register(0x70), Register(0x7c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 70 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# 81a88 LoadImm32 [Register(0x88), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
20 88 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# 81a8e LoadImm32 [Register(0x88), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
20 88 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 81a94 Load8 [Register(0x88), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 88 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 81a97 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 81a9a Add8NoCarryIn [Register(0x80), Register(0x00), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 80 00 70 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 81a9e Store8 [Register(0x70), Register(0x88)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 70 88 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81aa1 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 d2 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 81aa5 LoadImm32 [Register(0x74), Constant32(0x000f1008=987144)]
#       inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
20 74 08 10 0f 00 

# inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 81aab Load8 [Register(0x74), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
05 74 70 

# inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81aae LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# 81ab1 Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
15 70 78 

# 81ab4 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_1_7)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
72 d2 1a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_1_6)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52}
# Registers to save: []
# 81ab8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 81abe StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c c8 1a 08 00 

# 81ac4 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 46 08 08 

# 81ac8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81ace JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 d2 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_1_7
# :inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# 81ad2 LoadImm32 [Register(0x74), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
20 74 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 81ad8 LoadImm32 [Register(0x7c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 7c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 81ade Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# 81ae1 LoadImm32 [Register(0x7c), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
20 7c 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 81ae7 Load8 [Register(0x7c), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 7c 78 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 81aea Cmp8 [Register(0x80), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 80 78 

# 81aed JzImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 f5 1a 08 

# 81af1 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 00 1b 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 81af5 LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 70 00 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(0n0/0x00u8)) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 81af8 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 37 1b 08 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 81afc JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 00 1b 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 81b00 LoadImm32 [Register(0x7c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 7c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 81b06 Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 81b09 LoadImm32 [Register(0x7c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 7c 00 00 00 00 

# 81b0f Copy8 [Register(0x80), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 80 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# 81b12 ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
03 

# 81b13 AddCarry32_1 [Register(0x74), Register(0x7c), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
30 74 7c 74 

# 81b17 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
31 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 81b18 Load8 [Register(0x74), Register(0x81)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 74 81 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 81b1b LoadImm32 [Register(0x7c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 7c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 81b21 LoadImm32 [Register(0x7c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 7c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# 81b27 Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 81b2a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 81b2d Add8NoCarryIn [Register(0x80), Register(0x00), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 80 00 70 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# 81b31 Store8 [Register(0x70), Register(0x7c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
06 70 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 81b34 Copy8 [Register(0x81), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 81 70 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81b37 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 48 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# :inline_RpnCalc_run_getchar_39_function_end_getchar None
# inline_RpnCalc_run_getchar_39_function_end_getchar
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 81b3b Copy32 [Register(0x6c), Register(0x00)]
#       Arg0[c]=calc Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 6c 00 

# 81b3e Copy8 [Register(0x70), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 70 04 

# Registers used by this function: {108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138]
# 81b41 Push8 [Register(0x8a)]
#       Saving reg0x8a before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8a 

# 81b43 Push8 [Register(0x89)]
#       Saving reg0x89 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 89 

# 81b45 Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 

# 81b47 Push8 [Register(0x87)]
#       Saving reg0x87 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 87 

# 81b49 Push8 [Register(0x86)]
#       Saving reg0x86 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 86 

# 81b4b Push8 [Register(0x85)]
#       Saving reg0x85 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 85 

# 81b4d Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 

# 81b4f Push8 [Register(0x81)]
#       Saving reg0x81 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 81 

# 81b51 Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 

# 81b53 Push8 [Register(0x7e)]
#       Saving reg0x7e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7e 

# 81b55 Push8 [Register(0x7d)]
#       Saving reg0x7d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7d 

# 81b57 Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 

# 81b59 Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 

# 81b5b Push8 [Register(0x77)]
#       Saving reg0x77 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 77 

# 81b5d Push8 [Register(0x76)]
#       Saving reg0x76 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 76 

# 81b5f Push8 [Register(0x75)]
#       Saving reg0x75 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 75 

# 81b61 Push8 [Register(0x74)]
#       Saving reg0x74 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 74 

# 81b63 Push8 [Register(0x70)]
#       Saving reg0x70 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 70 

# 81b65 Push8 [Register(0x6f)]
#       Saving reg0x6f before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6f 

# 81b67 Push8 [Register(0x6e)]
#       Saving reg0x6e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6e 

# 81b69 Push8 [Register(0x6d)]
#       Saving reg0x6d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6d 

# 81b6b Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6c 

# 81b6d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 

# 81b73 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c 7d 1b 08 00 

# 81b79 JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 a4 09 08 

# 81b7d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 

# 81b83 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6c 

# 81b85 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6d 

# 81b87 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6e 

# 81b89 Pop8 [Register(0x6f)]
#       Restoring reg0x6f after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6f 

# 81b8b Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 70 

# 81b8d Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 74 

# 81b8f Pop8 [Register(0x75)]
#       Restoring reg0x75 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 75 

# 81b91 Pop8 [Register(0x76)]
#       Restoring reg0x76 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 76 

# 81b93 Pop8 [Register(0x77)]
#       Restoring reg0x77 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 77 

# 81b95 Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 

# 81b97 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 

# 81b99 Pop8 [Register(0x7d)]
#       Restoring reg0x7d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7d 

# 81b9b Pop8 [Register(0x7e)]
#       Restoring reg0x7e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7e 

# 81b9d Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 

# 81b9f Pop8 [Register(0x81)]
#       Restoring reg0x81 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 81 

# 81ba1 Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 

# 81ba3 Pop8 [Register(0x85)]
#       Restoring reg0x85 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 85 

# 81ba5 Pop8 [Register(0x86)]
#       Restoring reg0x86 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 86 

# 81ba7 Pop8 [Register(0x87)]
#       Restoring reg0x87 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 87 

# 81ba9 Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 

# 81bab Pop8 [Register(0x89)]
#       Restoring reg0x89 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 89 

# 81bad Pop8 [Register(0x8a)]
#       Restoring reg0x8a after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8a 

# 81baf Copy8 [Register(0x00), Register(0x70)]
#       Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 70 

# t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81bb2 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# 81bb5 Cmp8 [Register(0x70), Register(0x78)]
#       if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
15 70 78 

# 81bb8 JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
72 c0 1b 08 

# 81bbc JmpImm [Label24(RpnCalc_run_if_else_0_5)]
#       if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
70 cc 1b 08 

# :RpnCalc_run_if_true_0_4 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 81bc0 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 78 00 

# return Some(ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 81bc3 Copy8 [Register(0x78), Register(0x00)]
#       return Some(ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 78 00 

# 81bc6 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81bc8 JmpImm [Label24(RpnCalc_run_if_end_3)]
#       goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 cc 1b 08 

# :RpnCalc_run_if_else_0_5 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81bcc JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 34 1a 08 

# :RpnCalc_run_while_end_2 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run None
# function_end_RpnCalc_run
# Unreachable None
# 81bd0 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([140, 141, 142, 143]) Number(0n0/0x00000000u32)
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([144, 145, 146, 147])
# Var x (Arg0 x Number(U32)) Reg(U32) Some([144, 145, 146, 147])
# 81bd5 Copy32 [Register(0x00), Register(0x90)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [144, 145, 146, 147].
21 00 90 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81bd8 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 8c 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# 81bde Cmp8 [Register(0x93), Register(0x8f)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
15 93 8f 

# 81be1 Cmp8IfZero [Register(0x92), Register(0x8e)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 92 8e 

# 81be4 Cmp8IfZero [Register(0x91), Register(0x8d)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 91 8d 

# 81be7 Cmp8IfZero [Register(0x90), Register(0x8c)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 90 8c 

# 81bea JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
72 f8 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }\nArithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# 81bee AddImm32IgnoreCarry [Register(0x90), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
32 90 ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 81bf4 JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 d8 1b 08 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 81bf8 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 81bfa Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_a (Arg0 a Number(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_b (Arg1 b Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([177])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([177])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([178]) Number(0n0/0x00u8)
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_r (Local r Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([196])
# Var inline_div32_div16_43_t4299 (t4299 Index("x", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_t5be0 (t5be0 Index("b", Number(0n0/0x00u8))) Reg(U8) Some([197])
# Var inline_div32_div16_43_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([148, 149, 150, 151]) Number(0n0/0x00000000u32)
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([156, 157, 158, 159]) Number(0n256/0x00000100u32)
# Var inline_div32_div16_43_ta670 (ta670 Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))) Reg(U8) Some([196])
# Var inline_div32_div16_43_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([184]) Number(0n0/0x00u8)
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tb0ef (tb0ef Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_tcd34 (tcd34 Index("x", Number(0n2/0x02u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_x (Local x Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_44_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_44_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_44_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_44_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_45_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_45_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_45_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_45_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_45_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_45_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var r (Local r Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([160, 161, 162, 163])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([164, 165, 166, 167])
# Var t4917 (t4917 Number(0n65536/0x00010000u32)) Reg(U32) Some([156, 157, 158, 159]) Number(0n65536/0x00010000u32)
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([156, 157, 158, 159])
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([164, 165, 166, 167]) Number(0n0/0x00000000u32)
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([180, 181, 182, 183])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([164, 165, 166, 167])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([164, 165, 166, 167])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([164, 165, 166, 167])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([168, 169, 170, 171])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([200, 201, 202, 203])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([148, 149, 150, 151])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([200, 201, 202, 203])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var x (Local x Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# 81bff AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 81c05 Copy32 [Register(0x00), Register(0x94)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [148, 149, 150, 151].
21 00 94 

# 81c08 Copy32 [Register(0x04), Register(0x98)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [152, 153, 154, 155].
21 04 98 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 81c0b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81c11 Cmp8 [Register(0x9b), Register(0x97)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9b 97 

# 81c14 Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9a 96 

# 81c17 Cmp8IfZero [Register(0x99), Register(0x95)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 99 95 

# 81c1a Cmp8IfZero [Register(0x98), Register(0x94)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 98 94 

# 81c1d JcImm [Label24(div32_if_else_0_2)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 3c 1c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# div32_if_true_0_1
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# 81c21 LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
20 a4 00 00 00 00 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81c27 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
32 0c 08 00 00 00 

# return Some(t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81c2d Copy32 [Register(0xa4), Register(0x00)]
#       return Some(t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
21 a4 00 

# 81c30 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81c36 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# 81c38 JmpImm [Label24(div32_if_end_0)]
#       goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
70 3c 1c 08 

# :div32_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_else_0_2
# :div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Number(0n65536/0x00010000u32)
# 81c3c LoadImm32 [Register(0x9c), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
#       Number(0n65536/0x00010000u32)
20 9c 00 00 01 00 

# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# 81c42 Cmp8 [Register(0x9f), Register(0x97)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
15 9f 97 

# 81c45 Cmp8IfZero [Register(0x9e), Register(0x96)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9e 96 

# 81c48 Cmp8IfZero [Register(0x9d), Register(0x95)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9d 95 

# 81c4b Cmp8IfZero [Register(0x9c), Register(0x94)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9c 94 

# 81c4e JcImm [Label24(div32_if_else_0_5)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
71 f8 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81c52 Cmp8 [Register(0x9b), Register(0x97)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9b 97 

# 81c55 Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9a 96 

# 81c58 Cmp8IfZero [Register(0x99), Register(0x95)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 99 95 

# 81c5b Cmp8IfZero [Register(0x98), Register(0x94)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 98 94 

# 81c5e JcImm [Label24(inline_div32_div16_43_div16_if_else_0_2)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 70 1c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# 81c62 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
20 94 00 00 00 00 

# te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nReturn { value: Some(Number(0n0/0x00000000u32)) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81c68 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
70 e3 1e 08 

# goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# 81c6c JmpImm [Label24(inline_div32_div16_43_div16_if_end_0)]
#       goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
70 70 1c 08 

# :inline_div32_div16_43_div16_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_else_0_2
# :inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 81c70 LoadImm32 [Register(0x9c), Constant32(0x00000100=256)]
#       inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 9c 00 01 00 00 

# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 81c76 Cmp8 [Register(0x9f), Register(0x97)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 9f 97 

# 81c79 Cmp8IfZero [Register(0x9e), Register(0x96)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9e 96 

# 81c7c Cmp8IfZero [Register(0x9d), Register(0x95)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9d 95 

# 81c7f Cmp8IfZero [Register(0x9c), Register(0x94)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9c 94 

# 81c82 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_5)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 a1 1c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("a", Number(0n0/0x00u8))
# 81c86 Copy8 [Register(0x94), Register(0xc4)]
#       inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("a", Number(0n0/0x00u8))
0b 94 c4 

# inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("b", Number(0n0/0x00u8))
# 81c89 Copy8 [Register(0x98), Register(0xc5)]
#       inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("b", Number(0n0/0x00u8))
0b 98 c5 

# inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# 81c8c Divide8 [Register(0xc4), Register(0xc5), Register(0xc4)]
#       inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
17 c4 c5 c4 

# inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# 81c90 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
20 94 00 00 00 00 

# 81c96 Copy8 [Register(0xc4), Register(0x94)]
#       inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
0b c4 94 

# te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# 81c99 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
70 e3 1e 08 

# goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# 81c9d JmpImm [Label24(inline_div32_div16_43_div16_if_end_3)]
#       goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
70 a1 1c 08 

# :inline_div32_div16_43_div16_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_else_0_5
# :inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81ca1 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 bc 00 00 00 00 

# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
# Number(0n65535/0x0000ffffu32)
# 81ca7 LoadImm32 [Register(0x9c), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
#       Number(0n65535/0x0000ffffu32)
20 9c ff ff 00 00 

# :inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81cad Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 bc a0 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81cb0 Cmp8 [Register(0x9f), Register(0xa3)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 9f a3 

# 81cb3 Cmp8IfZero [Register(0x9e), Register(0xa2)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9e a2 

# 81cb6 Cmp8IfZero [Register(0x9d), Register(0xa1)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9d a1 

# 81cb9 Cmp8IfZero [Register(0x9c), Register(0xa0)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9c a0 

# 81cbc JcImm [Label24(inline_div32_div16_43_div16_while_end_8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 dd 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 81cc0 Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 bc a0 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 81cc3 ClearCarry []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 

# 81cc4 AddCarry32_1 [Register(0xa0), Register(0x9c), Register(0xa0)]
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 a0 9c a0 

# 81cc8 AddCarry32_2 []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 

# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81cc9 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81ccc LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81ccf Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81cd4 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81cd7 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81cda LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81cdd Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81ce2 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81ce5 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81ce8 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81ceb Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81cf0 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81cf3 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81cf6 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81cf9 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81cfe Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81d01 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81d04 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81d07 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81d0a Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 81d0d Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 81d10 Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 81d13 AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 81d16 Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 81d1a Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 81d1d Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 81d20 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81d23 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 81d26 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 81d29 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 81d2c Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 81d2f Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 81d32 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 81d35 Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 81d39 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 81d3c Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 81d3f Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 81d42 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 81d45 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 81d48 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 81d4b Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 81d4e Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 81d51 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 81d54 Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 81d58 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 81d5b Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 81d5e Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81d61 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 81d64 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81d67 Copy32 [Register(0xa0), Register(0xc0)]
#       inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a0 c0 

# :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 None
# inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 81d6a Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 81d6d Copy32 [Register(0x98), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 98 a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 81d70 Mul8_16 [Register(0xa0), Register(0xa4), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 a0 a4 a8 

# 81d74 LoadImm8 [Register(0xaa), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 aa 00 

# 81d77 LoadImm8 [Register(0xab), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 ab 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81d7a Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81d7d LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 b4 00 00 00 00 

# 81d83 Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81d86 Copy8 [Register(0xa5), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b a5 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81d89 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 ac 00 00 00 00 

# 81d8f Copy8 [Register(0xb8), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b b8 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81d92 Mul8_16 [Register(0xb4), Register(0xac), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 b4 ac ac 

# 81d96 LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 ae 00 

# 81d99 LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 81d9c Copy8 [Register(0xad), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b ad b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 81d9f Copy8 [Register(0xb1), Register(0xaf)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b b1 af 

# inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 81da2 Copy8 [Register(0xac), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b ac b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 81da5 Copy8 [Register(0xb1), Register(0xae)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b b1 ae 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81da8 LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b2 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81dab Copy8 [Register(0xb2), Register(0xad)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ad 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81dae LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b2 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81db1 Copy8 [Register(0xb2), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 81db4 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 81db5 AddCarry32_1 [Register(0xa8), Register(0xac), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 a8 ac a8 

# 81db9 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81dba Copy8 [Register(0xa5), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b a5 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81dbd LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 ac 00 00 00 00 

# 81dc3 Copy8 [Register(0xb8), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b b8 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81dc6 Mul8_16 [Register(0xa0), Register(0xac), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 a0 ac ac 

# 81dca LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 ae 00 

# 81dcd LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81dd0 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81dd3 LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 b4 00 00 00 00 

# 81dd9 Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 81ddc Mul8_16 [Register(0xb4), Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 b4 a4 a0 

# 81de0 LoadImm8 [Register(0xa2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 a2 00 

# 81de3 LoadImm8 [Register(0xa3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 a3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81de6 Copy32 [Register(0xac), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 ac a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81de9 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81dea AddCarry32_1 [Register(0xa4), Register(0xa0), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 a4 a0 ac 

# 81dee AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 81def Copy8 [Register(0xae), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b ae b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 81df2 Copy8 [Register(0xb0), Register(0xaf)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b b0 af 

# inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 81df5 Copy8 [Register(0xad), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b ad b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 81df8 Copy8 [Register(0xb0), Register(0xae)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b b0 ae 

# inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 81dfb Copy8 [Register(0xac), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b ac b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 81dfe Copy8 [Register(0xb0), Register(0xad)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b b0 ad 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81e01 LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b2 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81e04 Copy8 [Register(0xb2), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81e07 Copy32 [Register(0xac), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 ac a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81e0a ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 81e0b AddCarry32_1 [Register(0xa8), Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 a8 a4 a0 

# 81e0f AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 None
# inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n2/0x02u8))
# 81e10 Copy8 [Register(0xa2), Register(0xb0)]
#       inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n2/0x02u8))
0b a2 b0 

# inline_div32_div16_43_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81e13 LoadImm8 [Register(0xb8), Constant8(0x00=0)]
#       inline_div32_div16_43_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b8 00 

# if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# 81e16 Cmp8 [Register(0xb0), Register(0xb8)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
15 b0 b8 

# 81e19 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_11)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
71 31 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81e1d Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81e20 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 81e23 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81e29 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 ad 1c 08 

# goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e2d JmpImm [Label24(inline_div32_div16_43_div16_if_end_9)]
#       goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
70 31 1e 08 

# :inline_div32_div16_43_div16_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_11
# :inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n3/0x03u8))
# 81e31 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81e34 LoadImm8 [Register(0xb8), Constant8(0x00=0)]
#       inline_div32_div16_43_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b8 00 

# if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# 81e37 Cmp8 [Register(0xb0), Register(0xb8)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
15 b0 b8 

# 81e3a JcImm [Label24(inline_div32_div16_43_div16_if_else_0_14)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
71 52 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81e3e Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81e41 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 81e44 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81e4a JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 ad 1c 08 

# goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e4e JmpImm [Label24(inline_div32_div16_43_div16_if_end_12)]
#       goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
70 52 1e 08 

# :inline_div32_div16_43_div16_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_14
# :inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 81e52 Cmp8 [Register(0xa3), Register(0x97)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 81e55 Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 81e58 Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 81e5b Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 81e5e JcImm [Label24(inline_div32_div16_43_div16_if_else_0_17)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 76 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81e62 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81e65 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 81e68 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81e6e JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 ad 1c 08 

# goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e72 JmpImm [Label24(inline_div32_div16_43_div16_if_end_15)]
#       goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
70 76 1e 08 

# :inline_div32_div16_43_div16_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_17
# :inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 81e76 Cmp8 [Register(0xa3), Register(0x97)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 81e79 Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 81e7c Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 81e7f Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 81e82 JzImm [Label24(inline_div32_div16_43_div16_if_true_0_19)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 8a 1e 08 

# 81e86 JmpImm [Label24(inline_div32_div16_43_div16_if_else_0_20)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 98 1e 08 

# :inline_div32_div16_43_div16_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81e8a Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c0 a0 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81e8d Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81e90 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 e3 1e 08 

# goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e94 JmpImm [Label24(inline_div32_div16_43_div16_if_end_18)]
#       goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
70 98 1e 08 

# :inline_div32_div16_43_div16_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_20
# :inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 81e98 Copy32 [Register(0xa0), Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a0 00 

# 81e9b Invert8 [Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 81e9d Invert8 [Register(0x01)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 81e9f Invert8 [Register(0x02)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 81ea1 Invert8 [Register(0x03)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 81ea3 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 81ea9 ClearCarry []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 81eaa AddCarry32_1 [Register(0x94), Register(0x00), Register(0xa0)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 94 00 a0 

# 81eae AddCarry32_2 []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 81eaf Cmp8 [Register(0x9b), Register(0xa3)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9b a3 

# 81eb2 Cmp8IfZero [Register(0x9a), Register(0xa2)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9a a2 

# 81eb5 Cmp8IfZero [Register(0x99), Register(0xa1)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 99 a1 

# 81eb8 Cmp8IfZero [Register(0x98), Register(0xa0)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 98 a0 

# 81ebb JcImm [Label24(inline_div32_div16_43_div16_if_else_0_23)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 cd 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81ebf Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c0 a0 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81ec2 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81ec5 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 e3 1e 08 

# goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81ec9 JmpImm [Label24(inline_div32_div16_43_div16_if_end_21)]
#       goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
70 cd 1e 08 

# :inline_div32_div16_43_div16_if_else_0_23 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_23
# :inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81ecd Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 81ed0 Copy32 [Register(0xa0), Register(0xbc)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a0 bc 

# 81ed3 AddImm32IgnoreCarry [Register(0xbc), Constant32(0x00000001=1)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 bc 01 00 00 00 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81ed9 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
70 ad 1c 08 

# :inline_div32_div16_43_div16_while_end_8 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 81edd Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 bc a0 

# te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 81ee0 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 a0 94 

# :inline_div32_div16_43_function_end_div16 None
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81ee3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 

# return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81ee9 Copy32 [Register(0x94), Register(0x00)]
#       return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 94 00 

# 81eec AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81ef2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# 81ef4 JmpImm [Label24(div32_if_end_3)]
#       goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
70 f8 1e 08 

# :div32_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_else_0_5
# :div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81ef8 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 ac 00 00 00 00 

# hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
# Number(0xffffffffu32)
# 81efe LoadImm32 [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
#       Number(0xffffffffu32)
20 9c ff ff ff ff 

# :div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81f04 Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 ac a0 

# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81f07 Cmp8 [Register(0x9f), Register(0xa3)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 9f a3 

# 81f0a Cmp8IfZero [Register(0x9e), Register(0xa2)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9e a2 

# 81f0d Cmp8IfZero [Register(0x9d), Register(0xa1)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9d a1 

# 81f10 Cmp8IfZero [Register(0x9c), Register(0xa0)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9c a0 

# 81f13 JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 56 21 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 81f17 Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 ac a0 

# inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81f1a Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81f1d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81f20 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81f25 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81f28 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81f2b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81f2e Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81f33 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81f36 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81f39 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81f3c Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81f41 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81f44 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81f47 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81f4a Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81f4f Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81f52 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81f55 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81f58 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81f5b Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 81f5e Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 81f61 Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 81f64 AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 81f67 Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 81f6b Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 81f6e Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 81f71 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81f74 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 81f77 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 81f7a Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 81f7d Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 81f80 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 81f83 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 81f86 Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 81f8a Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 81f8d Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 81f90 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 81f93 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 81f96 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 81f99 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 81f9c Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 81f9f Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 81fa2 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 81fa5 Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 81fa9 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 81fac Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 81faf Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81fb2 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 81fb5 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81fb8 Copy32 [Register(0xa0), Register(0xb4)]
#       t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a0 b4 

# :inline_div32_shiftright1_44_function_end_shiftright1 None
# inline_div32_shiftright1_44_function_end_shiftright1
# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 81fbb Copy32 [Register(0x9c), Register(0xa0)]
#       inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 9c a0 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81fbe Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81fc1 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81fc4 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81fc9 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81fcc Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81fcf LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81fd2 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81fd7 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81fda Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81fdd LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81fe0 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81fe5 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81fe8 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81feb LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81fee Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81ff3 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81ff6 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81ff9 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81ffc Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81fff Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 82002 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 82005 Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 82008 AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 8200b Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 8200f Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 82012 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 82015 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 82018 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 8201b Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 8201e Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 82021 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 82024 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 82027 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 8202a Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 8202e Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 82031 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 82034 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 82037 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 8203a Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 8203d Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 82040 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 82043 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 82046 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 82049 Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 8204d Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 82050 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 82053 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 82056 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 82059 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# :inline_div32_shiftright1_45_function_end_shiftright1 None
# inline_div32_shiftright1_45_function_end_shiftright1
# mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 8205c ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 

# 8205d AddCarry32_1 [Register(0xb4), Register(0xa0), Register(0xa0)]
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 b4 a0 a0 

# 82061 AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 

# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 82062 Copy32 [Register(0x0c), Register(0xc8)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c c8 

# tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# 82065 Copy32 [Register(0xc8), Register(0xa4)]
#       tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
21 c8 a4 

# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 82068 Copy32 [Register(0xa0), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a0 00 

# 8206b Copy32 [Register(0x98), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 98 04 

# 8206e Copy32 [Register(0xa4), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a4 08 

# Registers used by this function: {148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}
# Registers to save: []
# 82071 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 82077 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 81 20 08 00 

# 8207d JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 e3 26 08 

# 82081 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 82087 Copy32 [Register(0x0c), Register(0xc8)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c c8 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 8208a Copy32 [Register(0xc8), Register(0xa4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 c8 a4 

# 8208d AddImm32IgnoreCarry [Register(0xa4), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 a4 04 00 00 00 

# tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# 82093 Load32 [Register(0xa4), Register(0xa8)]
#       tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
22 a4 a8 

# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 82096 LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 a4 00 00 00 00 

# if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# 8209c Cmp8 [Register(0xab), Register(0xa7)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
15 ab a7 

# 8209f Cmp8IfZero [Register(0xaa), Register(0xa6)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
16 aa a6 

# 820a2 Cmp8IfZero [Register(0xa9), Register(0xa5)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
16 a9 a5 

# 820a5 Cmp8IfZero [Register(0xa8), Register(0xa4)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
16 a8 a4 

# 820a8 JcImm [Label24(div32_if_else_0_11)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
71 bd 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 820ac Copy32 [Register(0xa0), Register(0x9c)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 820af AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 820b5 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 04 1f 08 

# goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# 820b9 JmpImm [Label24(div32_if_end_9)]
#       goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
70 bd 20 08 

# :div32_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_11
# :div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 820bd Copy32 [Register(0x0c), Register(0xc8)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c c8 

# x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 820c0 Load32 [Register(0xc8), Register(0xa4)]
#       x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 c8 a4 

# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 820c3 Cmp8 [Register(0xa7), Register(0x97)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a7 97 

# 820c6 Cmp8IfZero [Register(0xa6), Register(0x96)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a6 96 

# 820c9 Cmp8IfZero [Register(0xa5), Register(0x95)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a5 95 

# 820cc Cmp8IfZero [Register(0xa4), Register(0x94)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a4 94 

# 820cf JcImm [Label24(div32_if_else_0_14)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 e4 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 820d3 Copy32 [Register(0xa0), Register(0x9c)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 820d6 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 820dc JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 04 1f 08 

# goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# 820e0 JmpImm [Label24(div32_if_end_12)]
#       goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
70 e4 20 08 

# :div32_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_14
# :div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 820e4 Cmp8 [Register(0xa7), Register(0x97)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a7 97 

# 820e7 Cmp8IfZero [Register(0xa6), Register(0x96)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a6 96 

# 820ea Cmp8IfZero [Register(0xa5), Register(0x95)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a5 95 

# 820ed Cmp8IfZero [Register(0xa4), Register(0x94)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a4 94 

# 820f0 JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 f8 20 08 

# 820f4 JmpImm [Label24(div32_if_else_0_17)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 0d 21 08 

# :div32_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 820f8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 820fe Copy32 [Register(0xa0), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a0 00 

# 82101 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 82107 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# 82109 JmpImm [Label24(div32_if_end_15)]
#       goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
70 0d 21 08 

# :div32_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_17
# :div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 8210d Copy32 [Register(0xa4), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a4 00 

# 82110 Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 82112 Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 82114 Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 82116 Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 82118 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 8211e ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 8211f AddCarry32_1 [Register(0x94), Register(0x00), Register(0xa4)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 94 00 a4 

# 82123 AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 82124 Cmp8 [Register(0x9b), Register(0xa7)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9b a7 

# 82127 Cmp8IfZero [Register(0x9a), Register(0xa6)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9a a6 

# 8212a Cmp8IfZero [Register(0x99), Register(0xa5)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 99 a5 

# 8212d Cmp8IfZero [Register(0x98), Register(0xa4)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 98 a4 

# 82130 JcImm [Label24(div32_if_else_0_20)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 49 21 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 82134 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 8213a Copy32 [Register(0xa0), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a0 00 

# 8213d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 82143 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# 82145 JmpImm [Label24(div32_if_end_18)]
#       goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
70 49 21 08 

# :div32_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_20
# :div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 82149 Copy32 [Register(0xa0), Register(0xac)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a0 ac 

# 8214c AddImm32IgnoreCarry [Register(0xac), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 ac 01 00 00 00 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# 82152 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
70 04 1f 08 

# :div32_while_end_8 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 82156 Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 ac a0 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 82159 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 

# return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 8215f Copy32 [Register(0xa0), Register(0x00)]
#       return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 a0 00 

# 82162 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 82168 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_div32 None
# function_end_div32
# Unreachable None
# 8216a Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([206])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) Reg(U32) Some([212, 213, 214, 215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }) Reg(U32) Some([212, 213, 214, 215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 (tf14 Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) Reg(U8) Some([220])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([207])
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([207])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([207])
# Var t1730 (t1730 Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))) Reg(U8) Some([208])
# Var t2176 (t2176 Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))) Reg(U8) Some([208])
# Var t3e8f (t3e8f Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))) Reg(U8) Some([207])
# Var t4028 (t4028 Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))) Reg(U8) Some([207])
# Var t6611 (t6611 Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))) Reg(U8) Some([206])
# Var t791e (t791e Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))) Reg(U8) Some([207])
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([224, 225, 226, 227]) Number(0n2/0x00000002u32)
# Var tb5dc (tb5dc Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))) Reg(U8) Some([206])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([206])
# 8216f Copy8 [Register(0x00), Register(0xcf)]
#       Save function parameter 'i' registers [0] to locals [207].
0b 00 cf 

# 82172 Copy8 [Register(0x04), Register(0xce)]
#       Save function parameter 'ch' registers [4] to locals [206].
0b 04 ce 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))\nAssign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# 82175 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 82178 Divide8 [Register(0xcf), Register(0x00), Register(0xd0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
17 cf 00 d0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nArithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# 8217c LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
04 00 14 

# 8217f Mul8_8 [Register(0xd0), Register(0x00), Register(0xdc)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
10 d0 00 dc 

# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# 82183 Copy8 [Register(0xdc), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
0b dc 00 

# 82186 Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
02 00 

# 82188 Add8NoCarryIn [Register(0xcf), Register(0x00), Register(0xcf)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
14 cf 00 cf 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 8218c LoadImm32 [Register(0xd8), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 d8 23 08 08 00 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# 82192 LoadImm32 [Register(0xd4), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
20 d4 00 00 00 00 

# 82198 Copy8 [Register(0xd0), Register(0xd4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
0b d0 d4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# 8219b ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
03 

# 8219c AddCarry32_1 [Register(0xd8), Register(0xd4), Register(0xd4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
30 d8 d4 d4 

# 821a0 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 821a1 Load8 [Register(0xd4), Register(0xd0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 d4 d0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 821a4 Add8NoCarryIn [Register(0xd0), Register(0xcf), Register(0xcf)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 d0 cf cf 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# 821a8 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
04 00 04 

# 821ab Shift8 [Constant8(0x05=5), Register(0x00), Register(0xcf), Register(0xd0)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
1e 05 00 cf d0 

# t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# 821b0 OrImm8 [Register(0xd0), Constant8(0x08=8)]
#       t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
19 d0 08 

# None <= call io_write1(t2176,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# 821b3 Out1 [Register(0xd0)]
#       IoWrite1
69 d0 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] })\nArithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# 821b5 AndImm8 [Register(0xcf), Constant8(0x0f=15)]
#       t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
#       Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
18 cf 0f 

# None <= call io_write1(t791e,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# 821b8 Out1 [Register(0xcf)]
#       IoWrite1
69 cf 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 821ba LoadImm32 [Register(0xe0), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e0 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 821c0 Copy32 [Register(0xe0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e0 00 

# Registers used by this function: {206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 821c3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821c9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c d3 21 08 00 

# 821cf JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 821d3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xce), Register(0xce)], resolved: None }
# t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# 821d9 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
04 00 04 

# 821dc Shift8 [Constant8(0x05=5), Register(0x00), Register(0xce), Register(0xcf)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
1e 05 00 ce cf 

# t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# 821e1 OrImm8 [Register(0xcf), Constant8(0x80=128)]
#       t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
19 cf 80 

# None <= call io_write1(t3e8f,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# 821e4 Out1 [Register(0xcf)]
#       IoWrite1
69 cf 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))\nArithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xce), Register(0xce)], resolved: None }
# t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# 821e6 AndImm8 [Register(0xce), Constant8(0x0f=15)]
#       t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
#       Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
18 ce 0f 

# tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# 821e9 OrImm8 [Register(0xce), Constant8(0x80=128)]
#       tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
19 ce 80 

# None <= call io_write1(tb5dc,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# 821ec Out1 [Register(0xce)]
#       IoWrite1
69 ce 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 821ee LoadImm32 [Register(0xe0), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e0 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 821f4 Copy32 [Register(0xe0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e0 00 

# Registers used by this function: {206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 821f7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821fd StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 07 22 08 00 

# 82203 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 82207 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 8220d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 8220f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([228])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([232, 233, 234, 235]) Number(0n987145/0x000f1009u32)
# Var t385d (t385d Number(0n1/0x00000001u32)) Reg(U32) Some([232, 233, 234, 235]) Number(0n1/0x00000001u32)
# Var t3d69 (t3d69 Number(0n3/0x03u8)) Reg(U8) Some([228]) Number(0n3/0x03u8)
# Var t477 (t477 Number(0n8/0x08u8)) Reg(U8) Some([228]) Number(0n8/0x08u8)
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([232, 233, 234, 235]) Number(0n2/0x00000002u32)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([236, 237, 238, 239])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([236, 237, 238, 239])
# Var t9f48 (t9f48 Number(0n2/0x02u8)) Reg(U8) Some([228]) Number(0n2/0x02u8)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([228]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([240]) Number(0n0/0x00u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([228])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([240]) Number(0n80/0x50u8)
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([241]) Number(0n32/0x20u8)
# Var tec13 (tec13 Number(0n12/0x0cu8)) Reg(U8) Some([228]) Number(0n12/0x0cu8)
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 82214 LoadImm32 [Register(0xe8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
20 e8 09 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8221a LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 f0 00 

# mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 8221d Store8 [Register(0xf0), Register(0xe8)]
#       mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
06 f0 e8 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82220 LoadImm8 [Register(0xe4), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 e4 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 82223 LoadImm8 [Register(0xf0), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f0 50 

# if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 82226 Cmp8 [Register(0xf0), Register(0xe4)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 f0 e4 

# 82229 JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 4d 22 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 8222d LoadImm32 [Register(0xec), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 ec 00 00 00 00 

# 82233 Copy8 [Register(0xe4), Register(0xec)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b e4 ec 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 82236 AddImm32IgnoreCarry [Register(0xec), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 ec 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 8223c LoadImm8 [Register(0xf1), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 f1 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 8223f Store8 [Register(0xf1), Register(0xec)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 f1 ec 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 82242 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 82245 Add8NoCarryIn [Register(0xe4), Register(0x00), Register(0xe4)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 e4 00 e4 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 82249 JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
70 23 22 08 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# lcd_init_while_end_2
# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 8224d LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e4 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 82250 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 82252 LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 82258 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 8225b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82261 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 6b 22 08 00 

# 82267 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 8226b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 82271 LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(80,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e4 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 82274 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 82276 LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 8227c Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 8227f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82285 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 8f 22 08 00 

# 8228b JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 8228f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 82295 LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e4 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 82298 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 8229a LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 822a0 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 822a3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 822a9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c b3 22 08 00 

# 822af JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 822b3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 822b9 LoadImm8 [Register(0xe4), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 e4 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 822bc Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 822be LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 822c4 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 822c7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 822cd StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c d7 22 08 00 

# 822d3 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 822d7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 822dd LoadImm8 [Register(0xe4), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 e4 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 822e0 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# Number(0n8/0x08u8)
# 822e2 LoadImm8 [Register(0xe4), Constant8(0x08=8)]
#       t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
#       Number(0n8/0x08u8)
04 e4 08 

# None <= call io_write1(t477,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# 822e5 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 822e7 LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 822ed Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 822f0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 822f6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 00 23 08 00 

# 822fc JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 82300 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 82306 LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 f0 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 82309 Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# Number(0n12/0x0cu8)
# 8230b LoadImm8 [Register(0xe4), Constant8(0x0c=12)]
#       tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
#       Number(0n12/0x0cu8)
04 e4 0c 

# None <= call io_write1(tec13,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# 8230e Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 82310 LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 82316 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82319 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 8231f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 29 23 08 00 

# 82325 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 82329 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 8232f LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(96,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 f0 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 82332 Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# Number(0n1/0x01u8)
# 82334 LoadImm8 [Register(0xe4), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
#       Number(0n1/0x01u8)
04 e4 01 

# None <= call io_write1(ta11a,) Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# 82337 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 82339 LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 8233f Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82342 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82348 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 52 23 08 00 

# 8234e JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d5 1b 08 

# 82352 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 82358 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 8235a Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([242])
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([242])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) Number(0n987145/0x000f1009u32)
# Var t1 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t164d (t164d Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }) Reg(U32) Some([248, 249, 250, 251])
# Var t2 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([252]) Number(0n10/0x0au8)
# Var t3 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t4 (static "lcd_current" addr) Reg(U32) Some([16, 17, 18, 19]) Number(0n987145/0x000f1009u32)
# Var t5 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([20])
# Var t6 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t7 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) Number(0n987145/0x000f1009u32)
# Var t78f0 (t78f0 Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([242])
# Var t8 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t9 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) Number(0n987145/0x000f1009u32)
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([242])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) Reg(U32) Some([248, 249, 250, 251])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([242]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([242])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([20]) Number(0n32/0x20u8)
# Var tefac (tefac Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))) Reg(U8) Some([20])
# Var tf5a3 (tf5a3 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))) Reg(U8) Some([242])
# 8235f Copy8 [Register(0x00), Register(0xf2)]
#       Save function parameter 'ch' registers [0] to locals [242].
0b 00 f2 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 82362 LoadImm8 [Register(0xfc), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 fc 0a 

# if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 82365 Cmp8 [Register(0xf2), Register(0xfc)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 f2 fc 

# 82368 JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 70 23 08 

# 8236c JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 dd 23 08 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 82370 LoadImm32 [Register(0xf4), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 f4 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 82376 Load8 [Register(0xf4), Register(0x14)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 f4 14 

# t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# 82379 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 14 

# 8237c Divide8 [Register(0x14), Register(0x00), Register(0xf2)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
17 14 00 f2 

# tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# 82380 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
04 00 01 

# 82383 Add8NoCarryIn [Register(0xf2), Register(0x00), Register(0xf2)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
14 f2 00 f2 

# next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# 82387 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
04 00 14 

# 8238a Mul8_8 [Register(0xf2), Register(0x00), Register(0xf2)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
10 f2 00 f2 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_predicate_3
# t1 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 8238e LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t1 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 82394 Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
05 f8 14 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 82397 Cmp8 [Register(0xf2), Register(0x14)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 f2 14 

# 8239a JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 d9 23 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_body_4
# t2 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# 8239e LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t2 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t2] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# 823a4 Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t2] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 f8 14 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 823a7 LoadImm32 [Register(0xf8), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 f8 00 00 00 00 

# 823ad Copy8 [Register(0x14), Register(0xf8)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 14 f8 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 823b0 AddImm32IgnoreCarry [Register(0xf8), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 f8 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 823b6 LoadImm8 [Register(0x14), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 14 20 

# mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# 823b9 Store8 [Register(0x14), Register(0xf8)]
#       mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
06 14 f8 

# t3 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# 823bc LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t3 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
20 f8 09 10 0f 00 

# t4 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# 823c2 LoadImm32 [Register(0x10), Constant32(0x000f1009=987145)]
#       t4 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
20 10 09 10 0f 00 

# t5dda <- mem[t4] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# 823c8 Load8 [Register(0x10), Register(0x14)]
#       t5dda <- mem[t4] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
05 10 14 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 823cb LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 823ce Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 14 00 14 

# mem[t3] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# 823d2 Store8 [Register(0x14), Register(0xf8)]
#       mem[t3] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
06 14 f8 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 823d5 JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 8e 23 08 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 823d9 JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 36 24 08 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_else_0_2
# t5 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# 823dd LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t5 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t5] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# 823e3 Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t5] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 f8 14 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 823e6 LoadImm32 [Register(0xf8), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 f8 00 00 00 00 

# 823ec Copy8 [Register(0x14), Register(0xf8)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 14 f8 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 823ef AddImm32IgnoreCarry [Register(0xf8), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 f8 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 823f5 Store8 [Register(0xf2), Register(0xf8)]
#       mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 f2 f8 

# t6 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 823f8 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t6 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t6] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 823fe Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t6] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
05 f8 14 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 82401 Copy8 [Register(0x14), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 14 00 

# 82404 Copy8 [Register(0xf2), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b f2 04 

# Registers used by this function: {16, 17, 18, 19, 20, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 82407 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 8240d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 17 24 08 00 

# 82413 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 6f 21 08 

# 82417 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t7 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# 8241d LoadImm32 [Register(0xf4), Constant32(0x000f1009=987145)]
#       t7 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
20 f4 09 10 0f 00 

# t8 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# 82423 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t8 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t8] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# 82429 Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t8] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
05 f8 14 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 8242c LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 8242f Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 14 00 14 

# mem[t7] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# 82433 Store8 [Register(0x14), Register(0xf4)]
#       mem[t7] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
06 14 f4 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_end_0
# t9 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# 82436 LoadImm32 [Register(0xf4), Constant32(0x000f1009=987145)]
#       t9 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
20 f4 09 10 0f 00 

# t5dda <- mem[t9] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# 8243c Load8 [Register(0xf4), Register(0x14)]
#       t5dda <- mem[t9] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
05 f4 14 

# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 8243f LoadImm8 [Register(0xf2), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f2 50 

# if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# 82442 Cmp8 [Register(0xf2), Register(0x14)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
15 f2 14 

# 82445 JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
71 4d 24 08 

# 82449 JmpImm [Label24(lcd_putc_if_else_0_8)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
70 67 24 08 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(63,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {16, 17, 18, 19, 20, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers used by callee tree: {21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 8244d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 82453 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c 5d 24 08 00 

# 82459 JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 6e 24 08 

# 8245d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 82463 JmpImm [Label24(lcd_putc_if_end_6)]
#       goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
70 67 24 08 

# :lcd_putc_if_else_0_8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 82467 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 82469 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([21])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([22])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([24, 25, 26, 27]) Number(0n987145/0x000f1009u32)
# Var t1 (static "lcd_current" addr) Reg(U32) Some([28, 29, 30, 31]) Number(0n987145/0x000f1009u32)
# Var t54b2 (t54b2 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }) Reg(U32) Some([24, 25, 26, 27])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([22])
# Var t760c (t760c Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) Reg(U32) Some([24, 25, 26, 27])
# Var t81b5 (t81b5 Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([22])
# Var t9586 (t9586 Number(0n60/0x3cu8)) Reg(U8) Some([21]) Number(0n60/0x3cu8)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([32, 33, 34, 35])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var ta094 (ta094 Index("lcd_display", Ident("i"))) Reg(U8) Some([36])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([22])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([21]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([21])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([21]) Number(0n32/0x20u8)
# Var tfd89 (tfd89 Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) Reg(U8) Some([21])
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 8246e LoadImm32 [Register(0x18), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
20 18 09 10 0f 00 

# t1 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 82474 LoadImm32 [Register(0x1c), Constant32(0x000f1009=987145)]
#       t1 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 1c 09 10 0f 00 

# t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 8247a Load8 [Register(0x1c), Register(0x16)]
#       t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 1c 16 

# t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# 8247d LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 ec 

# 82480 Add8NoCarryIn [Register(0x16), Register(0x00), Register(0x16)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
14 16 00 16 

# mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 82484 Store8 [Register(0x16), Register(0x18)]
#       mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
06 16 18 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82487 LoadImm8 [Register(0x16), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 16 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Number(0n60/0x3cu8)
# 8248a LoadImm8 [Register(0x15), Constant8(0x3c=60)]
#       t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
#       Number(0n60/0x3cu8)
04 15 3c 

# if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# 8248d Cmp8 [Register(0x15), Register(0x16)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
15 15 16 

# 82490 JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
71 03 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# 82494 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 82497 Add8NoCarryIn [Register(0x16), Register(0x00), Register(0x15)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
14 16 00 15 

# t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# 8249b LoadImm32 [Register(0x18), Constant32(0x00000000=0)]
#       Zero-pad for t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
20 18 00 00 00 00 

# 824a1 Copy8 [Register(0x15), Register(0x18)]
#       t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
0b 15 18 

# t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# 824a4 AddImm32IgnoreCarry [Register(0x18), Constant32(0x000f100c=987148)]
#       t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
32 18 0c 10 0f 00 

# ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# 824aa Load8 [Register(0x18), Register(0x15)]
#       ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
05 18 15 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 824ad LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 824b3 Copy8 [Register(0x16), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 16 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 824b6 AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# 824bc Load8 [Register(0x20), Register(0x24)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
05 20 24 

# if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# 824bf Cmp8 [Register(0x15), Register(0x24)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
15 15 24 

# 824c2 JzImm [Label24(lcd_scroll_up_if_else_0_5)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
72 f8 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_4)], resolved: None }
# :lcd_scroll_up_if_true_0_4 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 824c6 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 824cc Copy8 [Register(0x16), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 16 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 824cf AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 824d5 Store8 [Register(0x15), Register(0x20)]
#       mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 15 20 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 824d8 Copy8 [Register(0x16), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 16 00 

# 824db Copy8 [Register(0x15), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 15 04 

# Registers used by this function: {21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 824de AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 824e4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c ee 24 08 00 

# 824ea JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 6f 21 08 

# 824ee AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# goto lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 824f4 JmpImm [Label24(lcd_scroll_up_if_end_3)]
#       goto lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 f8 24 08 

# :lcd_scroll_up_if_else_0_5 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_else_0_5
# :lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_end_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 824f8 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 824fb Add8NoCarryIn [Register(0x16), Register(0x00), Register(0x16)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 16 00 16 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 824ff JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 8a 24 08 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_6
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 82503 LoadImm8 [Register(0x15), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 15 50 

# if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 82506 Cmp8 [Register(0x15), Register(0x16)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 15 16 

# 82509 JcImm [Label24(lcd_scroll_up_while_end_8)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 6c 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_7)], resolved: None }
# :lcd_scroll_up_while_body_7 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_7
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 8250d LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 82513 Copy8 [Register(0x16), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 16 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 82516 AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# 8251c Load8 [Register(0x20), Register(0x24)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
05 20 24 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 8251f LoadImm8 [Register(0x15), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 15 20 

# if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# 82522 Cmp8 [Register(0x24), Register(0x15)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
15 24 15 

# 82525 JzImm [Label24(lcd_scroll_up_if_else_0_11)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
72 61 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_10)], resolved: None }
# :lcd_scroll_up_if_true_0_10 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_10
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 82529 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 8252f Copy8 [Register(0x16), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 16 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 82532 AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 82538 LoadImm8 [Register(0x15), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 15 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 8253b Store8 [Register(0x15), Register(0x20)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 15 20 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Number(0n32/0x20u8)
# 8253e LoadImm8 [Register(0x15), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
#       Number(0n32/0x20u8)
04 15 20 

# None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# 82541 Copy8 [Register(0x16), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 16 00 

# 82544 Copy8 [Register(0x15), Register(0x04)]
#       Arg1[ch]=tdf3b None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 15 04 

# Registers used by this function: {21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 82547 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 8254d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 57 25 08 00 

# 82553 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 6f 21 08 

# 82557 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# goto lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 8255d JmpImm [Label24(lcd_scroll_up_if_end_9)]
#       goto lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 61 25 08 

# :lcd_scroll_up_if_else_0_11 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_else_0_11
# :lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_end_9
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 82561 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 82564 Add8NoCarryIn [Register(0x16), Register(0x00), Register(0x16)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 16 00 16 

# goto lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 82568 JmpImm [Label24(lcd_scroll_up_while_predicate_6)]
#       goto lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 03 25 08 

# :lcd_scroll_up_while_end_8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_while_end_8
# return None None
# Return { value: None }
# 8256c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 8256e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([40, 41, 42, 43]) Number(0n0/0x00000000u32)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987728/0x000f1250u32)
# Var inline_main_RpnCalc_init_51_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([40, 41, 42, 43]) Number(0n0/0x00000000u32)
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987732/0x000f1254u32)
# Var inline_main_putc_25_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_25_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_25_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n82/0x52u8)
# Var inline_main_putc_26_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_26_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_26_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n80/0x50u8)
# Var inline_main_putc_27_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_27_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_27_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n78/0x4eu8)
# Var inline_main_putc_28_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_28_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_28_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n10/0x0au8)
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([48])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([40, 41, 42, 43]) Number(0n987664/0x000f1210u32)
# None <= call stdio_init() Some('programs/app/rpn.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 20, 21, 22, 23, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 205, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers to save: []
# 82573 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 82579 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c 83 25 08 00 

# 8257f JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 0f 2e 08 

# 82583 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 82589 LoadImm8 [Register(0x30), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 30 52 

# None <= call io_write0(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8258c Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 8258e LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82594 Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82597 LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 8259a Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 8259d JzImm [Label24(inline_main_putc_25_putc_if_else_0_2)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 c1 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_25_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_25_putc_if_true_0_1
# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 825a1 LoadImm8 [Register(0x30), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 30 52 

# None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 825a4 Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 825a7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 825ad StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c b7 25 08 00 

# 825b3 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 825b7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 825bd JmpImm [Label24(inline_main_putc_25_putc_if_end_0)]
#       goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 c1 25 08 

# :inline_main_putc_25_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_else_0_2
# :inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_end_0
# :inline_main_putc_25_function_end_putc None
# inline_main_putc_25_function_end_putc
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 825c1 LoadImm8 [Register(0x30), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 30 50 

# None <= call io_write0(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 825c4 Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 825c6 LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 825cc Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_26_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 825cf LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_26_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 825d2 Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 825d5 JzImm [Label24(inline_main_putc_26_putc_if_else_0_2)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 f9 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_26_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_26_putc_if_true_0_1
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 825d9 LoadImm8 [Register(0x30), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 30 50 

# None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 825dc Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 825df AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 825e5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ef 25 08 00 

# 825eb JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 825ef AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 825f5 JmpImm [Label24(inline_main_putc_26_putc_if_end_0)]
#       goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 f9 25 08 

# :inline_main_putc_26_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_else_0_2
# :inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_end_0
# :inline_main_putc_26_function_end_putc None
# inline_main_putc_26_function_end_putc
# tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(0n987664/0x000f1210u32)
# 825f9 LoadImm32 [Register(0x28), Constant32(0x000f1210=987664)]
#       tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(0n987664/0x000f1210u32)
20 28 10 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# 825ff LoadImm32 [Register(0x2c), Constant32(0x000f1250=987728)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
20 2c 50 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 82605 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 28 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 8260b Store32_1 [Register(0x28), Register(0x2c)]
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 28 2c 

# 8260e Store32_2 []
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# 8260f LoadImm32 [Register(0x2c), Constant32(0x000f1254=987732)]
#       inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
20 2c 54 12 0f 00 

# inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 82615 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 28 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 8261b Store32_1 [Register(0x28), Register(0x2c)]
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 28 2c 

# 8261e Store32_2 []
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# :inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 8261f LoadImm8 [Register(0x30), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 30 4e 

# None <= call io_write0(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82622 Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82624 LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 8262a Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_27_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8262d LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_27_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 82630 Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 82633 JzImm [Label24(inline_main_putc_27_putc_if_else_0_2)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 57 26 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_27_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_27_putc_if_true_0_1
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 82637 LoadImm8 [Register(0x30), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 30 4e 

# None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8263a Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 8263d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82643 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 4d 26 08 00 

# 82649 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 8264d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82653 JmpImm [Label24(inline_main_putc_27_putc_if_end_0)]
#       goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 57 26 08 

# :inline_main_putc_27_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_else_0_2
# :inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_end_0
# :inline_main_putc_27_function_end_putc None
# inline_main_putc_27_function_end_putc
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 82657 LoadImm8 [Register(0x30), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 30 0a 

# None <= call io_write0(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8265a Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 8265c LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82662 Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_28_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82665 LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_28_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 82668 Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 8266b JzImm [Label24(inline_main_putc_28_putc_if_else_0_2)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 8f 26 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_28_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_28_putc_if_true_0_1
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 8266f LoadImm8 [Register(0x30), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 30 0a 

# None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82672 Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 82675 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8267b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 85 26 08 00 

# 82681 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 82685 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 8268b JmpImm [Label24(inline_main_putc_28_putc_if_end_0)]
#       goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 8f 26 08 

# :inline_main_putc_28_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_else_0_2
# :inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_end_0
# :inline_main_putc_28_function_end_putc None
# inline_main_putc_28_function_end_putc
# tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(0n987664/0x000f1210u32)
# 8268f LoadImm32 [Register(0x28), Constant32(0x000f1210=987664)]
#       tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(0n987664/0x000f1210u32)
20 28 10 12 0f 00 

# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 82695 Copy32 [Register(0x28), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 28 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
# 82698 Push8 [Register(0x31)]
#       Saving reg0x31 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 31 

# 8269a Push8 [Register(0x30)]
#       Saving reg0x30 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 30 

# 8269c Push8 [Register(0x2f)]
#       Saving reg0x2f before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2f 

# 8269e Push8 [Register(0x2e)]
#       Saving reg0x2e before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2e 

# 826a0 Push8 [Register(0x2d)]
#       Saving reg0x2d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2d 

# 826a2 Push8 [Register(0x2c)]
#       Saving reg0x2c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2c 

# 826a4 Push8 [Register(0x2b)]
#       Saving reg0x2b before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2b 

# 826a6 Push8 [Register(0x2a)]
#       Saving reg0x2a before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2a 

# 826a8 Push8 [Register(0x29)]
#       Saving reg0x29 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 29 

# 826aa Push8 [Register(0x28)]
#       Saving reg0x28 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 28 

# 826ac AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 

# 826b2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c bc 26 08 00 

# 826b8 JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 31 1a 08 

# 826bc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 

# 826c2 Pop8 [Register(0x28)]
#       Restoring reg0x28 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 28 

# 826c4 Pop8 [Register(0x29)]
#       Restoring reg0x29 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 29 

# 826c6 Pop8 [Register(0x2a)]
#       Restoring reg0x2a after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2a 

# 826c8 Pop8 [Register(0x2b)]
#       Restoring reg0x2b after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2b 

# 826ca Pop8 [Register(0x2c)]
#       Restoring reg0x2c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2c 

# 826cc Pop8 [Register(0x2d)]
#       Restoring reg0x2d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2d 

# 826ce Pop8 [Register(0x2e)]
#       Restoring reg0x2e after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2e 

# 826d0 Pop8 [Register(0x2f)]
#       Restoring reg0x2f after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2f 

# 826d2 Pop8 [Register(0x30)]
#       Restoring reg0x30 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 30 

# 826d4 Pop8 [Register(0x31)]
#       Restoring reg0x31 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 31 

# 826d6 Copy8 [Register(0x00), Register(0x30)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 30 

# return Some(t2a99) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# 826d9 Copy8 [Register(0x30), Register(0x00)]
#       return Some(t2a99) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
0b 30 00 

# 826dc JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_main None
# function_end_main
# Unreachable None
# 826de Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_10_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([94]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([95])
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_11_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([98]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_8_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([100]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_9_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([100]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([104, 105, 106, 107])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([56, 57, 58, 59])
# Var t3970 (t3970 Index("temp", Number(0n2/0x02u8))) Reg(U8) Some([92])
# Var t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var t3b80 (t3b80 Index("temp", Number(0n3/0x03u8))) Reg(U8) Some([92])
# Var t3d83 (t3d83 Index("temp", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))) Reg(U32) Some([56, 57, 58, 59])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([72, 73, 74, 75])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([72, 73, 74, 75])
# Var t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([95])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([52, 53, 54, 55])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([56, 57, 58, 59])
# Var t9186 (t9186 Index("temp", Number(0n0/0x00u8))) Reg(U8) Some([92])
# Var t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([96])
# Var ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([95])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([108, 109, 110, 111])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([108, 109, 110, 111])
# Var temp (Local temp Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var temp_hi (Local temp_hi Number(U32) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var temp_lo (Local temp_lo Number(U32) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([60, 61, 62, 63])
# 826e3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 826e9 Copy32 [Register(0x00), Register(0x34)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [52, 53, 54, 55].
21 00 34 

# 826ec Copy32 [Register(0x04), Register(0x3c)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [60, 61, 62, 63].
21 04 3c 

# 826ef Copy32 [Register(0x08), Register(0x44)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [68, 69, 70, 71].
21 08 44 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 826f2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 826f8 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 38 00 00 00 00 

# t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 826fe Copy8 [Register(0x37), Register(0x60)]
#       t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 37 60 

# a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 82701 Copy8 [Register(0x60), Register(0x39)]
#       a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 60 39 

# t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 82704 Copy8 [Register(0x36), Register(0x60)]
#       t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 36 60 

# a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 82707 Copy8 [Register(0x60), Register(0x38)]
#       a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 60 38 

# b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 8270a LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 40 00 00 00 00 

# ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 82710 Copy8 [Register(0x3f), Register(0x5f)]
#       ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 3f 5f 

# b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 82713 Copy8 [Register(0x5f), Register(0x41)]
#       b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 5f 41 

# t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 82716 Copy8 [Register(0x3e), Register(0x5f)]
#       t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 3e 5f 

# b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 82719 Copy8 [Register(0x5f), Register(0x40)]
#       b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 5f 40 

# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 8271c Copy32 [Register(0x34), Register(0x48)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 34 48 

# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 8271f Copy32 [Register(0x3c), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 3c 4c 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 82722 Mul8_16 [Register(0x48), Register(0x4c), Register(0x50)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 48 4c 50 

# 82726 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 82729 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8272c Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 8272f LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 82735 Copy8 [Register(0x62), Register(0x58)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 58 

# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 82738 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8273b LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 82741 Copy8 [Register(0x5d), Register(0x54)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 54 

# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82744 Mul8_16 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 58 54 54 

# 82748 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 8274b LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 8274e Copy8 [Register(0x55), Register(0x63)]
#       inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 63 

# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 82751 Copy8 [Register(0x63), Register(0x57)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 63 57 

# inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 82754 Copy8 [Register(0x54), Register(0x63)]
#       inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 63 

# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 82757 Copy8 [Register(0x63), Register(0x56)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 63 56 

# inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8275a LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 8275d Copy8 [Register(0x64), Register(0x55)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 55 

# inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82760 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82763 Copy8 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82766 ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 82767 AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 8276b AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8276c Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8276f LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 82775 Copy8 [Register(0x5d), Register(0x54)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 54 

# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82778 Mul8_16 [Register(0x48), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 54 54 

# 8277c LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 8277f LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82782 Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82785 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 8278b Copy8 [Register(0x62), Register(0x58)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 58 

# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 8278e Mul8_16 [Register(0x58), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 58 4c 48 

# 82792 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4a 00 

# 82795 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 82798 Copy32 [Register(0x54), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 4c 

# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 8279b ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 8279c AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 4c 48 54 

# 827a0 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 827a1 Copy8 [Register(0x56), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 62 

# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 827a4 Copy8 [Register(0x62), Register(0x57)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 62 57 

# inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 827a7 Copy8 [Register(0x55), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 62 

# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 827aa Copy8 [Register(0x62), Register(0x56)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 62 56 

# inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 827ad Copy8 [Register(0x54), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 62 

# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 827b0 Copy8 [Register(0x62), Register(0x55)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 62 55 

# inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 827b3 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 827b6 Copy8 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 827b9 Copy32 [Register(0x54), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 4c 

# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 827bc ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 827bd AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 4c 48 

# 827c1 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32 None
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 827c2 Store32_1 [Register(0x48), Register(0x44)]
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 48 44 

# 827c5 Store32_2 []
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 

# t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 827c6 Copy32 [Register(0x44), Register(0x68)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 44 68 

# 827c9 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 68 04 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 827cf Copy32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 38 48 

# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 827d2 Copy32 [Register(0x40), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 40 4c 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 827d5 Mul8_16 [Register(0x48), Register(0x4c), Register(0x50)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 48 4c 50 

# 827d9 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 827dc LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 827df Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 827e2 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 827e8 Copy8 [Register(0x62), Register(0x58)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 58 

# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 827eb Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 827ee LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 827f4 Copy8 [Register(0x5d), Register(0x54)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 54 

# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 827f7 Mul8_16 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 58 54 54 

# 827fb LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 827fe LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 82801 Copy8 [Register(0x55), Register(0x63)]
#       inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 63 

# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 82804 Copy8 [Register(0x63), Register(0x57)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 63 57 

# inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 82807 Copy8 [Register(0x54), Register(0x63)]
#       inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 63 

# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 8280a Copy8 [Register(0x63), Register(0x56)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 63 56 

# inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8280d LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82810 Copy8 [Register(0x64), Register(0x55)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 55 

# inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82813 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82816 Copy8 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82819 ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 8281a AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 8281e AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8281f Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 82822 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 82828 Copy8 [Register(0x5d), Register(0x54)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 54 

# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 8282b Mul8_16 [Register(0x48), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 54 54 

# 8282f LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 82832 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82835 Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82838 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 8283e Copy8 [Register(0x62), Register(0x58)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 58 

# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 82841 Mul8_16 [Register(0x58), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 58 4c 48 

# 82845 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4a 00 

# 82848 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 8284b Copy32 [Register(0x54), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 4c 

# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 8284e ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 8284f AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 4c 48 54 

# 82853 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 82854 Copy8 [Register(0x56), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 62 

# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 82857 Copy8 [Register(0x62), Register(0x57)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 62 57 

# inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8285a Copy8 [Register(0x55), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 62 

# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 8285d Copy8 [Register(0x62), Register(0x56)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 62 56 

# inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 82860 Copy8 [Register(0x54), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 62 

# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 82863 Copy8 [Register(0x62), Register(0x55)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 62 55 

# inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82866 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82869 Copy8 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8286c Copy32 [Register(0x54), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 4c 

# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8286f ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82870 AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 4c 48 

# 82874 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32 None
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 82875 Store32_1 [Register(0x48), Register(0x68)]
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 48 68 

# 82878 Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 

# temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 82879 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 70 00 00 00 00 

# temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 8287f LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 68 00 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 82885 Mul8_16 [Register(0x38), Register(0x3c), Register(0x48)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 48 

# 82889 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4a 00 

# 8288c LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8288f Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82892 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 82898 Copy8 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5c 50 

# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8289b Copy8 [Register(0x3d), Register(0x5f)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 5f 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8289e LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 4c 00 00 00 00 

# 828a4 Copy8 [Register(0x5f), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5f 4c 

# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 828a7 Mul8_16 [Register(0x50), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 50 4c 4c 

# 828ab LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4e 00 

# 828ae LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4f 00 

# inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 828b1 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 828b4 Copy8 [Register(0x5d), Register(0x4f)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 5d 4f 

# inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 828b7 Copy8 [Register(0x4c), Register(0x5d)]
#       inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 4c 5d 

# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 828ba Copy8 [Register(0x5d), Register(0x4e)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 5d 4e 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 828bd LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 5e 00 

# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 828c0 Copy8 [Register(0x5e), Register(0x4d)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4d 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 828c3 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 5e 00 

# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 828c6 Copy8 [Register(0x5e), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4c 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 828c9 ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 828ca AddCarry32_1 [Register(0x48), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 48 4c 48 

# 828ce AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 828cf Copy8 [Register(0x3d), Register(0x5f)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 5f 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 828d2 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 4c 00 00 00 00 

# 828d8 Copy8 [Register(0x5f), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5f 4c 

# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 828db Mul8_16 [Register(0x38), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 4c 4c 

# 828df LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4e 00 

# 828e2 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4f 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 828e5 Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 828e8 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 828ee Copy8 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5c 50 

# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 828f1 Mul8_16 [Register(0x50), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 50 3c 38 

# 828f5 LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 828f8 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 828fb Copy32 [Register(0x4c), Register(0x3c)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 4c 3c 

# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 828fe ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 828ff AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 4c 

# 82903 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 82904 Copy8 [Register(0x4e), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4e 5c 

# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 82907 Copy8 [Register(0x5c), Register(0x4f)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 5c 4f 

# inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8290a Copy8 [Register(0x4d), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 4d 5c 

# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 8290d Copy8 [Register(0x5c), Register(0x4e)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 5c 4e 

# inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 82910 Copy8 [Register(0x4c), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 4c 5c 

# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 82913 Copy8 [Register(0x5c), Register(0x4d)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 5c 4d 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82916 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 5e 00 

# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82919 Copy8 [Register(0x5e), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4c 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8291c Copy32 [Register(0x4c), Register(0x3c)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 4c 3c 

# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8291f ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82920 AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 48 3c 38 

# 82924 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32 None
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 82925 Copy8 [Register(0x38), Register(0x5c)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 38 5c 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 82928 Copy8 [Register(0x5c), Register(0x72)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 5c 72 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 8292b Copy8 [Register(0x39), Register(0x5c)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 39 5c 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 8292e Copy8 [Register(0x5c), Register(0x73)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 5c 73 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 82931 Copy8 [Register(0x3a), Register(0x5c)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 3a 5c 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 82934 Copy8 [Register(0x5c), Register(0x68)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 5c 68 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 82937 Copy8 [Register(0x3b), Register(0x5c)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 3b 5c 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 8293a Copy8 [Register(0x5c), Register(0x69)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 5c 69 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 8293d Copy32 [Register(0x0c), Register(0x6c)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 6c 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 82940 Copy32 [Register(0x70), Register(0x38)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 70 38 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 82943 Store32_1 [Register(0x38), Register(0x6c)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 38 6c 

# 82946 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 82947 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 8294a Copy32 [Register(0x6c), Register(0x38)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 6c 38 

# 8294d AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 38 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 82953 Copy32 [Register(0x68), Register(0x3c)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 68 3c 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 82956 Store32_1 [Register(0x3c), Register(0x38)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 3c 38 

# 82959 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 8295a Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 8295d Copy32 [Register(0x6c), Register(0x38)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 6c 38 

# 82960 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 38 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 82966 Copy32 [Register(0x38), Register(0x3c)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 38 3c 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82969 Copy32 [Register(0x44), Register(0x38)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 38 

# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 8296c Copy32 [Register(0x44), Register(0x48)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 48 

# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 8296f Load32 [Register(0x38), Register(0x4c)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 38 4c 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82972 Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 82975 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 8297b Copy32 [Register(0x38), Register(0x54)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 38 54 

# 8297e AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 82984 Load32 [Register(0x54), Register(0x58)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 54 58 

# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 82987 Copy32 [Register(0x3c), Register(0x54)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 3c 54 

# 8298a AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 82990 Load32 [Register(0x54), Register(0x54)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 54 54 

# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 82993 ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 82994 AddCarry32_1 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 58 54 54 

# 82998 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 82999 Store32_1 [Register(0x54), Register(0x50)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 54 50 

# 8299c Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 8299d Load32 [Register(0x38), Register(0x50)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 38 50 

# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 829a0 Load32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 3c 38 

# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 829a3 ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 829a4 AddCarry32_1 [Register(0x50), Register(0x38), Register(0x38)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 50 38 38 

# 829a8 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 829a9 Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 38 48 

# 829ac Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 829ad Load32 [Register(0x48), Register(0x3c)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 48 3c 

# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 829b0 Copy32 [Register(0x4c), Register(0x38)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 4c 38 

# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 829b3 Cmp8 [Register(0x3b), Register(0x3f)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 3b 3f 

# 829b6 Cmp8IfZero [Register(0x3a), Register(0x3e)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 3a 3e 

# 829b9 Cmp8IfZero [Register(0x39), Register(0x3d)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 39 3d 

# 829bc Cmp8IfZero [Register(0x38), Register(0x3c)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 38 3c 

# 829bf JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 e6 29 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 829c3 Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 829c6 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 829cc Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 829cf AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 829d5 Load32 [Register(0x50), Register(0x38)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 50 38 

# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 829d8 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 38 01 00 00 00 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 829de Store32_1 [Register(0x38), Register(0x50)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 38 50 

# 829e1 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 829e2 JmpImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 e6 29 08 

# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# :inline_mul32_64_add_U64_0_function_end_add_U64 None
# inline_mul32_64_add_U64_0_function_end_add_U64
# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 829e6 Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 40 38 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 829e9 Mul8_16 [Register(0x34), Register(0x38), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 34 38 3c 

# 829ed LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3e 00 

# 829f0 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3f 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 829f3 Copy8 [Register(0x35), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 35 60 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 829f6 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 829fc Copy8 [Register(0x60), Register(0x48)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 48 

# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 829ff Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 82a02 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 40 00 00 00 00 

# 82a08 Copy8 [Register(0x5c), Register(0x40)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5c 40 

# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82a0b Mul8_16 [Register(0x48), Register(0x40), Register(0x40)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 40 40 

# 82a0f LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 42 00 

# 82a12 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 43 00 

# inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 82a15 Copy8 [Register(0x41), Register(0x61)]
#       inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 41 61 

# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 82a18 Copy8 [Register(0x61), Register(0x43)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 61 43 

# inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 82a1b Copy8 [Register(0x40), Register(0x61)]
#       inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 40 61 

# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 82a1e Copy8 [Register(0x61), Register(0x42)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 61 42 

# inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82a21 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82a24 Copy8 [Register(0x62), Register(0x41)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 41 

# inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82a27 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82a2a Copy8 [Register(0x62), Register(0x40)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 40 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82a2d ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 82a2e AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 3c 40 3c 

# 82a32 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 82a33 Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 82a36 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 40 00 00 00 00 

# 82a3c Copy8 [Register(0x5c), Register(0x40)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5c 40 

# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82a3f Mul8_16 [Register(0x34), Register(0x40), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 34 40 40 

# 82a43 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 42 00 

# 82a46 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 43 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82a49 Copy8 [Register(0x35), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 35 60 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82a4c LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 82a52 Copy8 [Register(0x60), Register(0x48)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 48 

# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 82a55 Mul8_16 [Register(0x48), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 48 38 34 

# 82a59 LoadImm8 [Register(0x36), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 36 00 

# 82a5c LoadImm8 [Register(0x37), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 37 00 

# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 82a5f Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 40 38 

# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82a62 ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82a63 AddCarry32_1 [Register(0x38), Register(0x34), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 38 34 40 

# 82a67 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 82a68 Copy8 [Register(0x42), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 42 60 

# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 82a6b Copy8 [Register(0x60), Register(0x43)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 43 

# inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 82a6e Copy8 [Register(0x41), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 41 60 

# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 82a71 Copy8 [Register(0x60), Register(0x42)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 42 

# inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 82a74 Copy8 [Register(0x40), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 40 60 

# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 82a77 Copy8 [Register(0x60), Register(0x41)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 41 

# inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82a7a LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82a7d Copy8 [Register(0x62), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 40 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 82a80 Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 40 38 

# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 82a83 ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82a84 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 34 

# 82a88 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 82a89 Copy32 [Register(0x34), Register(0x38)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 34 38 

# :inline_mul32_64_mul16_32_11_function_end_mul16_32 None
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 82a8c Copy8 [Register(0x38), Register(0x5c)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 38 5c 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 82a8f Copy8 [Register(0x5c), Register(0x72)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 5c 72 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 82a92 Copy8 [Register(0x39), Register(0x5c)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 39 5c 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 82a95 Copy8 [Register(0x5c), Register(0x73)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 5c 73 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 82a98 Copy8 [Register(0x3a), Register(0x5c)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 3a 5c 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 82a9b Copy8 [Register(0x5c), Register(0x68)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 5c 68 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 82a9e Copy8 [Register(0x3b), Register(0x5c)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 3b 5c 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 82aa1 Copy8 [Register(0x5c), Register(0x69)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 5c 69 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 82aa4 Copy32 [Register(0x0c), Register(0x6c)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 6c 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 82aa7 Copy32 [Register(0x70), Register(0x38)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 70 38 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 82aaa Store32_1 [Register(0x38), Register(0x6c)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 38 6c 

# 82aad Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 82aae Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 82ab1 Copy32 [Register(0x6c), Register(0x38)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 6c 38 

# 82ab4 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 38 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 82aba Copy32 [Register(0x68), Register(0x3c)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 68 3c 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 82abd Store32_1 [Register(0x3c), Register(0x38)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 3c 38 

# 82ac0 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 82ac1 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 82ac4 Copy32 [Register(0x6c), Register(0x38)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 6c 38 

# 82ac7 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 38 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 82acd Copy32 [Register(0x38), Register(0x3c)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 38 3c 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82ad0 Copy32 [Register(0x44), Register(0x34)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 34 

# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82ad3 Copy32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 3c 38 

# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82ad6 Copy32 [Register(0x44), Register(0x3c)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 3c 

# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 82ad9 Load32 [Register(0x34), Register(0x40)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 34 40 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82adc Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 82adf AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 82ae5 Copy32 [Register(0x34), Register(0x48)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 34 48 

# 82ae8 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 82aee Load32 [Register(0x48), Register(0x4c)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 48 4c 

# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 82af1 Copy32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 38 48 

# 82af4 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 82afa Load32 [Register(0x48), Register(0x48)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 48 48 

# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 82afd ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 82afe AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x48)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 4c 48 48 

# 82b02 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 82b03 Store32_1 [Register(0x48), Register(0x44)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 48 44 

# 82b06 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 82b07 Load32 [Register(0x34), Register(0x44)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 34 44 

# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 82b0a Load32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 38 34 

# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 82b0d ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 82b0e AddCarry32_1 [Register(0x44), Register(0x34), Register(0x34)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 44 34 34 

# 82b12 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 82b13 Store32_1 [Register(0x34), Register(0x3c)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 34 3c 

# 82b16 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 82b17 Load32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 3c 38 

# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 82b1a Copy32 [Register(0x40), Register(0x34)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 40 34 

# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 82b1d Cmp8 [Register(0x37), Register(0x3b)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 37 3b 

# 82b20 Cmp8IfZero [Register(0x36), Register(0x3a)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 36 3a 

# 82b23 Cmp8IfZero [Register(0x35), Register(0x39)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 35 39 

# 82b26 Cmp8IfZero [Register(0x34), Register(0x38)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 34 38 

# 82b29 JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 50 2b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82b2d Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 82b30 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82b36 Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 82b39 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 82b3f Load32 [Register(0x44), Register(0x34)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 44 34 

# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 82b42 AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 34 01 00 00 00 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 82b48 Store32_1 [Register(0x34), Register(0x44)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 34 44 

# 82b4b Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 82b4c JmpImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 50 2b 08 

# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# :inline_mul32_64_add_U64_1_function_end_add_U64 None
# inline_mul32_64_add_U64_1_function_end_add_U64
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 82b50 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 

# return None None
# Return { value: None }
# 82b56 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 82b5c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 82b5e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec32
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d (t1a5d Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d (t286d Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([125])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([126])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e (t4b1e Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b (t4e2b Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) Reg(U8) Some([126])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 (t7123 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 (t7d53 Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c (t858c Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e (t8c2e Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([125])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 (ta4e7 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 (tb4e5 Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 (td726 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 (te6a8 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 (tf695 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 (tfbb9 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([128, 129, 130, 131]) Number(0n987656/0x000f1208u32)
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_tb7c3 (tb7c3 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([120, 121, 122, 123]) Number(0n987660/0x000f120cu32)
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(0xcccccccdu32)) Reg(U32) Some([132, 133, 134, 135]) Number(0xcccccccdu32)
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([136])
# Var inline_print_dec32_putc_29_t0 (static "lcd_enable" addr) Reg(U32) Some([120, 121, 122, 123]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec32_putc_29_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([125])
# Var inline_print_dec32_putc_29_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([124]) Number(0n0/0x00u8)
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([136])
# Var t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([136])
# Var t6f38 (t6f38 Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))) Reg(U8) Some([136])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([116, 117, 118, 119])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([128, 129, 130, 131])
# Var t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([120, 121, 122, 123]) Number(0n256/0x00000100u32)
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([120, 121, 122, 123])
# 82b63 Copy32 [Register(0x00), Register(0x74)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [116, 117, 118, 119].
21 00 74 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# 82b66 Copy32 [Register(0x74), Register(0x80)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Ident("a")
21 74 80 

# t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 82b69 LoadImm32 [Register(0x78), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 78 00 01 00 00 

# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 82b6f Cmp8 [Register(0x7b), Register(0x83)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 7b 83 

# 82b72 Cmp8IfZero [Register(0x7a), Register(0x82)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 7a 82 

# 82b75 Cmp8IfZero [Register(0x79), Register(0x81)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 79 81 

# 82b78 Cmp8IfZero [Register(0x78), Register(0x80)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 78 80 

# 82b7b JcImm [Label24(print_dec32_if_else_0_2)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 a1 2b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# Index("a", Number(0n0/0x00u8))
# 82b7f Copy8 [Register(0x74), Register(0x88)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
#       Index("a", Number(0n0/0x00u8))
0b 74 88 

# None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# 82b82 Copy8 [Register(0x88), Register(0x00)]
#       Arg0[a]=t3404 None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
0b 88 00 

# Registers used by this function: {116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 82b85 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 82b8b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 95 2b 08 00 

# 82b91 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 5a 2d 08 

# 82b95 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# return None Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 82b9b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 82b9d JmpImm [Label24(print_dec32_if_end_0)]
#       goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
70 a1 2b 08 

# :print_dec32_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_else_0_2
# :print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 82ba1 Copy32 [Register(0x74), Register(0x80)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 74 80 

# inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 82ba4 Copy32 [Register(0x80), Register(0x78)]
#       inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 80 78 

# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# Number(0xcccccccdu32)
# 82ba7 LoadImm32 [Register(0x84), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       Number(0xcccccccdu32)
20 84 cd cc cc cc 

# inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# Number(0n987656/0x000f1208u32)
# 82bad LoadImm32 [Register(0x80), Constant32(0x000f1208=987656)]
#       inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
#       Number(0n987656/0x000f1208u32)
20 80 08 12 0f 00 

# None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# 82bb3 Copy32 [Register(0x78), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_47_a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 78 00 

# 82bb6 Copy32 [Register(0x84), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 84 04 

# 82bb9 Copy32 [Register(0x80), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 80 08 

# Registers used by this function: {116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}
# Registers to save: []
# 82bbc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 82bc2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c cc 2b 08 00 

# 82bc8 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 e3 26 08 

# 82bcc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
# Number(0n987660/0x000f120cu32)
# 82bd2 LoadImm32 [Register(0x78), Constant32(0x000f120c=987660)]
#       inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
#       Number(0n987660/0x000f120cu32)
20 78 0c 12 0f 00 

# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 82bd8 Load32 [Register(0x78), Register(0x78)]
#       inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 78 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# Index("a", Number(0n0/0x00u8))
# 82bdb Copy8 [Register(0x78), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n0/0x00u8))
0b 78 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# 82bde LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
04 00 03 

# 82be1 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7c), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
1e 04 00 7c 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# 82be6 Copy8 [Register(0x7c), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
0b 7c 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# Index("a", Number(0n1/0x01u8))
# 82be9 Copy8 [Register(0x79), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n1/0x01u8))
0b 79 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# 82bec LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
04 00 03 

# 82bef Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
1e 04 00 7d 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# 82bf4 Copy8 [Register(0x7c), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
0b 7c 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# Index("a", Number(0n2/0x02u8))
# 82bf7 Copy8 [Register(0x7a), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n2/0x02u8))
0b 7a 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# 82bfa LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
04 00 03 

# 82bfd Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7e), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
1e 04 00 7e 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# 82c02 Copy8 [Register(0x7c), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
0b 7c 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# Index("a", Number(0n3/0x03u8))
# 82c05 Copy8 [Register(0x7b), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n3/0x03u8))
0b 7b 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# 82c08 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
04 00 03 

# 82c0b Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
1e 04 00 7d 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# 82c10 Copy8 [Register(0x7c), Register(0x7b)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
0b 7c 7b 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n0/0x00u8))
# 82c13 Copy8 [Register(0x78), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n0/0x00u8))
0b 78 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# 82c16 AndImm8 [Register(0x7c), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
18 7c 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# 82c19 Copy8 [Register(0x7c), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
0b 7c 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n0/0x00u8))
# 82c1c Copy8 [Register(0x78), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n0/0x00u8))
0b 78 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n1/0x01u8))
# 82c1f Copy8 [Register(0x79), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n1/0x01u8))
0b 79 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# 82c22 Copy8 [Register(0x7d), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
0b 7d 7e 

# 82c25 AndImm8 [Register(0x7e), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
18 7e e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# 82c28 Or8 [Register(0x7c), Register(0x7e), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
1c 7c 7e 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# 82c2c Copy8 [Register(0x7c), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
0b 7c 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n1/0x01u8))
# 82c2f Copy8 [Register(0x79), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n1/0x01u8))
0b 79 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# 82c32 Copy8 [Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
0b 7d 7c 

# 82c35 AndImm8 [Register(0x7c), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
18 7c 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# 82c38 Copy8 [Register(0x7c), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
0b 7c 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n1/0x01u8))
# 82c3b Copy8 [Register(0x79), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n1/0x01u8))
0b 79 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n2/0x02u8))
# 82c3e Copy8 [Register(0x7a), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n2/0x02u8))
0b 7a 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# 82c41 Copy8 [Register(0x7e), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
0b 7e 7c 

# 82c44 AndImm8 [Register(0x7c), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
18 7c e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# 82c47 Or8 [Register(0x7d), Register(0x7c), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
1c 7d 7c 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# 82c4b Copy8 [Register(0x7c), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
0b 7c 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n2/0x02u8))
# 82c4e Copy8 [Register(0x7a), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n2/0x02u8))
0b 7a 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# 82c51 Copy8 [Register(0x7e), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
0b 7e 7c 

# 82c54 AndImm8 [Register(0x7c), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
18 7c 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# 82c57 Copy8 [Register(0x7c), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
0b 7c 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n2/0x02u8))
# 82c5a Copy8 [Register(0x7a), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n2/0x02u8))
0b 7a 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n3/0x03u8))
# 82c5d Copy8 [Register(0x7b), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n3/0x03u8))
0b 7b 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# 82c60 Copy8 [Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
0b 7d 7c 

# 82c63 AndImm8 [Register(0x7c), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
18 7c e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# 82c66 Or8 [Register(0x7e), Register(0x7c), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
1c 7e 7c 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# 82c6a Copy8 [Register(0x7c), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
0b 7c 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n3/0x03u8))
# 82c6d Copy8 [Register(0x7b), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n3/0x03u8))
0b 7b 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# 82c70 Copy8 [Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
0b 7d 7c 

# 82c73 AndImm8 [Register(0x7c), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
18 7c 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# 82c76 Copy8 [Register(0x7c), Register(0x7b)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
0b 7c 7b 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 None
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# :inline_print_dec32_div32_by10_47_function_end_div32_by10 None
# inline_print_dec32_div32_by10_47_function_end_div32_by10
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 82c79 Copy32 [Register(0x78), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 78 00 

# Registers used by this function: {116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136]
# 82c7c Push8 [Register(0x88)]
#       Saving reg0x88 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 88 

# 82c7e Push8 [Register(0x87)]
#       Saving reg0x87 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 87 

# 82c80 Push8 [Register(0x86)]
#       Saving reg0x86 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 86 

# 82c82 Push8 [Register(0x85)]
#       Saving reg0x85 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 85 

# 82c84 Push8 [Register(0x84)]
#       Saving reg0x84 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 84 

# 82c86 Push8 [Register(0x83)]
#       Saving reg0x83 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 83 

# 82c88 Push8 [Register(0x82)]
#       Saving reg0x82 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 82 

# 82c8a Push8 [Register(0x81)]
#       Saving reg0x81 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 81 

# 82c8c Push8 [Register(0x80)]
#       Saving reg0x80 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 80 

# 82c8e Push8 [Register(0x7e)]
#       Saving reg0x7e before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7e 

# 82c90 Push8 [Register(0x7d)]
#       Saving reg0x7d before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7d 

# 82c92 Push8 [Register(0x7c)]
#       Saving reg0x7c before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7c 

# 82c94 Push8 [Register(0x7b)]
#       Saving reg0x7b before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7b 

# 82c96 Push8 [Register(0x7a)]
#       Saving reg0x7a before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7a 

# 82c98 Push8 [Register(0x79)]
#       Saving reg0x79 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 79 

# 82c9a Push8 [Register(0x78)]
#       Saving reg0x78 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 78 

# 82c9c Push8 [Register(0x77)]
#       Saving reg0x77 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 77 

# 82c9e Push8 [Register(0x76)]
#       Saving reg0x76 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 76 

# 82ca0 Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 75 

# 82ca2 Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 74 

# 82ca4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 82caa StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c b4 2c 08 00 

# 82cb0 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 63 2b 08 

# 82cb4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 82cba Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 74 

# 82cbc Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 75 

# 82cbe Pop8 [Register(0x76)]
#       Restoring reg0x76 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 76 

# 82cc0 Pop8 [Register(0x77)]
#       Restoring reg0x77 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 77 

# 82cc2 Pop8 [Register(0x78)]
#       Restoring reg0x78 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 78 

# 82cc4 Pop8 [Register(0x79)]
#       Restoring reg0x79 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 79 

# 82cc6 Pop8 [Register(0x7a)]
#       Restoring reg0x7a after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7a 

# 82cc8 Pop8 [Register(0x7b)]
#       Restoring reg0x7b after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7b 

# 82cca Pop8 [Register(0x7c)]
#       Restoring reg0x7c after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7c 

# 82ccc Pop8 [Register(0x7d)]
#       Restoring reg0x7d after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7d 

# 82cce Pop8 [Register(0x7e)]
#       Restoring reg0x7e after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7e 

# 82cd0 Pop8 [Register(0x80)]
#       Restoring reg0x80 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 80 

# 82cd2 Pop8 [Register(0x81)]
#       Restoring reg0x81 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 81 

# 82cd4 Pop8 [Register(0x82)]
#       Restoring reg0x82 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 82 

# 82cd6 Pop8 [Register(0x83)]
#       Restoring reg0x83 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 83 

# 82cd8 Pop8 [Register(0x84)]
#       Restoring reg0x84 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 84 

# 82cda Pop8 [Register(0x85)]
#       Restoring reg0x85 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 85 

# 82cdc Pop8 [Register(0x86)]
#       Restoring reg0x86 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 86 

# 82cde Pop8 [Register(0x87)]
#       Restoring reg0x87 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 87 

# 82ce0 Pop8 [Register(0x88)]
#       Restoring reg0x88 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 88 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 82ce2 Copy32 [Register(0x74), Register(0x80)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 74 80 

# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 82ce5 Copy32 [Register(0x78), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 78 74 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82ce8 ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 82ce9 AddCarry32_1 [Register(0x74), Register(0x74), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 74 74 74 

# 82ced AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82cee ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 82cef AddCarry32_1 [Register(0x74), Register(0x74), Register(0x78)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 74 74 78 

# 82cf3 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 82cf4 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 82cf5 AddCarry32_1 [Register(0x78), Register(0x78), Register(0x78)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 78 78 78 

# 82cf9 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 82cfa ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 82cfb AddCarry32_1 [Register(0x78), Register(0x74), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 78 74 74 

# 82cff AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 None
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 82d00 Copy32 [Register(0x74), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 74 00 

# 82d03 Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 

# 82d05 Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 

# 82d07 Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 

# 82d09 Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 

# 82d0b AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 

# 82d11 ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 

# 82d12 AddCarry32_1 [Register(0x80), Register(0x00), Register(0x74)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 80 00 74 

# 82d16 AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 

# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# Index("a", Number(0n0/0x00u8))
# 82d17 Copy8 [Register(0x74), Register(0x88)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
#       Index("a", Number(0n0/0x00u8))
0b 74 88 

# t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# 82d1a LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
04 00 30 

# 82d1d Add8NoCarryIn [Register(0x88), Register(0x00), Register(0x88)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
14 88 00 88 

# inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x88), Register(0x88)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82d21 Out0 [Register(0x88)]
#       IoWrite0
68 88 

# inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82d23 LoadImm32 [Register(0x78), Constant32(0x000f105c=987228)]
#       inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 78 5c 10 0f 00 

# inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82d29 Load8 [Register(0x78), Register(0x7d)]
#       inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 78 7d 

# inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82d2c LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 7c 00 

# if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 82d2f Cmp8 [Register(0x7d), Register(0x7c)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 7d 7c 

# 82d32 JzImm [Label24(inline_print_dec32_putc_29_putc_if_else_0_2)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 53 2d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_putc_if_true_0_1)], resolved: None }
# :inline_print_dec32_putc_29_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec32_putc_29_putc_if_true_0_1
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x88), Register(0x88)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82d36 Copy8 [Register(0x88), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 88 00 

# Registers used by this function: {116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 82d39 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82d3f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 49 2d 08 00 

# 82d45 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 82d49 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82d4f JmpImm [Label24(inline_print_dec32_putc_29_putc_if_end_0)]
#       goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 53 2d 08 

# :inline_print_dec32_putc_29_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_else_0_2
# :inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_end_0
# :inline_print_dec32_putc_29_function_end_putc None
# inline_print_dec32_putc_29_function_end_putc
# return None None
# Return { value: None }
# 82d53 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 82d55 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec8
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([137])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([138])
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([137])
# Var inline_print_dec8_putc_30_t0 (static "lcd_enable" addr) Reg(U32) Some([140, 141, 142, 143]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec8_putc_30_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([138])
# Var inline_print_dec8_putc_30_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([144]) Number(0n0/0x00u8)
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([137])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([138]) Number(0n10/0x0au8)
# Var t5673 (t5673 Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))) Reg(U8) Some([137])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([137])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([138])
# Var tf5e0 (tf5e0 Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) Reg(U8) Some([138])
# 82d5a Copy8 [Register(0x00), Register(0x89)]
#       Save function parameter 'a' registers [0] to locals [137].
0b 00 89 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 82d5d LoadImm8 [Register(0x8a), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 8a 0a 

# if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# 82d60 Cmp8 [Register(0x8a), Register(0x89)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
15 8a 89 

# 82d63 JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
71 6b 2d 08 

# 82d67 JmpImm [Label24(print_dec8_if_else_0_2)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
70 bb 2d 08 

# :print_dec8_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }\nArithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# 82d6b LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
04 00 0a 

# 82d6e Divide8 [Register(0x89), Register(0x00), Register(0x8a)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
17 89 00 8a 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x8a), Register(0x8a)], resolved: None }
# None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 82d72 Copy8 [Register(0x8a), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b 8a 00 

# Registers used by this function: {137, 138, 140, 141, 142, 143, 144}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [137, 138, 140, 141, 142, 143, 144]
# 82d75 Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 90 

# 82d77 Push8 [Register(0x8f)]
#       Saving reg0x8f before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8f 

# 82d79 Push8 [Register(0x8e)]
#       Saving reg0x8e before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8e 

# 82d7b Push8 [Register(0x8d)]
#       Saving reg0x8d before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8d 

# 82d7d Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8c 

# 82d7f Push8 [Register(0x8a)]
#       Saving reg0x8a before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8a 

# 82d81 Push8 [Register(0x89)]
#       Saving reg0x89 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 89 

# 82d83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 82d89 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 93 2d 08 00 

# 82d8f JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 5a 2d 08 

# 82d93 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 82d99 Pop8 [Register(0x89)]
#       Restoring reg0x89 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 89 

# 82d9b Pop8 [Register(0x8a)]
#       Restoring reg0x8a after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8a 

# 82d9d Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8c 

# 82d9f Pop8 [Register(0x8d)]
#       Restoring reg0x8d after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8d 

# 82da1 Pop8 [Register(0x8e)]
#       Restoring reg0x8e after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8e 

# 82da3 Pop8 [Register(0x8f)]
#       Restoring reg0x8f after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8f 

# 82da5 Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 90 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nArithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x8a), Register(0x8a)], resolved: None }
# tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# 82da7 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
04 00 0a 

# 82daa Mul8_8 [Register(0x8a), Register(0x00), Register(0x8a)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
10 8a 00 8a 

# a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# 82dae Copy8 [Register(0x8a), Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
0b 8a 00 

# 82db1 Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
02 00 

# 82db3 Add8NoCarryIn [Register(0x89), Register(0x00), Register(0x89)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
14 89 00 89 

# goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 82db7 JmpImm [Label24(print_dec8_if_end_0)]
#       goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
70 bb 2d 08 

# :print_dec8_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_else_0_2
# :print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\nArithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# 82dbb LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
04 00 30 

# 82dbe Add8NoCarryIn [Register(0x89), Register(0x00), Register(0x89)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
14 89 00 89 

# inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82dc2 Out0 [Register(0x89)]
#       IoWrite0
68 89 

# inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82dc4 LoadImm32 [Register(0x8c), Constant32(0x000f105c=987228)]
#       inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 8c 5c 10 0f 00 

# inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82dca Load8 [Register(0x8c), Register(0x8a)]
#       inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 8c 8a 

# inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82dcd LoadImm8 [Register(0x90), Constant8(0x00=0)]
#       inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 90 00 

# if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 82dd0 Cmp8 [Register(0x8a), Register(0x90)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 8a 90 

# 82dd3 JzImm [Label24(inline_print_dec8_putc_30_putc_if_else_0_2)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 08 2e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_putc_if_true_0_1)], resolved: None }
# :inline_print_dec8_putc_30_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec8_putc_30_putc_if_true_0_1
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82dd7 Copy8 [Register(0x89), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 89 00 

# Registers used by this function: {137, 138, 140, 141, 142, 143, 144}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [140, 141, 142, 143, 144]
# 82dda Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 90 

# 82ddc Push8 [Register(0x8f)]
#       Saving reg0x8f before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8f 

# 82dde Push8 [Register(0x8e)]
#       Saving reg0x8e before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8e 

# 82de0 Push8 [Register(0x8d)]
#       Saving reg0x8d before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8d 

# 82de2 Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8c 

# 82de4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82dea StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c f4 2d 08 00 

# 82df0 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 5f 23 08 

# 82df4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 82dfa Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8c 

# 82dfc Pop8 [Register(0x8d)]
#       Restoring reg0x8d after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8d 

# 82dfe Pop8 [Register(0x8e)]
#       Restoring reg0x8e after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8e 

# 82e00 Pop8 [Register(0x8f)]
#       Restoring reg0x8f after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8f 

# 82e02 Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 90 

# goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82e04 JmpImm [Label24(inline_print_dec8_putc_30_putc_if_end_0)]
#       goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 08 2e 08 

# :inline_print_dec8_putc_30_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_else_0_2
# :inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_end_0
# :inline_print_dec8_putc_30_function_end_putc None
# inline_print_dec8_putc_30_function_end_putc
# return None None
# Return { value: None }
# 82e08 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 82e0a Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var inline_stdio_init_queue_init_35_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([145]) Number(0n0/0x00u8)
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([148, 149, 150, 151]) Number(0n987648/0x000f1200u32)
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([148, 149, 150, 151]) Number(0n987652/0x000f1204u32)
# Var t0 (static "lcd_enable" addr) Reg(U32) Some([152, 153, 154, 155]) Number(0n987228/0x000f105cu32)
# Var t1 (static "keyboard_enable" addr) Reg(U32) Some([152, 153, 154, 155]) Number(0n987144/0x000f1008u32)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([156]) Number(0n1/0x01u8)
# t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82e0f LoadImm32 [Register(0x98), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 98 5c 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 82e15 LoadImm8 [Register(0x9c), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 9c 01 

# mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82e18 Store8 [Register(0x9c), Register(0x98)]
#       mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 9c 98 

# t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82e1b LoadImm32 [Register(0x98), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 98 08 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 82e21 LoadImm8 [Register(0x9c), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 9c 01 

# mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82e24 Store8 [Register(0x9c), Register(0x98)]
#       mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 9c 98 

# inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# 82e27 LoadImm32 [Register(0x94), Constant32(0x000f1200=987648)]
#       inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
20 94 00 12 0f 00 

# inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82e2d LoadImm8 [Register(0x91), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 91 00 

# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# 82e30 Store8 [Register(0x91), Register(0x94)]
#       mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
06 91 94 

# inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# 82e33 LoadImm32 [Register(0x94), Constant32(0x000f1204=987652)]
#       inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
20 94 04 12 0f 00 

# inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82e39 LoadImm8 [Register(0x91), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 91 00 

# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# 82e3c Store8 [Register(0x91), Register(0x94)]
#       mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
06 91 94 

# :inline_stdio_init_queue_init_35_function_end_queue_init None
# inline_stdio_init_queue_init_35_function_end_queue_init
# None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {145, 148, 149, 150, 151, 152, 153, 154, 155, 156}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers to save: [145]
# 82e3f Push8 [Register(0x91)]
#       Saving reg0x91 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 91 

# 82e41 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 82e47 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c 51 2e 08 00 

# 82e4d JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 14 22 08 

# 82e51 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# 82e57 Pop8 [Register(0x91)]
#       Restoring reg0x91 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 91 

# None <= call KeyBoard_init() Some('/lutcomp/programs/lib/stdio.j':(15,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {145, 148, 149, 150, 151, 152, 153, 154, 155, 156}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 82e59 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 82e5f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c 69 2e 08 00 

# 82e65 JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 08 08 

# 82e69 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 82e6f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 82e71 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

