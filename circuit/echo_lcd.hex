v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 64 00 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :lcd_write_char
# Ret None
# Arg0=c
# Var c (Arg0 c Number(U8)) Reg(U8) Some([17])
# Var inline_lcd_write_char_lcd_flush_0_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([18])
# Var inline_lcd_write_char_lcd_flush_0_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([18])
# Var inline_lcd_write_char_lcd_flush_0_t2 (t2 Number(U8, 8)) Reg(U8) Some([19])
# Var inline_lcd_write_char_lcd_flush_0_t3 (t3 Number(U8, 0)) Reg(U8) Some([19])
# Var t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([17])
# Var t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([17])
# Var t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([17])
# Var t11 (t11 Ident("c")) Reg(U8) Some([17])
# Var t12 (t12 Number(U8, 15)) Reg(U8) Some([18])
# Var t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([18])
# Var t3 (t3 Number(U8, 128)) Reg(U8) Some([18])
# Var t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([19])
# Var t5 (t5 Ident("c")) Reg(U8) Some([17])
# Var t6 (t6 Number(U8, 4)) Reg(U8) Some([19])
# Var t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([17])
# Var t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([17])
# Var t9 (t9 Number(U8, 128)) Reg(U8) Some([19])
# 00022 Instruction { source: "Save function parameter 'c' registers [0] to locals [17].", opcode: Copy8, args: [Register(0x00), Register(0x11)], resolved: None }
0b 00 11 
# :inline_lcd_write_char_lcd_flush_0_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_lcd_write_char_lcd_flush_0_lcd_flush_while_predicate_0
# Some(inline_lcd_write_char_lcd_flush_0_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00025 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x12)], resolved: None }
61 12 
# inline_lcd_write_char_lcd_flush_0_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00027 Instruction { source: "inline_lcd_write_char_lcd_flush_0_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x08=8)], resolved: None }
04 13 08 
# inline_lcd_write_char_lcd_flush_0_t0 <- inline_lcd_write_char_lcd_flush_0_t1 BitwiseAnd inline_lcd_write_char_lcd_flush_0_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 0002a Instruction { source: "inline_lcd_write_char_lcd_flush_0_t0 <- inline_lcd_write_char_lcd_flush_0_t1 BitwiseAnd inline_lcd_write_char_lcd_flush_0_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x12), Register(0x13), Register(0x12)], resolved: None }
1b 12 13 12 
# inline_lcd_write_char_lcd_flush_0_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0002e Instruction { source: "inline_lcd_write_char_lcd_flush_0_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x00=0)], resolved: None }
04 13 00 
# if inline_lcd_write_char_lcd_flush_0_t0 != inline_lcd_write_char_lcd_flush_0_t3 then 'inline_lcd_write_char_lcd_flush_0_lcd_flush_while_body_1' else 'inline_lcd_write_char_lcd_flush_0_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00031 Instruction { source: "if inline_lcd_write_char_lcd_flush_0_t0 != inline_lcd_write_char_lcd_flush_0_t3 then 'inline_lcd_write_char_lcd_flush_0_lcd_flush_while_body_1' else 'inline_lcd_write_char_lcd_flush_0_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x12), Register(0x13)], resolved: None }
15 12 13 
# 00034 Instruction { source: "if inline_lcd_write_char_lcd_flush_0_t0 != inline_lcd_write_char_lcd_flush_0_t3 then 'inline_lcd_write_char_lcd_flush_0_lcd_flush_while_body_1' else 'inline_lcd_write_char_lcd_flush_0_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_lcd_write_char_lcd_flush_0_lcd_flush_while_end_2)], resolved: None }
72 3c 00 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_lcd_write_char_lcd_flush_0_t0 != inline_lcd_write_char_lcd_flush_0_t3 then 'inline_lcd_write_char_lcd_flush_0_lcd_flush_while_body_1' else 'inline_lcd_write_char_lcd_flush_0_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_lcd_write_char_lcd_flush_0_lcd_flush_while_body_1)], resolved: None }
# :inline_lcd_write_char_lcd_flush_0_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_lcd_write_char_lcd_flush_0_lcd_flush_while_body_1
# goto inline_lcd_write_char_lcd_flush_0_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00038 Instruction { source: "goto inline_lcd_write_char_lcd_flush_0_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_lcd_write_char_lcd_flush_0_lcd_flush_while_predicate_0)], resolved: None }
70 25 00 00 
# :inline_lcd_write_char_lcd_flush_0_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_lcd_write_char_lcd_flush_0_lcd_flush_while_end_2
# goto inline_lcd_write_char_lcd_flush_0_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_write_char_lcd_flush_0_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_lcd_write_char_lcd_flush_0_function_end_lcd_flush)], resolved: None }
# :inline_lcd_write_char_lcd_flush_0_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_lcd_write_char_lcd_flush_0_function_end_lcd_flush
# t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0003c Instruction { source: "t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x80=128)], resolved: None }
04 12 80 
# t5 <- c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t5 <- c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x11), Register(0x11)], resolved: None }
# t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 0003f Instruction { source: "t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x04=4)], resolved: None }
04 13 04 
# t4 <- t5 ShiftRight t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00042 Instruction { source: "t4 <- t5 ShiftRight t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x13), Register(0x11), Register(0x13)], resolved: None }
1e 05 13 11 13 
# t2 <- t3 BitwiseOr t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00047 Instruction { source: "t2 <- t3 BitwiseOr t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x12), Register(0x13), Register(0x12)], resolved: None }
1c 12 13 12 
# None <= call io_write1(t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 0004b Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0004d Instruction { source: "t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x80=128)], resolved: None }
04 13 80 
# t11 <- c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t11 <- c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x11), Register(0x11)], resolved: None }
# t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00050 Instruction { source: "t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x0f=15)], resolved: None }
04 12 0f 
# t10 <- t11 BitwiseAnd t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00053 Instruction { source: "t10 <- t11 BitwiseAnd t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x11), Register(0x12), Register(0x11)], resolved: None }
1b 11 12 11 
# t8 <- t9 BitwiseOr t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00057 Instruction { source: "t8 <- t9 BitwiseOr t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x13), Register(0x11), Register(0x11)], resolved: None }
1c 13 11 11 
# None <= call io_write1(t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 0005b Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x11)], resolved: None }
69 11 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0005d Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# function_end_lcd_write_char
# Unreachable
# 	SourceContext { contexts: [] }
# 0005f Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([20])
# Var inline_main_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([20])
# Var inline_main_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([20])
# Var inline_main_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([21])
# Var inline_main_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([21])
# Var t0 (t0 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([20])
# Var t1 (t1 Number(U8, 3)) Reg(U8) Some([20])
# Var t10 (t10 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([20])
# Var t11 (t11 Number(U8, 0)) Reg(U8) Some([20])
# Var t12 (t12 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([20])
# Var t13 (t13 Number(U8, 1)) Reg(U8) Some([20])
# Var t14 (t14 Ident("ch")) Reg(U8) Some([20])
# Var t15 (t15 Number(U8, 122)) Reg(U8) Some([21])
# Var t16 (t16 Call(Call { function: "lcd_write_char", parameters: [Ident("ch")] })) Reg(U8) Some([20])
# Var t17 (t17 Ident("ch")) Reg(U8) Some([20])
# Var t18 (t18 Ident("ch")) Reg(U8) Some([20])
# Var t19 (t19 Number(U8, 1)) Reg(U8) Some([21])
# Var t2 (t2 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([20])
# Var t20 (t20 Ident("ch")) Reg(U8) Some([20])
# Var t21 (t21 Number(U8, 90)) Reg(U8) Some([21])
# Var t22 (t22 Call(Call { function: "lcd_write_char", parameters: [Ident("ch")] })) Reg(U8) Some([20])
# Var t23 (t23 Ident("ch")) Reg(U8) Some([20])
# Var t24 (t24 Ident("ch")) Reg(U8) Some([20])
# Var t25 (t25 Number(U8, 1)) Reg(U8) Some([21])
# Var t26 (t26 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([20])
# Var t3 (t3 Number(U8, 2)) Reg(U8) Some([20])
# Var t4 (t4 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([20])
# Var t5 (t5 Number(U8, 8)) Reg(U8) Some([20])
# Var t6 (t6 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([20])
# Var t7 (t7 Number(U8, 2)) Reg(U8) Some([20])
# Var t8 (t8 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([20])
# Var t9 (t9 Number(U8, 8)) Reg(U8) Some([20])
# t1 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 00064 Instruction { source: "t1 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x03=3)], resolved: None }
04 14 03 
# None <= call io_write1(t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 00067 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x14)], resolved: None }
69 14 
# t3 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 00069 Instruction { source: "t3 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x02=2)], resolved: None }
04 14 02 
# None <= call io_write1(t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 0006c Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x14)], resolved: None }
69 14 
# t5 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Number(U8, 8)", "Number(U8, 8)"] }
# 0006e Instruction { source: "t5 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x08=8)], resolved: None }
04 14 08 
# None <= call io_write1(t5,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })"] }
# 00071 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x14)], resolved: None }
69 14 
# t7 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 00073 Instruction { source: "t7 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x02=2)], resolved: None }
04 14 02 
# None <= call io_write1(t7,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 00076 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x14)], resolved: None }
69 14 
# t9 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Number(U8, 8)", "Number(U8, 8)"] }
# 00078 Instruction { source: "t9 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x08=8)], resolved: None }
04 14 08 
# None <= call io_write1(t9,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })"] }
# 0007b Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x14)], resolved: None }
69 14 
# t11 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 0007d Instruction { source: "t11 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# None <= call io_write1(t11,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 00080 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x14)], resolved: None }
69 14 
# t13 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Number(U8, 1)", "Number(U8, 1)"] }
# 00082 Instruction { source: "t13 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x01=1)], resolved: None }
04 14 01 
# None <= call io_write1(t13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })"] }
# 00085 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x14)], resolved: None }
69 14 
# ch <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 97) }", "Number(U8, 97)"] }
# 00087 Instruction { source: "ch <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 97) }\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x61=97)], resolved: None }
04 14 61 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }"] }
# main_while_predicate_0
# t14 <- ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t14 <- ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t15 <- 0n122/0x7au8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }", "Number(U8, 122)", "Number(U8, 122)"] }
# 0008a Instruction { source: "t15 <- 0n122/0x7au8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\", \"Number(U8, 122)\", \"Number(U8, 122)\"] }", opcode: LoadImm8, args: [Register(0x15), Constant8(0x7a=122)], resolved: None }
04 15 7a 
# if t14 <= t15 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }"] }
# 0008d Instruction { source: "if t14 <= t15 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x15)], resolved: None }
15 14 15 
# 00090 Instruction { source: "if t14 <= t15 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\"] }", opcode: JcImm, args: [Label24(main_while_body_1)], resolved: None }
71 98 00 00 
# 00094 Instruction { source: "if t14 <= t15 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 bc 00 00 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }"] }
# main_while_body_1
# t17 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t17 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# None <= call lcd_write_char(t17,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })"] }
# 00098 Instruction { source: "Arg0[c]=t17 None <= call lcd_write_char(t17,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x00)], resolved: None }
0b 14 00 
# Registers used by this function: {20, 21}
# Registers used by callee tree: {16, 17, 18, 19}
# Registers to save: []
# 0009b Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 000a1 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c ab 00 00 00 
# 000a7 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 22 00 00 
# 000ab Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t18 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t18 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t19 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 000b1 Instruction { source: "t19 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x15), Constant8(0x01=1)], resolved: None }
04 15 01 
# ch <- t18 Add t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))"] }
# 000b4 Instruction { source: "ch <- t18 Add t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x15), Register(0x14)], resolved: None }
14 14 15 14 
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 000b8 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 8a 00 00 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# ch <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Number(U8, 65) }", "Number(U8, 65)"] }
# 000bc Instruction { source: "ch <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Number(U8, 65) }\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x41=65)], resolved: None }
04 14 41 
# :main_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }"] }
# main_while_predicate_3
# t20 <- ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t20 <- ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t21 <- 0n90/0x5au8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }", "Number(U8, 90)", "Number(U8, 90)"] }
# 000bf Instruction { source: "t21 <- 0n90/0x5au8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\", \"Number(U8, 90)\", \"Number(U8, 90)\"] }", opcode: LoadImm8, args: [Register(0x15), Constant8(0x5a=90)], resolved: None }
04 15 5a 
# if t20 <= t21 then 'main_while_body_4' else 'main_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }"] }
# 000c2 Instruction { source: "if t20 <= t21 then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x15)], resolved: None }
15 14 15 
# 000c5 Instruction { source: "if t20 <= t21 then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\"] }", opcode: JcImm, args: [Label24(main_while_body_4)], resolved: None }
71 cd 00 00 
# 000c9 Instruction { source: "if t20 <= t21 then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_5)], resolved: None }
70 f1 00 00 
# :main_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }"] }
# main_while_body_4
# t23 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t23 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# None <= call lcd_write_char(t23,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })"] }
# 000cd Instruction { source: "Arg0[c]=t23 None <= call lcd_write_char(t23,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x00)], resolved: None }
0b 14 00 
# Registers used by this function: {20, 21}
# Registers used by callee tree: {16, 17, 18, 19}
# Registers to save: []
# 000d0 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 000d6 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c e0 00 00 00 
# 000dc Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 22 00 00 
# 000e0 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t24 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t24 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t25 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 000e6 Instruction { source: "t25 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x15), Constant8(0x01=1)], resolved: None }
04 15 01 
# ch <- t24 Add t25
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))"] }
# 000e9 Instruction { source: "ch <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x15), Register(0x14)], resolved: None }
14 14 15 14 
# goto main_while_predicate_3
# 	SourceContext { contexts: [] }
# 000ed Instruction { source: "goto main_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_3)], resolved: None }
70 bf 00 00 
# :main_while_end_5
# 	SourceContext { contexts: [] }
# main_while_end_5
# :inline_main_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 000f1 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x14)], resolved: None }
61 14 
# inline_main_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 000f3 Instruction { source: "inline_main_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x15), Constant8(0x08=8)], resolved: None }
04 15 08 
# inline_main_lcd_flush_1_t0 <- inline_main_lcd_flush_1_t1 BitwiseAnd inline_main_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 000f6 Instruction { source: "inline_main_lcd_flush_1_t0 <- inline_main_lcd_flush_1_t1 BitwiseAnd inline_main_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x14), Register(0x15), Register(0x14)], resolved: None }
1b 14 15 14 
# inline_main_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000fa Instruction { source: "inline_main_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x15), Constant8(0x00=0)], resolved: None }
04 15 00 
# if inline_main_lcd_flush_1_t0 != inline_main_lcd_flush_1_t3 then 'inline_main_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 000fd Instruction { source: "if inline_main_lcd_flush_1_t0 != inline_main_lcd_flush_1_t3 then 'inline_main_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x15)], resolved: None }
15 14 15 
# 00100 Instruction { source: "if inline_main_lcd_flush_1_t0 != inline_main_lcd_flush_1_t3 then 'inline_main_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 08 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_lcd_flush_1_t0 != inline_main_lcd_flush_1_t3 then 'inline_main_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00104 Instruction { source: "goto inline_main_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 f1 00 00 
# :inline_main_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_lcd_flush_1_function_end_lcd_flush
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 00108 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
