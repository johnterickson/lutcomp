v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 22 00 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :main
# Ret Some(U8)
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([18])
# Var inline_main_delay_0_n (Arg0 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_0_t0 (t0 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_0_t1 (t1 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_0_t2 (t2 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_0_t3 (t3 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_1_n (Arg0 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_1_t0 (t0 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_1_t1 (t1 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_1_t2 (t2 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_1_t3 (t3 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_2_n (Arg0 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_2_t0 (t0 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_2_t1 (t1 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_2_t2 (t2 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_2_t3 (t3 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_3_n (Arg0 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_3_t0 (t0 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_3_t1 (t1 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_3_t2 (t2 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_3_t3 (t3 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_4_n (Arg0 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_4_t0 (t0 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_4_t1 (t1 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_4_t2 (t2 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_4_t3 (t3 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_5_n (Arg0 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_5_t0 (t0 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_5_t1 (t1 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_5_t2 (t2 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_5_t3 (t3 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_6_n (Arg0 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_6_t0 (t0 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_6_t1 (t1 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_delay_6_t2 (t2 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_main_delay_6_t3 (t3 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_lcd_flush_8_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([18])
# Var inline_main_lcd_flush_8_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([18])
# Var inline_main_lcd_flush_8_t2 (t2 Number(U8, 8)) Reg(U8) Some([28])
# Var inline_main_lcd_flush_8_t3 (t3 Number(U8, 0)) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_10_c (Arg0 c Number(U8)) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t2 (t2 Number(U8, 8)) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t3 (t3 Number(U8, 0)) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_10_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([18])
# Var inline_main_lcd_write_char_10_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([18])
# Var inline_main_lcd_write_char_10_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_10_t11 (t11 Ident("c")) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_10_t12 (t12 Number(U8, 15)) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_10_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_10_t3 (t3 Number(U8, 128)) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_10_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_10_t5 (t5 Ident("c")) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_10_t6 (t6 Number(U8, 4)) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_10_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([18])
# Var inline_main_lcd_write_char_10_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_10_t9 (t9 Number(U8, 128)) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_9_c (Arg0 c Number(U8)) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t2 (t2 Number(U8, 8)) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t3 (t3 Number(U8, 0)) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_9_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([18])
# Var inline_main_lcd_write_char_9_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([18])
# Var inline_main_lcd_write_char_9_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_9_t11 (t11 Ident("c")) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_9_t12 (t12 Number(U8, 15)) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_9_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_9_t3 (t3 Number(U8, 128)) Reg(U8) Some([29])
# Var inline_main_lcd_write_char_9_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_9_t5 (t5 Ident("c")) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_9_t6 (t6 Number(U8, 4)) Reg(U8) Some([30])
# Var inline_main_lcd_write_char_9_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([18])
# Var inline_main_lcd_write_char_9_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([28])
# Var inline_main_lcd_write_char_9_t9 (t9 Number(U8, 128)) Reg(U8) Some([30])
# Var t0 (t0 Call(Call { function: "io_write0", parameters: [Number(U8, 104)] })) Reg(U8) Some([18])
# Var t1 (t1 Number(U8, 104)) Reg(U8) Some([18])
# Var t10 (t10 Call(Call { function: "delay", parameters: [Number(USIZE, 16)] })) Reg(U8) Some([18])
# Var t11 (t11 Number(USIZE, 16)) Reg(U32) Some([20, 21, 22, 23])
# Var t12 (t12 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([18])
# Var t13 (t13 Number(U8, 2)) Reg(U8) Some([18])
# Var t14 (t14 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([18])
# Var t15 (t15 Number(USIZE, 1)) Reg(U32) Some([20, 21, 22, 23])
# Var t16 (t16 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([18])
# Var t17 (t17 Number(U8, 2)) Reg(U8) Some([18])
# Var t18 (t18 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([18])
# Var t19 (t19 Number(U8, 8)) Reg(U8) Some([18])
# Var t2 (t2 Call(Call { function: "io_write0", parameters: [Number(U8, 105)] })) Reg(U8) Some([18])
# Var t20 (t20 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([18])
# Var t21 (t21 Number(USIZE, 1)) Reg(U32) Some([20, 21, 22, 23])
# Var t22 (t22 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([18])
# Var t23 (t23 Number(U8, 0)) Reg(U8) Some([18])
# Var t24 (t24 Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })) Reg(U8) Some([18])
# Var t25 (t25 Number(U8, 12)) Reg(U8) Some([18])
# Var t26 (t26 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([18])
# Var t27 (t27 Number(USIZE, 1)) Reg(U32) Some([20, 21, 22, 23])
# Var t28 (t28 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([18])
# Var t29 (t29 Number(U8, 0)) Reg(U8) Some([18])
# Var t3 (t3 Number(U8, 105)) Reg(U8) Some([18])
# Var t30 (t30 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([18])
# Var t31 (t31 Number(U8, 1)) Reg(U8) Some([18])
# Var t32 (t32 Call(Call { function: "delay", parameters: [Number(USIZE, 16)] })) Reg(U8) Some([18])
# Var t33 (t33 Number(USIZE, 16)) Reg(U32) Some([20, 21, 22, 23])
# Var t34 (t34 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([18])
# Var t35 (t35 Number(U8, 0)) Reg(U8) Some([18])
# Var t36 (t36 Call(Call { function: "io_write1", parameters: [Number(U8, 6)] })) Reg(U8) Some([18])
# Var t37 (t37 Number(U8, 6)) Reg(U8) Some([18])
# Var t38 (t38 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([18])
# Var t39 (t39 Number(USIZE, 1)) Reg(U32) Some([20, 21, 22, 23])
# Var t4 (t4 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([18])
# Var t40 (t40 Ident("ch")) Reg(U8) Some([18])
# Var t41 (t41 Number(U8, 122)) Reg(U8) Some([28])
# Var t42 (t42 Call(Call { function: "lcd_write_char", parameters: [Ident("ch")] })) Reg(U8) Some([18])
# Var t43 (t43 Ident("ch")) Reg(U8) Some([18])
# Var t44 (t44 Ident("ch")) Reg(U8) Some([18])
# Var t45 (t45 Number(U8, 1)) Reg(U8) Some([28])
# Var t46 (t46 Ident("ch")) Reg(U8) Some([18])
# Var t47 (t47 Number(U8, 90)) Reg(U8) Some([28])
# Var t48 (t48 Call(Call { function: "lcd_write_char", parameters: [Ident("ch")] })) Reg(U8) Some([18])
# Var t49 (t49 Ident("ch")) Reg(U8) Some([18])
# Var t5 (t5 Number(U8, 3)) Reg(U8) Some([18])
# Var t50 (t50 Ident("ch")) Reg(U8) Some([18])
# Var t51 (t51 Number(U8, 1)) Reg(U8) Some([28])
# Var t52 (t52 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([18])
# Var t6 (t6 Call(Call { function: "delay", parameters: [Number(USIZE, 16)] })) Reg(U8) Some([18])
# Var t7 (t7 Number(USIZE, 16)) Reg(U32) Some([20, 21, 22, 23])
# Var t8 (t8 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([18])
# Var t9 (t9 Number(U8, 3)) Reg(U8) Some([18])
# t1 <- 0n104/0x68u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Number(U8, 104)] }) }", "Call(Call { function: \"io_write0\", parameters: [Number(U8, 104)] })", "Call(Call { function: \"io_write0\", parameters: [Number(U8, 104)] })", "Number(U8, 104)", "Number(U8, 104)"] }
# 00022 Instruction { source: "t1 <- 0n104/0x68u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Number(U8, 104)] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Number(U8, 104)] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Number(U8, 104)] })\", \"Number(U8, 104)\", \"Number(U8, 104)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x68=104)], resolved: None }
04 12 68 
# None <= call io_write0(t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Number(U8, 104)] }) }", "Call(Call { function: \"io_write0\", parameters: [Number(U8, 104)] })", "Call(Call { function: \"io_write0\", parameters: [Number(U8, 104)] })"] }
# 00025 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x12)], resolved: None }
68 12 
# t3 <- 0n105/0x69u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Number(U8, 105)] }) }", "Call(Call { function: \"io_write0\", parameters: [Number(U8, 105)] })", "Call(Call { function: \"io_write0\", parameters: [Number(U8, 105)] })", "Number(U8, 105)", "Number(U8, 105)"] }
# 00027 Instruction { source: "t3 <- 0n105/0x69u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Number(U8, 105)] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Number(U8, 105)] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Number(U8, 105)] })\", \"Number(U8, 105)\", \"Number(U8, 105)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x69=105)], resolved: None }
04 12 69 
# None <= call io_write0(t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Number(U8, 105)] }) }", "Call(Call { function: \"io_write0\", parameters: [Number(U8, 105)] })", "Call(Call { function: \"io_write0\", parameters: [Number(U8, 105)] })"] }
# 0002a Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x12)], resolved: None }
68 12 
# t5 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 0002c Instruction { source: "t5 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x03=3)], resolved: None }
04 12 03 
# None <= call io_write1(t5,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 0002f Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t7 <- 0n16/0x00000010u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Number(USIZE, 16)", "Number(USIZE, 16)"] }
# 00031 Instruction { source: "t7 <- 0n16/0x00000010u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Number(USIZE, 16)\", \"Number(USIZE, 16)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000010=16)], resolved: None }
20 14 10 00 00 00 
# inline_main_delay_0_n <- t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })"] }
# optimized away noop copy Instruction { source: "inline_main_delay_0_n <- t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# :inline_main_delay_0_delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_0_delay_while_predicate_0
# inline_main_delay_0_t0 <- inline_main_delay_0_n U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_0_t0 <- inline_main_delay_0_n U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_0_t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00037 Instruction { source: "inline_main_delay_0_t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# if inline_main_delay_0_t0 != inline_main_delay_0_t1 then 'inline_main_delay_0_delay_while_body_1' else 'inline_main_delay_0_delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }"] }
# 0003d Instruction { source: "if inline_main_delay_0_t0 != inline_main_delay_0_t1 then 'inline_main_delay_0_delay_while_body_1' else 'inline_main_delay_0_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x17), Register(0x1b)], resolved: None }
15 17 1b 
# 00040 Instruction { source: "if inline_main_delay_0_t0 != inline_main_delay_0_t1 then 'inline_main_delay_0_delay_while_body_1' else 'inline_main_delay_0_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x16), Register(0x1a)], resolved: None }
16 16 1a 
# 00043 Instruction { source: "if inline_main_delay_0_t0 != inline_main_delay_0_t1 then 'inline_main_delay_0_delay_while_body_1' else 'inline_main_delay_0_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x15), Register(0x19)], resolved: None }
16 15 19 
# 00046 Instruction { source: "if inline_main_delay_0_t0 != inline_main_delay_0_t1 then 'inline_main_delay_0_delay_while_body_1' else 'inline_main_delay_0_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x14), Register(0x18)], resolved: None }
16 14 18 
# 00049 Instruction { source: "if inline_main_delay_0_t0 != inline_main_delay_0_t1 then 'inline_main_delay_0_delay_while_body_1' else 'inline_main_delay_0_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_delay_0_delay_while_end_2)], resolved: None }
72 6e 00 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_delay_0_t0 != inline_main_delay_0_t1 then 'inline_main_delay_0_delay_while_body_1' else 'inline_main_delay_0_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_0_delay_while_body_1)], resolved: None }
# :inline_main_delay_0_delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_0_delay_while_body_1
# inline_main_delay_0_t2 <- inline_main_delay_0_n U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_0_t2 <- inline_main_delay_0_n U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_0_t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0004d Instruction { source: "inline_main_delay_0_t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))"] }
# 00053 Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x00)], resolved: None }
21 18 00 
# 00056 Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00058 Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 0005a Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 0005c Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 0005e Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00064 Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00065 Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
30 14 00 14 
# 00069 Instruction { source: "inline_main_delay_0_n <- inline_main_delay_0_t2 Subtract inline_main_delay_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_main_delay_0_delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 0006a Instruction { source: "goto inline_main_delay_0_delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_delay_0_delay_while_predicate_0)], resolved: None }
70 37 00 00 
# :inline_main_delay_0_delay_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_delay_0_delay_while_end_2
# goto inline_main_delay_0_function_end_delay
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_delay_0_function_end_delay\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_0_function_end_delay)], resolved: None }
# :inline_main_delay_0_function_end_delay
# 	SourceContext { contexts: [] }
# inline_main_delay_0_function_end_delay
# t9 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 0006e Instruction { source: "t9 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x03=3)], resolved: None }
04 12 03 
# None <= call io_write1(t9,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 00071 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t11 <- 0n16/0x00000010u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Number(USIZE, 16)", "Number(USIZE, 16)"] }
# 00073 Instruction { source: "t11 <- 0n16/0x00000010u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Number(USIZE, 16)\", \"Number(USIZE, 16)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000010=16)], resolved: None }
20 14 10 00 00 00 
# inline_main_delay_1_n <- t11 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })"] }
# optimized away noop copy Instruction { source: "inline_main_delay_1_n <- t11 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# :inline_main_delay_1_delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_1_delay_while_predicate_0
# inline_main_delay_1_t0 <- inline_main_delay_1_n U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_1_t0 <- inline_main_delay_1_n U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_1_t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00079 Instruction { source: "inline_main_delay_1_t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# if inline_main_delay_1_t0 != inline_main_delay_1_t1 then 'inline_main_delay_1_delay_while_body_1' else 'inline_main_delay_1_delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }"] }
# 0007f Instruction { source: "if inline_main_delay_1_t0 != inline_main_delay_1_t1 then 'inline_main_delay_1_delay_while_body_1' else 'inline_main_delay_1_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x17), Register(0x1b)], resolved: None }
15 17 1b 
# 00082 Instruction { source: "if inline_main_delay_1_t0 != inline_main_delay_1_t1 then 'inline_main_delay_1_delay_while_body_1' else 'inline_main_delay_1_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x16), Register(0x1a)], resolved: None }
16 16 1a 
# 00085 Instruction { source: "if inline_main_delay_1_t0 != inline_main_delay_1_t1 then 'inline_main_delay_1_delay_while_body_1' else 'inline_main_delay_1_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x15), Register(0x19)], resolved: None }
16 15 19 
# 00088 Instruction { source: "if inline_main_delay_1_t0 != inline_main_delay_1_t1 then 'inline_main_delay_1_delay_while_body_1' else 'inline_main_delay_1_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x14), Register(0x18)], resolved: None }
16 14 18 
# 0008b Instruction { source: "if inline_main_delay_1_t0 != inline_main_delay_1_t1 then 'inline_main_delay_1_delay_while_body_1' else 'inline_main_delay_1_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_delay_1_delay_while_end_2)], resolved: None }
72 b0 00 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_delay_1_t0 != inline_main_delay_1_t1 then 'inline_main_delay_1_delay_while_body_1' else 'inline_main_delay_1_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_1_delay_while_body_1)], resolved: None }
# :inline_main_delay_1_delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_1_delay_while_body_1
# inline_main_delay_1_t2 <- inline_main_delay_1_n U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_1_t2 <- inline_main_delay_1_n U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_1_t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0008f Instruction { source: "inline_main_delay_1_t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))"] }
# 00095 Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x00)], resolved: None }
21 18 00 
# 00098 Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 0009a Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 0009c Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 0009e Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 000a0 Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 000a6 Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000a7 Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
30 14 00 14 
# 000ab Instruction { source: "inline_main_delay_1_n <- inline_main_delay_1_t2 Subtract inline_main_delay_1_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_main_delay_1_delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 000ac Instruction { source: "goto inline_main_delay_1_delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_delay_1_delay_while_predicate_0)], resolved: None }
70 79 00 00 
# :inline_main_delay_1_delay_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_delay_1_delay_while_end_2
# goto inline_main_delay_1_function_end_delay
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_delay_1_function_end_delay\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_1_function_end_delay)], resolved: None }
# :inline_main_delay_1_function_end_delay
# 	SourceContext { contexts: [] }
# inline_main_delay_1_function_end_delay
# t13 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 000b0 Instruction { source: "t13 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x02=2)], resolved: None }
04 12 02 
# None <= call io_write1(t13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 000b3 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t15 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 000b5 Instruction { source: "t15 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000001=1)], resolved: None }
20 14 01 00 00 00 
# inline_main_delay_2_n <- t15 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# optimized away noop copy Instruction { source: "inline_main_delay_2_n <- t15 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# :inline_main_delay_2_delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_2_delay_while_predicate_0
# inline_main_delay_2_t0 <- inline_main_delay_2_n U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_2_t0 <- inline_main_delay_2_n U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_2_t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 000bb Instruction { source: "inline_main_delay_2_t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# if inline_main_delay_2_t0 != inline_main_delay_2_t1 then 'inline_main_delay_2_delay_while_body_1' else 'inline_main_delay_2_delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }"] }
# 000c1 Instruction { source: "if inline_main_delay_2_t0 != inline_main_delay_2_t1 then 'inline_main_delay_2_delay_while_body_1' else 'inline_main_delay_2_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x17), Register(0x1b)], resolved: None }
15 17 1b 
# 000c4 Instruction { source: "if inline_main_delay_2_t0 != inline_main_delay_2_t1 then 'inline_main_delay_2_delay_while_body_1' else 'inline_main_delay_2_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x16), Register(0x1a)], resolved: None }
16 16 1a 
# 000c7 Instruction { source: "if inline_main_delay_2_t0 != inline_main_delay_2_t1 then 'inline_main_delay_2_delay_while_body_1' else 'inline_main_delay_2_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x15), Register(0x19)], resolved: None }
16 15 19 
# 000ca Instruction { source: "if inline_main_delay_2_t0 != inline_main_delay_2_t1 then 'inline_main_delay_2_delay_while_body_1' else 'inline_main_delay_2_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x14), Register(0x18)], resolved: None }
16 14 18 
# 000cd Instruction { source: "if inline_main_delay_2_t0 != inline_main_delay_2_t1 then 'inline_main_delay_2_delay_while_body_1' else 'inline_main_delay_2_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_delay_2_delay_while_end_2)], resolved: None }
72 f2 00 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_delay_2_t0 != inline_main_delay_2_t1 then 'inline_main_delay_2_delay_while_body_1' else 'inline_main_delay_2_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_2_delay_while_body_1)], resolved: None }
# :inline_main_delay_2_delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_2_delay_while_body_1
# inline_main_delay_2_t2 <- inline_main_delay_2_n U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_2_t2 <- inline_main_delay_2_n U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_2_t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 000d1 Instruction { source: "inline_main_delay_2_t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))"] }
# 000d7 Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x00)], resolved: None }
21 18 00 
# 000da Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 000dc Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 000de Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 000e0 Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 000e2 Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 000e8 Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000e9 Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
30 14 00 14 
# 000ed Instruction { source: "inline_main_delay_2_n <- inline_main_delay_2_t2 Subtract inline_main_delay_2_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_main_delay_2_delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 000ee Instruction { source: "goto inline_main_delay_2_delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_delay_2_delay_while_predicate_0)], resolved: None }
70 bb 00 00 
# :inline_main_delay_2_delay_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_delay_2_delay_while_end_2
# goto inline_main_delay_2_function_end_delay
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_delay_2_function_end_delay\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_2_function_end_delay)], resolved: None }
# :inline_main_delay_2_function_end_delay
# 	SourceContext { contexts: [] }
# inline_main_delay_2_function_end_delay
# t17 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 000f2 Instruction { source: "t17 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x02=2)], resolved: None }
04 12 02 
# None <= call io_write1(t17,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 000f5 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t19 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Number(U8, 8)", "Number(U8, 8)"] }
# 000f7 Instruction { source: "t19 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x08=8)], resolved: None }
04 12 08 
# None <= call io_write1(t19,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })"] }
# 000fa Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t21 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 000fc Instruction { source: "t21 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000001=1)], resolved: None }
20 14 01 00 00 00 
# inline_main_delay_3_n <- t21 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# optimized away noop copy Instruction { source: "inline_main_delay_3_n <- t21 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# :inline_main_delay_3_delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_3_delay_while_predicate_0
# inline_main_delay_3_t0 <- inline_main_delay_3_n U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_3_t0 <- inline_main_delay_3_n U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_3_t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00102 Instruction { source: "inline_main_delay_3_t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# if inline_main_delay_3_t0 != inline_main_delay_3_t1 then 'inline_main_delay_3_delay_while_body_1' else 'inline_main_delay_3_delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }"] }
# 00108 Instruction { source: "if inline_main_delay_3_t0 != inline_main_delay_3_t1 then 'inline_main_delay_3_delay_while_body_1' else 'inline_main_delay_3_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x17), Register(0x1b)], resolved: None }
15 17 1b 
# 0010b Instruction { source: "if inline_main_delay_3_t0 != inline_main_delay_3_t1 then 'inline_main_delay_3_delay_while_body_1' else 'inline_main_delay_3_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x16), Register(0x1a)], resolved: None }
16 16 1a 
# 0010e Instruction { source: "if inline_main_delay_3_t0 != inline_main_delay_3_t1 then 'inline_main_delay_3_delay_while_body_1' else 'inline_main_delay_3_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x15), Register(0x19)], resolved: None }
16 15 19 
# 00111 Instruction { source: "if inline_main_delay_3_t0 != inline_main_delay_3_t1 then 'inline_main_delay_3_delay_while_body_1' else 'inline_main_delay_3_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x14), Register(0x18)], resolved: None }
16 14 18 
# 00114 Instruction { source: "if inline_main_delay_3_t0 != inline_main_delay_3_t1 then 'inline_main_delay_3_delay_while_body_1' else 'inline_main_delay_3_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_delay_3_delay_while_end_2)], resolved: None }
72 39 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_delay_3_t0 != inline_main_delay_3_t1 then 'inline_main_delay_3_delay_while_body_1' else 'inline_main_delay_3_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_3_delay_while_body_1)], resolved: None }
# :inline_main_delay_3_delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_3_delay_while_body_1
# inline_main_delay_3_t2 <- inline_main_delay_3_n U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_3_t2 <- inline_main_delay_3_n U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_3_t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00118 Instruction { source: "inline_main_delay_3_t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))"] }
# 0011e Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x00)], resolved: None }
21 18 00 
# 00121 Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00123 Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00125 Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00127 Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00129 Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 0012f Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00130 Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
30 14 00 14 
# 00134 Instruction { source: "inline_main_delay_3_n <- inline_main_delay_3_t2 Subtract inline_main_delay_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_main_delay_3_delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 00135 Instruction { source: "goto inline_main_delay_3_delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_delay_3_delay_while_predicate_0)], resolved: None }
70 02 01 00 
# :inline_main_delay_3_delay_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_delay_3_delay_while_end_2
# goto inline_main_delay_3_function_end_delay
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_delay_3_function_end_delay\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_3_function_end_delay)], resolved: None }
# :inline_main_delay_3_function_end_delay
# 	SourceContext { contexts: [] }
# inline_main_delay_3_function_end_delay
# t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 00139 Instruction { source: "t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x00=0)], resolved: None }
04 12 00 
# None <= call io_write1(t23,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 0013c Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t25 <- 0n12/0x0cu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Number(U8, 12)", "Number(U8, 12)"] }
# 0013e Instruction { source: "t25 <- 0n12/0x0cu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] })\", \"Number(U8, 12)\", \"Number(U8, 12)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x0c=12)], resolved: None }
04 12 0c 
# None <= call io_write1(t25,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })"] }
# 00141 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t27 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00143 Instruction { source: "t27 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000001=1)], resolved: None }
20 14 01 00 00 00 
# inline_main_delay_4_n <- t27 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# optimized away noop copy Instruction { source: "inline_main_delay_4_n <- t27 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# :inline_main_delay_4_delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_4_delay_while_predicate_0
# inline_main_delay_4_t0 <- inline_main_delay_4_n U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_4_t0 <- inline_main_delay_4_n U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_4_t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00149 Instruction { source: "inline_main_delay_4_t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# if inline_main_delay_4_t0 != inline_main_delay_4_t1 then 'inline_main_delay_4_delay_while_body_1' else 'inline_main_delay_4_delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }"] }
# 0014f Instruction { source: "if inline_main_delay_4_t0 != inline_main_delay_4_t1 then 'inline_main_delay_4_delay_while_body_1' else 'inline_main_delay_4_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x17), Register(0x1b)], resolved: None }
15 17 1b 
# 00152 Instruction { source: "if inline_main_delay_4_t0 != inline_main_delay_4_t1 then 'inline_main_delay_4_delay_while_body_1' else 'inline_main_delay_4_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x16), Register(0x1a)], resolved: None }
16 16 1a 
# 00155 Instruction { source: "if inline_main_delay_4_t0 != inline_main_delay_4_t1 then 'inline_main_delay_4_delay_while_body_1' else 'inline_main_delay_4_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x15), Register(0x19)], resolved: None }
16 15 19 
# 00158 Instruction { source: "if inline_main_delay_4_t0 != inline_main_delay_4_t1 then 'inline_main_delay_4_delay_while_body_1' else 'inline_main_delay_4_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x14), Register(0x18)], resolved: None }
16 14 18 
# 0015b Instruction { source: "if inline_main_delay_4_t0 != inline_main_delay_4_t1 then 'inline_main_delay_4_delay_while_body_1' else 'inline_main_delay_4_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_delay_4_delay_while_end_2)], resolved: None }
72 80 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_delay_4_t0 != inline_main_delay_4_t1 then 'inline_main_delay_4_delay_while_body_1' else 'inline_main_delay_4_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_4_delay_while_body_1)], resolved: None }
# :inline_main_delay_4_delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_4_delay_while_body_1
# inline_main_delay_4_t2 <- inline_main_delay_4_n U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_4_t2 <- inline_main_delay_4_n U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_4_t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0015f Instruction { source: "inline_main_delay_4_t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))"] }
# 00165 Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x00)], resolved: None }
21 18 00 
# 00168 Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 0016a Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 0016c Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 0016e Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00170 Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00176 Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00177 Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
30 14 00 14 
# 0017b Instruction { source: "inline_main_delay_4_n <- inline_main_delay_4_t2 Subtract inline_main_delay_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_main_delay_4_delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 0017c Instruction { source: "goto inline_main_delay_4_delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_delay_4_delay_while_predicate_0)], resolved: None }
70 49 01 00 
# :inline_main_delay_4_delay_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_delay_4_delay_while_end_2
# goto inline_main_delay_4_function_end_delay
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_delay_4_function_end_delay\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_4_function_end_delay)], resolved: None }
# :inline_main_delay_4_function_end_delay
# 	SourceContext { contexts: [] }
# inline_main_delay_4_function_end_delay
# t29 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 00180 Instruction { source: "t29 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x00=0)], resolved: None }
04 12 00 
# None <= call io_write1(t29,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 00183 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t31 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Number(U8, 1)", "Number(U8, 1)"] }
# 00185 Instruction { source: "t31 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x01=1)], resolved: None }
04 12 01 
# None <= call io_write1(t31,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })"] }
# 00188 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t33 <- 0n16/0x00000010u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Number(USIZE, 16)", "Number(USIZE, 16)"] }
# 0018a Instruction { source: "t33 <- 0n16/0x00000010u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Number(USIZE, 16)\", \"Number(USIZE, 16)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000010=16)], resolved: None }
20 14 10 00 00 00 
# inline_main_delay_5_n <- t33 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 16)] })"] }
# optimized away noop copy Instruction { source: "inline_main_delay_5_n <- t33 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 16)] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# :inline_main_delay_5_delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_5_delay_while_predicate_0
# inline_main_delay_5_t0 <- inline_main_delay_5_n U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_5_t0 <- inline_main_delay_5_n U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_5_t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00190 Instruction { source: "inline_main_delay_5_t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# if inline_main_delay_5_t0 != inline_main_delay_5_t1 then 'inline_main_delay_5_delay_while_body_1' else 'inline_main_delay_5_delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }"] }
# 00196 Instruction { source: "if inline_main_delay_5_t0 != inline_main_delay_5_t1 then 'inline_main_delay_5_delay_while_body_1' else 'inline_main_delay_5_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x17), Register(0x1b)], resolved: None }
15 17 1b 
# 00199 Instruction { source: "if inline_main_delay_5_t0 != inline_main_delay_5_t1 then 'inline_main_delay_5_delay_while_body_1' else 'inline_main_delay_5_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x16), Register(0x1a)], resolved: None }
16 16 1a 
# 0019c Instruction { source: "if inline_main_delay_5_t0 != inline_main_delay_5_t1 then 'inline_main_delay_5_delay_while_body_1' else 'inline_main_delay_5_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x15), Register(0x19)], resolved: None }
16 15 19 
# 0019f Instruction { source: "if inline_main_delay_5_t0 != inline_main_delay_5_t1 then 'inline_main_delay_5_delay_while_body_1' else 'inline_main_delay_5_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x14), Register(0x18)], resolved: None }
16 14 18 
# 001a2 Instruction { source: "if inline_main_delay_5_t0 != inline_main_delay_5_t1 then 'inline_main_delay_5_delay_while_body_1' else 'inline_main_delay_5_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_delay_5_delay_while_end_2)], resolved: None }
72 c7 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_delay_5_t0 != inline_main_delay_5_t1 then 'inline_main_delay_5_delay_while_body_1' else 'inline_main_delay_5_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_5_delay_while_body_1)], resolved: None }
# :inline_main_delay_5_delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_5_delay_while_body_1
# inline_main_delay_5_t2 <- inline_main_delay_5_n U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_5_t2 <- inline_main_delay_5_n U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_5_t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 001a6 Instruction { source: "inline_main_delay_5_t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))"] }
# 001ac Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x00)], resolved: None }
21 18 00 
# 001af Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 001b1 Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 001b3 Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 001b5 Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 001b7 Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 001bd Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001be Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
30 14 00 14 
# 001c2 Instruction { source: "inline_main_delay_5_n <- inline_main_delay_5_t2 Subtract inline_main_delay_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_main_delay_5_delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 001c3 Instruction { source: "goto inline_main_delay_5_delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_delay_5_delay_while_predicate_0)], resolved: None }
70 90 01 00 
# :inline_main_delay_5_delay_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_delay_5_delay_while_end_2
# goto inline_main_delay_5_function_end_delay
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_delay_5_function_end_delay\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_5_function_end_delay)], resolved: None }
# :inline_main_delay_5_function_end_delay
# 	SourceContext { contexts: [] }
# inline_main_delay_5_function_end_delay
# t35 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 001c7 Instruction { source: "t35 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x00=0)], resolved: None }
04 12 00 
# None <= call io_write1(t35,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 001ca Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t37 <- 0n6/0x06u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 6)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 6)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 6)] })", "Number(U8, 6)", "Number(U8, 6)"] }
# 001cc Instruction { source: "t37 <- 0n6/0x06u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 6)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 6)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 6)] })\", \"Number(U8, 6)\", \"Number(U8, 6)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x06=6)], resolved: None }
04 12 06 
# None <= call io_write1(t37,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 6)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 6)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 6)] })"] }
# 001cf Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x12)], resolved: None }
69 12 
# t39 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 001d1 Instruction { source: "t39 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000001=1)], resolved: None }
20 14 01 00 00 00 
# inline_main_delay_6_n <- t39 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# optimized away noop copy Instruction { source: "inline_main_delay_6_n <- t39 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# :inline_main_delay_6_delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_6_delay_while_predicate_0
# inline_main_delay_6_t0 <- inline_main_delay_6_n U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_6_t0 <- inline_main_delay_6_n U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_6_t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 001d7 Instruction { source: "inline_main_delay_6_t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# if inline_main_delay_6_t0 != inline_main_delay_6_t1 then 'inline_main_delay_6_delay_while_body_1' else 'inline_main_delay_6_delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }"] }
# 001dd Instruction { source: "if inline_main_delay_6_t0 != inline_main_delay_6_t1 then 'inline_main_delay_6_delay_while_body_1' else 'inline_main_delay_6_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x17), Register(0x1b)], resolved: None }
15 17 1b 
# 001e0 Instruction { source: "if inline_main_delay_6_t0 != inline_main_delay_6_t1 then 'inline_main_delay_6_delay_while_body_1' else 'inline_main_delay_6_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x16), Register(0x1a)], resolved: None }
16 16 1a 
# 001e3 Instruction { source: "if inline_main_delay_6_t0 != inline_main_delay_6_t1 then 'inline_main_delay_6_delay_while_body_1' else 'inline_main_delay_6_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x15), Register(0x19)], resolved: None }
16 15 19 
# 001e6 Instruction { source: "if inline_main_delay_6_t0 != inline_main_delay_6_t1 then 'inline_main_delay_6_delay_while_body_1' else 'inline_main_delay_6_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x14), Register(0x18)], resolved: None }
16 14 18 
# 001e9 Instruction { source: "if inline_main_delay_6_t0 != inline_main_delay_6_t1 then 'inline_main_delay_6_delay_while_body_1' else 'inline_main_delay_6_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_delay_6_delay_while_end_2)], resolved: None }
72 0e 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_delay_6_t0 != inline_main_delay_6_t1 then 'inline_main_delay_6_delay_while_body_1' else 'inline_main_delay_6_delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"n\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_6_delay_while_body_1)], resolved: None }
# :inline_main_delay_6_delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }] }"] }
# inline_main_delay_6_delay_while_body_1
# inline_main_delay_6_t2 <- inline_main_delay_6_n U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_delay_6_t2 <- inline_main_delay_6_n U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_delay_6_t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 001ed Instruction { source: "inline_main_delay_6_t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"n\"), Number(USIZE, 1))"] }
# 001f3 Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x00)], resolved: None }
21 18 00 
# 001f6 Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 001f8 Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 001fa Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 001fc Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 001fe Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00204 Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00205 Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
30 14 00 14 
# 00209 Instruction { source: "inline_main_delay_6_n <- inline_main_delay_6_t2 Subtract inline_main_delay_6_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"n\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"n\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_main_delay_6_delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 0020a Instruction { source: "goto inline_main_delay_6_delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_delay_6_delay_while_predicate_0)], resolved: None }
70 d7 01 00 
# :inline_main_delay_6_delay_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_delay_6_delay_while_end_2
# goto inline_main_delay_6_function_end_delay
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_delay_6_function_end_delay\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_delay_6_function_end_delay)], resolved: None }
# :inline_main_delay_6_function_end_delay
# 	SourceContext { contexts: [] }
# inline_main_delay_6_function_end_delay
# ch <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 97) }", "Number(U8, 97)"] }
# 0020e Instruction { source: "ch <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 97) }\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x61=97)], resolved: None }
04 12 61 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }"] }
# main_while_predicate_0
# t40 <- ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t40 <- ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# t41 <- 0n122/0x7au8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }", "Number(U8, 122)", "Number(U8, 122)"] }
# 00211 Instruction { source: "t41 <- 0n122/0x7au8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\", \"Number(U8, 122)\", \"Number(U8, 122)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x7a=122)], resolved: None }
04 1c 7a 
# if t40 <= t41 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }"] }
# 00214 Instruction { source: "if t40 <= t41 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\"] }", opcode: Cmp8, args: [Register(0x12), Register(0x1c)], resolved: None }
15 12 1c 
# 00217 Instruction { source: "if t40 <= t41 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\"] }", opcode: JcImm, args: [Label24(main_while_body_1)], resolved: None }
71 1f 02 00 
# 0021b Instruction { source: "if t40 <= t41 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 122) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 65 02 00 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 122) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }"] }
# main_while_body_1
# t43 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t43 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# inline_main_lcd_write_char_9_c <- t43 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })"] }
# 0021f Instruction { source: "inline_main_lcd_write_char_9_c <- t43 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x12), Register(0x1c)], resolved: None }
0b 12 1c 
# :inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0
# Some(inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00222 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x1d)], resolved: None }
61 1d 
# inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00224 Instruction { source: "inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x08=8)], resolved: None }
04 1e 08 
# inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t0 <- inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t1 BitwiseAnd inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00227 Instruction { source: "inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t0 <- inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t1 BitwiseAnd inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
1b 1d 1e 1d 
# inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0022b Instruction { source: "inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x00=0)], resolved: None }
04 1e 00 
# if inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t0 != inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t3 then 'inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1' else 'inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 0022e Instruction { source: "if inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t0 != inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t3 then 'inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1' else 'inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x1e)], resolved: None }
15 1d 1e 
# 00231 Instruction { source: "if inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t0 != inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t3 then 'inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1' else 'inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2)], resolved: None }
72 39 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t0 != inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_t3 then 'inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1' else 'inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1)], resolved: None }
# :inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1
# goto inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00235 Instruction { source: "goto inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0)], resolved: None }
70 22 02 00 
# :inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2
# goto inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush)], resolved: None }
# :inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_lcd_write_char_9_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush
# inline_main_lcd_write_char_9_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00239 Instruction { source: "inline_main_lcd_write_char_9_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x80=128)], resolved: None }
04 1d 80 
# inline_main_lcd_write_char_9_t5 <- inline_main_lcd_write_char_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_lcd_write_char_9_t5 <- inline_main_lcd_write_char_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_lcd_write_char_9_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 0023c Instruction { source: "inline_main_lcd_write_char_9_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x04=4)], resolved: None }
04 1e 04 
# inline_main_lcd_write_char_9_t4 <- inline_main_lcd_write_char_9_t5 ShiftRight inline_main_lcd_write_char_9_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 0023f Instruction { source: "inline_main_lcd_write_char_9_t4 <- inline_main_lcd_write_char_9_t5 ShiftRight inline_main_lcd_write_char_9_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x1e), Register(0x1c), Register(0x1e)], resolved: None }
1e 05 1e 1c 1e 
# inline_main_lcd_write_char_9_t2 <- inline_main_lcd_write_char_9_t3 BitwiseOr inline_main_lcd_write_char_9_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00244 Instruction { source: "inline_main_lcd_write_char_9_t2 <- inline_main_lcd_write_char_9_t3 BitwiseOr inline_main_lcd_write_char_9_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
1c 1d 1e 1d 
# None <= call io_write1(inline_main_lcd_write_char_9_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00248 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x1d)], resolved: None }
69 1d 
# inline_main_lcd_write_char_9_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0024a Instruction { source: "inline_main_lcd_write_char_9_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x80=128)], resolved: None }
04 1e 80 
# inline_main_lcd_write_char_9_t11 <- inline_main_lcd_write_char_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_lcd_write_char_9_t11 <- inline_main_lcd_write_char_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_lcd_write_char_9_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 0024d Instruction { source: "inline_main_lcd_write_char_9_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0f=15)], resolved: None }
04 1d 0f 
# inline_main_lcd_write_char_9_t10 <- inline_main_lcd_write_char_9_t11 BitwiseAnd inline_main_lcd_write_char_9_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00250 Instruction { source: "inline_main_lcd_write_char_9_t10 <- inline_main_lcd_write_char_9_t11 BitwiseAnd inline_main_lcd_write_char_9_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
1b 1c 1d 1c 
# inline_main_lcd_write_char_9_t8 <- inline_main_lcd_write_char_9_t9 BitwiseOr inline_main_lcd_write_char_9_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00254 Instruction { source: "inline_main_lcd_write_char_9_t8 <- inline_main_lcd_write_char_9_t9 BitwiseOr inline_main_lcd_write_char_9_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x1e), Register(0x1c), Register(0x1c)], resolved: None }
1c 1e 1c 1c 
# None <= call io_write1(inline_main_lcd_write_char_9_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00258 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x1c)], resolved: None }
69 1c 
# goto inline_main_lcd_write_char_9_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_lcd_write_char_9_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_write_char_9_function_end_lcd_write_char)], resolved: None }
# :inline_main_lcd_write_char_9_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_lcd_write_char_9_function_end_lcd_write_char
# t44 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t44 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# t45 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 0025a Instruction { source: "t45 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x01=1)], resolved: None }
04 1c 01 
# ch <- t44 Add t45
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))"] }
# 0025d Instruction { source: "ch <- t44 Add t45\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x12), Register(0x1c), Register(0x12)], resolved: None }
14 12 1c 12 
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 00261 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 11 02 00 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# ch <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Number(U8, 65) }", "Number(U8, 65)"] }
# 00265 Instruction { source: "ch <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Number(U8, 65) }\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x41=65)], resolved: None }
04 12 41 
# :main_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }"] }
# main_while_predicate_3
# t46 <- ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t46 <- ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# t47 <- 0n90/0x5au8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }", "Number(U8, 90)", "Number(U8, 90)"] }
# 00268 Instruction { source: "t47 <- 0n90/0x5au8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\", \"Number(U8, 90)\", \"Number(U8, 90)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x5a=90)], resolved: None }
04 1c 5a 
# if t46 <= t47 then 'main_while_body_4' else 'main_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }"] }
# 0026b Instruction { source: "if t46 <= t47 then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\"] }", opcode: Cmp8, args: [Register(0x12), Register(0x1c)], resolved: None }
15 12 1c 
# 0026e Instruction { source: "if t46 <= t47 then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\"] }", opcode: JcImm, args: [Label24(main_while_body_4)], resolved: None }
71 76 02 00 
# 00272 Instruction { source: "if t46 <= t47 then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 90) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_5)], resolved: None }
70 bc 02 00 
# :main_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 90) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }] }"] }
# main_while_body_4
# t49 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t49 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# inline_main_lcd_write_char_10_c <- t49 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })"] }
# 00276 Instruction { source: "inline_main_lcd_write_char_10_c <- t49 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x12), Register(0x1c)], resolved: None }
0b 12 1c 
# :inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0
# Some(inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00279 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x1d)], resolved: None }
61 1d 
# inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 0027b Instruction { source: "inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x08=8)], resolved: None }
04 1e 08 
# inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t0 <- inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t1 BitwiseAnd inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 0027e Instruction { source: "inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t0 <- inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t1 BitwiseAnd inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
1b 1d 1e 1d 
# inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00282 Instruction { source: "inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x00=0)], resolved: None }
04 1e 00 
# if inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t0 != inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t3 then 'inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1' else 'inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00285 Instruction { source: "if inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t0 != inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t3 then 'inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1' else 'inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x1e)], resolved: None }
15 1d 1e 
# 00288 Instruction { source: "if inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t0 != inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t3 then 'inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1' else 'inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2)], resolved: None }
72 90 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t0 != inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_t3 then 'inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1' else 'inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1)], resolved: None }
# :inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_body_1
# goto inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0028c Instruction { source: "goto inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_predicate_0)], resolved: None }
70 79 02 00 
# :inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_lcd_flush_while_end_2
# goto inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush)], resolved: None }
# :inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_lcd_write_char_10_inline_lcd_write_char_lcd_flush_7_function_end_lcd_flush
# inline_main_lcd_write_char_10_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00290 Instruction { source: "inline_main_lcd_write_char_10_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x80=128)], resolved: None }
04 1d 80 
# inline_main_lcd_write_char_10_t5 <- inline_main_lcd_write_char_10_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_lcd_write_char_10_t5 <- inline_main_lcd_write_char_10_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_lcd_write_char_10_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00293 Instruction { source: "inline_main_lcd_write_char_10_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x04=4)], resolved: None }
04 1e 04 
# inline_main_lcd_write_char_10_t4 <- inline_main_lcd_write_char_10_t5 ShiftRight inline_main_lcd_write_char_10_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00296 Instruction { source: "inline_main_lcd_write_char_10_t4 <- inline_main_lcd_write_char_10_t5 ShiftRight inline_main_lcd_write_char_10_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x1e), Register(0x1c), Register(0x1e)], resolved: None }
1e 05 1e 1c 1e 
# inline_main_lcd_write_char_10_t2 <- inline_main_lcd_write_char_10_t3 BitwiseOr inline_main_lcd_write_char_10_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 0029b Instruction { source: "inline_main_lcd_write_char_10_t2 <- inline_main_lcd_write_char_10_t3 BitwiseOr inline_main_lcd_write_char_10_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
1c 1d 1e 1d 
# None <= call io_write1(inline_main_lcd_write_char_10_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 0029f Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x1d)], resolved: None }
69 1d 
# inline_main_lcd_write_char_10_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 002a1 Instruction { source: "inline_main_lcd_write_char_10_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x80=128)], resolved: None }
04 1e 80 
# inline_main_lcd_write_char_10_t11 <- inline_main_lcd_write_char_10_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_lcd_write_char_10_t11 <- inline_main_lcd_write_char_10_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_lcd_write_char_10_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 002a4 Instruction { source: "inline_main_lcd_write_char_10_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0f=15)], resolved: None }
04 1d 0f 
# inline_main_lcd_write_char_10_t10 <- inline_main_lcd_write_char_10_t11 BitwiseAnd inline_main_lcd_write_char_10_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 002a7 Instruction { source: "inline_main_lcd_write_char_10_t10 <- inline_main_lcd_write_char_10_t11 BitwiseAnd inline_main_lcd_write_char_10_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
1b 1c 1d 1c 
# inline_main_lcd_write_char_10_t8 <- inline_main_lcd_write_char_10_t9 BitwiseOr inline_main_lcd_write_char_10_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 002ab Instruction { source: "inline_main_lcd_write_char_10_t8 <- inline_main_lcd_write_char_10_t9 BitwiseOr inline_main_lcd_write_char_10_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x1e), Register(0x1c), Register(0x1c)], resolved: None }
1c 1e 1c 1c 
# None <= call io_write1(inline_main_lcd_write_char_10_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 002af Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x1c)], resolved: None }
69 1c 
# goto inline_main_lcd_write_char_10_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_lcd_write_char_10_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_write_char_10_function_end_lcd_write_char)], resolved: None }
# :inline_main_lcd_write_char_10_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_lcd_write_char_10_function_end_lcd_write_char
# t50 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t50 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# t51 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 002b1 Instruction { source: "t51 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x01=1)], resolved: None }
04 1c 01 
# ch <- t50 Add t51
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"ch\"), Number(U8, 1))"] }
# 002b4 Instruction { source: "ch <- t50 Add t51\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"ch\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x12), Register(0x1c), Register(0x12)], resolved: None }
14 12 1c 12 
# goto main_while_predicate_3
# 	SourceContext { contexts: [] }
# 002b8 Instruction { source: "goto main_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_3)], resolved: None }
70 68 02 00 
# :main_while_end_5
# 	SourceContext { contexts: [] }
# main_while_end_5
# :inline_main_lcd_flush_8_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_flush_8_lcd_flush_while_predicate_0
# Some(inline_main_lcd_flush_8_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 002bc Instruction { source: "IoRead1", opcode: In1, args: [Register(0x12)], resolved: None }
61 12 
# inline_main_lcd_flush_8_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 002be Instruction { source: "inline_main_lcd_flush_8_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x08=8)], resolved: None }
04 1c 08 
# inline_main_lcd_flush_8_t0 <- inline_main_lcd_flush_8_t1 BitwiseAnd inline_main_lcd_flush_8_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 002c1 Instruction { source: "inline_main_lcd_flush_8_t0 <- inline_main_lcd_flush_8_t1 BitwiseAnd inline_main_lcd_flush_8_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x12), Register(0x1c), Register(0x12)], resolved: None }
1b 12 1c 12 
# inline_main_lcd_flush_8_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 002c5 Instruction { source: "inline_main_lcd_flush_8_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
04 1c 00 
# if inline_main_lcd_flush_8_t0 != inline_main_lcd_flush_8_t3 then 'inline_main_lcd_flush_8_lcd_flush_while_body_1' else 'inline_main_lcd_flush_8_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 002c8 Instruction { source: "if inline_main_lcd_flush_8_t0 != inline_main_lcd_flush_8_t3 then 'inline_main_lcd_flush_8_lcd_flush_while_body_1' else 'inline_main_lcd_flush_8_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x12), Register(0x1c)], resolved: None }
15 12 1c 
# 002cb Instruction { source: "if inline_main_lcd_flush_8_t0 != inline_main_lcd_flush_8_t3 then 'inline_main_lcd_flush_8_lcd_flush_while_body_1' else 'inline_main_lcd_flush_8_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_lcd_flush_8_lcd_flush_while_end_2)], resolved: None }
72 d3 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_lcd_flush_8_t0 != inline_main_lcd_flush_8_t3 then 'inline_main_lcd_flush_8_lcd_flush_while_body_1' else 'inline_main_lcd_flush_8_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_flush_8_lcd_flush_while_body_1)], resolved: None }
# :inline_main_lcd_flush_8_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_flush_8_lcd_flush_while_body_1
# goto inline_main_lcd_flush_8_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 002cf Instruction { source: "goto inline_main_lcd_flush_8_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_flush_8_lcd_flush_while_predicate_0)], resolved: None }
70 bc 02 00 
# :inline_main_lcd_flush_8_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_lcd_flush_8_lcd_flush_while_end_2
# goto inline_main_lcd_flush_8_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_lcd_flush_8_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_lcd_flush_8_function_end_lcd_flush)], resolved: None }
# :inline_main_lcd_flush_8_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_lcd_flush_8_function_end_lcd_flush
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 002d3 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
