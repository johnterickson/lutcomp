v2.0 raw
# In IlFunctionId("delay"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), in block from 0..21, removing repetitive write at 18 because it is the same as at 8: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_draw_char"), optimizing round #3
# In IlFunctionId("lcd_init"), optimizing round #0
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t0`.
# In IlFunctionId("lcd_init"), optimizing round #1
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 24 because it is the same as at 20: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 28 because it is the same as at 24: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 22 because it is the same as at 18: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 26 because it is the same as at 22: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 38 because it is the same as at 32: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 44 because it is the same as at 38: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 50 because it is the same as at 44: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 34 because it is the same as at 30: t9f48 <- 0n2/0x02u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 46 because it is the same as at 40: ta97f <- 0n0/0x00u8 
# In IlFunctionId("lcd_init"), optimizing round #2
# In IlFunctionId("lcd_logical_to_physical"), optimizing round #0
# In IlFunctionId("lcd_putc"), optimizing round #0
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t9`.
# In IlFunctionId("lcd_putc"), optimizing round #1
# In IlFunctionId("lcd_putc"), merging duplicate labels at #53 && #54: 'IlLabelId("lcd_putc_if_else_0_8")' and 'IlLabelId("lcd_putc_if_end_6")' to 'IlLabelId("lcd_putc_if_end_6")'
# In IlFunctionId("lcd_putc"), optimizing round #2
# In IlFunctionId("lcd_putc"), removing no-op goto instruction #52: goto lcd_putc_if_end_6
# In IlFunctionId("lcd_putc"), optimizing round #3
# In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t1 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t2 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #21, replacing reference to t3 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t3 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #22, replacing reference to t4 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t4 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #36, replacing reference to t6 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t6 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t7 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #41, replacing reference to t8 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t8 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t9 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), optimizing round #4
# In IlFunctionId("lcd_putc"), optimizing round #5
# In IlFunctionId("lcd_putc"), in block from 14..27, removing repetitive write at 21 because it is the same as at 15: t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), in block from 14..27, removing repetitive write at 22 because it is the same as at 21: t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 36 because it is the same as at 30: t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 40 because it is the same as at 36: t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 41 because it is the same as at 40: t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_putc"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), optimizing round #0
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987136/0x000f1000u32)` for var `t1`.
# In IlFunctionId("lcd_scroll_up"), optimizing round #1
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #59 && #60: 'IlLabelId("lcd_scroll_up_if_else_0_11")' and 'IlLabelId("lcd_scroll_up_if_end_9")' to 'IlLabelId("lcd_scroll_up_if_end_9")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #37 && #38: 'IlLabelId("lcd_scroll_up_while_end_2")' and 'IlLabelId("lcd_scroll_up_while_predicate_6")' to 'IlLabelId("lcd_scroll_up_while_end_2")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #32 && #33: 'IlLabelId("lcd_scroll_up_if_else_0_5")' and 'IlLabelId("lcd_scroll_up_if_end_3")' to 'IlLabelId("lcd_scroll_up_if_end_3")'
# In IlFunctionId("lcd_scroll_up"), optimizing round #2
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #56: goto lcd_scroll_up_if_end_9
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #31: goto lcd_scroll_up_if_end_3
# In IlFunctionId("lcd_scroll_up"), optimizing round #3
# In IlFunctionId("lcd_scroll_up"), in block from 46..55, removing repetitive write at 53 because it is the same as at 50: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_scroll_up"), at #1, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t1 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #5
# In IlFunctionId("lcd_scroll_up"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), in block from 0..6, removing repetitive write at 1 because it is the same as at 0: t0 <- 0n987136/0x000f1000u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #7
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), merging duplicate labels at #24 && #25: 'IlLabelId("main_while_end_5")' and 'IlLabelId("function_end_main")' to 'IlLabelId("function_end_main")'
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("test_delay"), optimizing round #0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_delay"), optimizing round #1
# In IlFunctionId("test_delay"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `inline_lcd_draw_char_lcd_logical_to_physical_0_i` - which is also never modified. Replacing refs to latter with the former and deleting the copy: inline_lcd_draw_char_lcd_logical_to_physical_0_i <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), removing no-op goto instruction #14: goto inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), removing unreferenced label: :inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical
# In IlFunctionId("lcd_draw_char"), optimizing round #3
# IlFunctionId("delay")(x,)
# 00: :delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 01: tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 02: t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 03: if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 04: :delay_while_body_1 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 05: tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 06: x <- tad57 Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 07: goto delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 08: :delay_while_end_2 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 09: return None # None
# 10: :function_end_delay # None
# 11: Unreachable # None

# IlFunctionId("io_write1")(data,)
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_io_write1 # None
# 03: Unreachable # None

# IlFunctionId("lcd_draw_char")(i,ch,)
# 00: inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(9,5))
# 01: inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(9,5))
# 02: inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 03: inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 04: inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 05: inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 06: inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 <- const &lcd_row_start # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 07: inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 08: inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 09: inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 10: inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf] U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 11: inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_0_col U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 12: inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 13: pos <- inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 14: t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 15: t1730 <- t136d ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 16: t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 17: None <= call io_write1(t2176,) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 18: t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 19: t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 20: None <= call io_write1(t791e,) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 21: t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(19,5))
# 22: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(19,5))
# 23: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 24: t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 25: t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 26: None <= call io_write1(t3e8f,) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 27: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 28: t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 29: tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 30: None <= call io_write1(tb5dc,) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 31: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(23,5))
# 32: return None # None
# 33: :function_end_lcd_draw_char # None
# 34: Unreachable # None

# IlFunctionId("lcd_init")()
# 00: t0 <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 01: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 02: mem[t0] <- ta97f U8 # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 03: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(72,5))
# 04: :lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 05: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 06: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 07: if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 08: :lcd_init_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 09: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 10: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 11: tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 12: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 13: mem[tdd66] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 14: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 15: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 16: goto lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 17: :lcd_init_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 18: t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(78,5))
# 19: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(78,5))
# 20: t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(79,5))
# 21: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(79,5))
# 22: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(80,5))
# 23: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(81,5))
# 24: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(82,5))
# 25: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(83,5))
# 26: t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(85,5))
# 27: None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(85,5))
# 28: t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(86,5))
# 29: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(86,5))
# 30: None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(88,5))
# 31: t477 <- 0n8/0x08u8  # Some('/lutcomp/programs/lib/lcd.j':(89,5))
# 32: None <= call io_write1(t477,) # Some('/lutcomp/programs/lib/lcd.j':(89,5))
# 33: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(90,5))
# 34: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(92,5))
# 35: None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(92,5))
# 36: tec13 <- 0n12/0x0cu8  # Some('/lutcomp/programs/lib/lcd.j':(93,5))
# 37: None <= call io_write1(tec13,) # Some('/lutcomp/programs/lib/lcd.j':(93,5))
# 38: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(94,5))
# 39: None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(96,5))
# 40: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/lcd.j':(97,5))
# 41: None <= call io_write1(ta11a,) # Some('/lutcomp/programs/lib/lcd.j':(97,5))
# 42: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(98,5))
# 43: return None # None
# 44: :function_end_lcd_init # None
# 45: Unreachable # None

# IlFunctionId("lcd_putc")(ch,)
# 00: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 01: t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 02: if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 03: :lcd_putc_if_true_0_1 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 04: t0 <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 05: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 06: t78f0 <- t5dda Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 07: tf5a3 <- t78f0 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 08: next <- tf5a3 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 09: :lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 10: t0 <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 11: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 12: ta5ff <- next U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 13: if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 14: :lcd_putc_while_body_4 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 15: t0 <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 16: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 17: tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 18: t2878 <- tad4e Add Number(0n987140/0x000f1004u32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 19: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 20: mem[t2878] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 21: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 22: tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 23: mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 24: goto lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 25: :lcd_putc_while_end_5 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 26: goto lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 27: :lcd_putc_if_else_0_2 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 28: t0 <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 29: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 30: tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 31: t2878 <- tad4e Add Number(0n987140/0x000f1004u32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 32: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 33: mem[t2878] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 34: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 35: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 36: None <= call lcd_draw_char(t5dda,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 37: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 38: tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 39: mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 40: :lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 41: t0 <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 42: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 43: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 44: if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 45: :lcd_putc_if_true_0_7 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 46: None <= call lcd_scroll_up() # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 47: :lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 48: return None # None
# 49: :function_end_lcd_putc # None
# 50: Unreachable # None

# IlFunctionId("lcd_scroll_up")()
# 00: t0 <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 01: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 02: t81b5 <- t5dda Subtract Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 03: mem[t0] <- t81b5 U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 04: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(29,5))
# 05: :lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 06: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 07: t9586 <- 0n60/0x3cu8  # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 08: if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 09: :lcd_scroll_up_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 10: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 11: tfd89 <- td0f3 Add Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 12: t760c U32 <- tfd89 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 13: t72c9 <- t760c Add Number(0n987140/0x000f1004u32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 14: ch <- mem[t72c9] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 15: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 16: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 17: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 18: tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 19: ta094 <- mem[tdd66] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 20: if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 21: :lcd_scroll_up_if_true_0_4 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 22: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 23: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 24: tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 25: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 26: mem[tdd66] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 27: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 28: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 29: None <= call lcd_draw_char(td0f3,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 30: :lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 31: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 32: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 33: goto lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 34: :lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 35: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 36: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 37: if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 38: :lcd_scroll_up_while_body_7 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 39: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 40: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 41: tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 42: ta094 <- mem[tdd66] U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 43: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 44: if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 45: :lcd_scroll_up_if_true_0_10 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 46: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 47: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 48: tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 49: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 50: mem[tdd66] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 51: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 52: None <= call lcd_draw_char(td0f3,tdf3b,) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 53: :lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 54: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 55: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 56: goto lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 57: :lcd_scroll_up_while_end_8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 58: return None # None
# 59: :function_end_lcd_scroll_up # None
# 60: Unreachable # None

# IlFunctionId("main")()
# 00: None <= call lcd_init() # Some('programs/test/echo_lcd.j':(4,5))
# 01: ch <- 0n97/0x61u8  # Some('programs/test/echo_lcd.j':(6,5))
# 02: :main_while_predicate_0 # Some('programs/test/echo_lcd.j':(7,5))
# 03: tdcd9 <- ch U8 # Some('programs/test/echo_lcd.j':(7,5))
# 04: t1b2d <- 0n122/0x7au8  # Some('programs/test/echo_lcd.j':(7,5))
# 05: if tdcd9 <= t1b2d then 'main_while_body_1' else 'main_while_end_2' # Some('programs/test/echo_lcd.j':(7,5))
# 06: :main_while_body_1 # Some('programs/test/echo_lcd.j':(7,5))
# 07: tdcd9 <- ch U8 # Some('programs/test/echo_lcd.j':(7,5))
# 08: None <= call lcd_putc(tdcd9,) # Some('programs/test/echo_lcd.j':(7,5))
# 09: tdcd9 <- ch U8 # Some('programs/test/echo_lcd.j':(7,5))
# 10: ch <- tdcd9 Add Number(0n1/0x01u8) # Some('programs/test/echo_lcd.j':(7,5))
# 11: goto main_while_predicate_0 # Some('programs/test/echo_lcd.j':(7,5))
# 12: :main_while_end_2 # Some('programs/test/echo_lcd.j':(7,5))
# 13: ch <- 0n65/0x41u8  # Some('programs/test/echo_lcd.j':(12,5))
# 14: :main_while_predicate_3 # Some('programs/test/echo_lcd.j':(13,5))
# 15: tdcd9 <- ch U8 # Some('programs/test/echo_lcd.j':(13,5))
# 16: t3640 <- 0n90/0x5au8  # Some('programs/test/echo_lcd.j':(13,5))
# 17: if tdcd9 <= t3640 then 'main_while_body_4' else 'function_end_main' # Some('programs/test/echo_lcd.j':(13,5))
# 18: :main_while_body_4 # Some('programs/test/echo_lcd.j':(13,5))
# 19: tdcd9 <- ch U8 # Some('programs/test/echo_lcd.j':(13,5))
# 20: None <= call lcd_putc(tdcd9,) # Some('programs/test/echo_lcd.j':(13,5))
# 21: tdcd9 <- ch U8 # Some('programs/test/echo_lcd.j':(13,5))
# 22: ch <- tdcd9 Add Number(0n1/0x01u8) # Some('programs/test/echo_lcd.j':(13,5))
# 23: goto main_while_predicate_3 # Some('programs/test/echo_lcd.j':(13,5))
# 24: :function_end_main # Some('programs/test/echo_lcd.j':(13,5))
# 25: Unreachable # None


# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 0000d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 00 00 00 

# 00013 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 f1 03 00 

# 00017 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 0001d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :delay
# Ret None
# Arg0=x
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([16, 17, 18, 19]) Number(0n0/0x00000000u32)
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([20, 21, 22, 23])
# Var x (Arg0 x Number(U32)) Reg(U32) Some([20, 21, 22, 23])
# 00026 Copy32 [Register(0x00), Register(0x14)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [20, 21, 22, 23].
21 00 14 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 00029 LoadImm32 [Register(0x10), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 10 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# 0002f Cmp8 [Register(0x17), Register(0x13)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
15 17 13 

# 00032 Cmp8IfZero [Register(0x16), Register(0x12)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 16 12 

# 00035 Cmp8IfZero [Register(0x15), Register(0x11)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 15 11 

# 00038 Cmp8IfZero [Register(0x14), Register(0x10)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 14 10 

# 0003b JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
72 49 00 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }\nArithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# 0003f AddImm32IgnoreCarry [Register(0x14), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
32 14 ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 00045 JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 29 00 00 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 00049 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 0004b Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([25])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([26])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([26])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([27])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([26])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([27])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf (t9eaf Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_td007 (td007 Ident("row")) Reg(U8) Some([27])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 (td0f3 Ident("i")) Reg(U8) Some([26])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 (tf14 Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) Reg(U8) Some([36])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9 (tfee9 Ident("col")) Reg(U8) Some([26])
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([26])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([26])
# Var t1730 (t1730 Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))) Reg(U8) Some([27])
# Var t2176 (t2176 Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))) Reg(U8) Some([27])
# Var t3e8f (t3e8f Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))) Reg(U8) Some([26])
# Var t4028 (t4028 Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))) Reg(U8) Some([26])
# Var t6611 (t6611 Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))) Reg(U8) Some([25])
# Var t791e (t791e Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))) Reg(U8) Some([26])
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([28, 29, 30, 31]) Number(0n2/0x00000002u32)
# Var tb5dc (tb5dc Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))) Reg(U8) Some([25])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([25])
# 00050 Copy8 [Register(0x00), Register(0x1a)]
#       Save function parameter 'i' registers [0] to locals [26].
0b 00 1a 

# 00053 Copy8 [Register(0x04), Register(0x19)]
#       Save function parameter 'ch' registers [4] to locals [25].
0b 04 19 

# inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))\nAssign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x1a), Register(0x1a)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# 00056 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 00059 Divide8 [Register(0x1a), Register(0x00), Register(0x1b)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
17 1a 00 1b 

# inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x1a), Register(0x1a)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nArithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0x1b), Register(0x1b)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# 0005d LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
04 00 14 

# 00060 Mul8_8 [Register(0x1b), Register(0x00), Register(0x24)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
10 1b 00 24 

# inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# 00064 Copy8 [Register(0x24), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
0b 24 00 

# 00067 Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
02 00 

# 00069 Add8NoCarryIn [Register(0x1a), Register(0x00), Register(0x1a)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
14 1a 00 1a 

# inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 0006d LoadImm32 [Register(0x20), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 20 22 00 00 00 

# inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0x1b), Register(0x1b)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# 00073 LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
20 1c 00 00 00 00 

# 00079 Copy8 [Register(0x1b), Register(0x1c)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
0b 1b 1c 

# inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# 0007c ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
03 

# 0007d AddCarry32_1 [Register(0x20), Register(0x1c), Register(0x1c)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
30 20 1c 1c 

# 00081 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 00082 Load8 [Register(0x1c), Register(0x1b)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 1c 1b 

# inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_0_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_0_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0x1a), Register(0x1a)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 00085 Add8NoCarryIn [Register(0x1b), Register(0x1a), Register(0x1a)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 1b 1a 1a 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0x1a), Register(0x1a)], resolved: None }
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0x1a), Register(0x1a)], resolved: None }
# t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# 00089 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
04 00 04 

# 0008c Shift8 [Constant8(0x05=5), Register(0x00), Register(0x1a), Register(0x1b)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
1e 05 00 1a 1b 

# t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# 00091 OrImm8 [Register(0x1b), Constant8(0x08=8)]
#       t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
19 1b 08 

# None <= call io_write1(t2176,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# 00094 Out1 [Register(0x1b)]
#       IoWrite1
69 1b 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] })\nArithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0x1a), Register(0x1a)], resolved: None }
# t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# 00096 AndImm8 [Register(0x1a), Constant8(0x0f=15)]
#       t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
#       Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
18 1a 0f 

# None <= call io_write1(t791e,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# 00099 Out1 [Register(0x1a)]
#       IoWrite1
69 1a 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 0009b LoadImm32 [Register(0x1c), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 1c 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 000a1 Copy32 [Register(0x1c), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 1c 00 

# Registers used by this function: {25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 000a4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 000aa StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c b4 00 00 00 

# 000b0 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 000b4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x19), Register(0x19)], resolved: None }
# t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# 000ba LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
04 00 04 

# 000bd Shift8 [Constant8(0x05=5), Register(0x00), Register(0x19), Register(0x1a)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
1e 05 00 19 1a 

# t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# 000c2 OrImm8 [Register(0x1a), Constant8(0x80=128)]
#       t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
19 1a 80 

# None <= call io_write1(t3e8f,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# 000c5 Out1 [Register(0x1a)]
#       IoWrite1
69 1a 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))\nArithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x19), Register(0x19)], resolved: None }
# t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# 000c7 AndImm8 [Register(0x19), Constant8(0x0f=15)]
#       t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
#       Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
18 19 0f 

# tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# 000ca OrImm8 [Register(0x19), Constant8(0x80=128)]
#       tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
19 19 80 

# None <= call io_write1(tb5dc,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# 000cd Out1 [Register(0x19)]
#       IoWrite1
69 19 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 000cf Copy32 [Register(0x1c), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 1c 00 

# Registers used by this function: {25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 000d2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 000d8 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c e2 00 00 00 

# 000de JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 000e2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 000e8 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 000ea Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([37])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987136/0x000f1000u32)
# Var t385d (t385d Number(0n1/0x00000001u32)) Reg(U32) Some([40, 41, 42, 43]) Number(0n1/0x00000001u32)
# Var t3d69 (t3d69 Number(0n3/0x03u8)) Reg(U8) Some([44]) Number(0n3/0x03u8)
# Var t477 (t477 Number(0n8/0x08u8)) Reg(U8) Some([37]) Number(0n8/0x08u8)
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([48, 49, 50, 51]) Number(0n2/0x00000002u32)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([48, 49, 50, 51])
# Var t9f48 (t9f48 Number(0n2/0x02u8)) Reg(U8) Some([37]) Number(0n2/0x02u8)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([37]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([52]) Number(0n0/0x00u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([37])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([44]) Number(0n80/0x50u8)
# Var tdd66 (tdd66 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([48, 49, 50, 51])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([52]) Number(0n32/0x20u8)
# Var tec13 (tec13 Number(0n12/0x0cu8)) Reg(U8) Some([37]) Number(0n12/0x0cu8)
# t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 000ef LoadImm32 [Register(0x28), Constant32(0x000f1000=987136)]
#       t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
20 28 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 000f5 LoadImm8 [Register(0x34), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 34 00 

# mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 000f8 Store8 [Register(0x34), Register(0x28)]
#       mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
06 34 28 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 000fb LoadImm8 [Register(0x25), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 25 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x25), Register(0x25)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 000fe LoadImm8 [Register(0x2c), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 2c 50 

# if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 00101 Cmp8 [Register(0x2c), Register(0x25)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 2c 25 

# 00104 JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 28 01 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x25), Register(0x25)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 00108 LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 30 00 00 00 00 

# 0010e Copy8 [Register(0x25), Register(0x30)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 25 30 

# tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 00111 AddImm32IgnoreCarry [Register(0x30), Constant32(0x000f1004=987140)]
#       tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 30 04 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 00117 LoadImm8 [Register(0x34), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 34 20 

# mem[tdd66] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 0011a Store8 [Register(0x34), Register(0x30)]
#       mem[tdd66] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 34 30 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x25), Register(0x25)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 0011d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 00120 Add8NoCarryIn [Register(0x25), Register(0x00), Register(0x25)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 25 00 25 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 00124 JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
70 fe 00 00 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# lcd_init_while_end_2
# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 00128 LoadImm8 [Register(0x2c), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 2c 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 0012b Out1 [Register(0x2c)]
#       IoWrite1
69 2c 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 0012d LoadImm32 [Register(0x28), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 28 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 00133 Copy32 [Register(0x28), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 28 00 

# Registers used by this function: {37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 00136 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 0013c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 46 01 00 00 

# 00142 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 00146 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 0014c Out1 [Register(0x2c)]
#       IoWrite1
69 2c 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 0014e Copy32 [Register(0x28), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 28 00 

# Registers used by this function: {37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 00151 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 00157 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 61 01 00 00 

# 0015d JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 00161 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 00167 Out1 [Register(0x2c)]
#       IoWrite1
69 2c 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 00169 Copy32 [Register(0x28), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 28 00 

# Registers used by this function: {37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 0016c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 00172 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 7c 01 00 00 

# 00178 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 0017c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 00182 LoadImm8 [Register(0x25), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 25 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 00185 Out1 [Register(0x25)]
#       IoWrite1
69 25 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 00187 LoadImm32 [Register(0x30), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 30 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 0018d Copy32 [Register(0x30), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 30 00 

# Registers used by this function: {37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 00190 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 00196 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c a0 01 00 00 

# 0019c JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 001a0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 001a6 Out1 [Register(0x25)]
#       IoWrite1
69 25 

# t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# Number(0n8/0x08u8)
# 001a8 LoadImm8 [Register(0x25), Constant8(0x08=8)]
#       t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
#       Number(0n8/0x08u8)
04 25 08 

# None <= call io_write1(t477,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# 001ab Out1 [Register(0x25)]
#       IoWrite1
69 25 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 001ad Copy32 [Register(0x30), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 30 00 

# Registers used by this function: {37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 001b0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 001b6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c c0 01 00 00 

# 001bc JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 001c0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 001c6 LoadImm8 [Register(0x34), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 34 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 001c9 Out1 [Register(0x34)]
#       IoWrite1
69 34 

# tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# Number(0n12/0x0cu8)
# 001cb LoadImm8 [Register(0x25), Constant8(0x0c=12)]
#       tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
#       Number(0n12/0x0cu8)
04 25 0c 

# None <= call io_write1(tec13,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# 001ce Out1 [Register(0x25)]
#       IoWrite1
69 25 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 001d0 Copy32 [Register(0x30), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 30 00 

# Registers used by this function: {37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 001d3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 001d9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c e3 01 00 00 

# 001df JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 001e3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 001e9 Out1 [Register(0x34)]
#       IoWrite1
69 34 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# Number(0n1/0x01u8)
# 001eb LoadImm8 [Register(0x25), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
#       Number(0n1/0x01u8)
04 25 01 

# None <= call io_write1(ta11a,) Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# 001ee Out1 [Register(0x25)]
#       IoWrite1
69 25 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 001f0 Copy32 [Register(0x30), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 30 00 

# Registers used by this function: {37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23}
# Registers to save: []
# 001f3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 001f9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 03 02 00 00 

# 001ff JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 26 00 00 

# 00203 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 00209 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 0020b Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([53])
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([53])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987136/0x000f1000u32)
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([60]) Number(0n10/0x0au8)
# Var t2878 (t2878 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }) Reg(U32) Some([64, 65, 66, 67])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([68])
# Var t78f0 (t78f0 Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([53])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([53])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) Reg(U32) Some([64, 65, 66, 67])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([53]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([53])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([69]) Number(0n32/0x20u8)
# Var tefac (tefac Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))) Reg(U8) Some([68])
# Var tf5a3 (tf5a3 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))) Reg(U8) Some([53])
# 00210 Copy8 [Register(0x00), Register(0x35)]
#       Save function parameter 'ch' registers [0] to locals [53].
0b 00 35 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x35), Register(0x35)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 00213 LoadImm8 [Register(0x3c), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 3c 0a 

# if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 00216 Cmp8 [Register(0x35), Register(0x3c)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 35 3c 

# 00219 JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 21 02 00 

# 0021d JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 82 02 00 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 00221 LoadImm32 [Register(0x38), Constant32(0x000f1000=987136)]
#       t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 38 00 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 00227 Load8 [Register(0x38), Register(0x44)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 38 44 

# t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# 0022a LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 14 

# 0022d Divide8 [Register(0x44), Register(0x00), Register(0x35)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
17 44 00 35 

# tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# 00231 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
04 00 01 

# 00234 Add8NoCarryIn [Register(0x35), Register(0x00), Register(0x35)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
14 35 00 35 

# next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# 00238 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
04 00 14 

# 0023b Mul8_8 [Register(0x35), Register(0x00), Register(0x35)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
10 35 00 35 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_predicate_3
# t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t1 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# 0023f LoadImm32 [Register(0x38), Constant32(0x000f1000=987136)]
#       t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t1 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
20 38 00 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 00245 Load8 [Register(0x38), Register(0x44)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 38 44 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0x35), Register(0x35)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 00248 Cmp8 [Register(0x35), Register(0x44)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 35 44 

# 0024b JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 7e 02 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_body_4
# t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t2 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# 0024f LoadImm32 [Register(0x38), Constant32(0x000f1000=987136)]
#       t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t2 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
20 38 00 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# 00255 Load8 [Register(0x38), Register(0x44)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
05 38 44 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 00258 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 40 00 00 00 00 

# 0025e Copy8 [Register(0x44), Register(0x40)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 44 40 

# t2878 <- tad4e Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 00261 AddImm32IgnoreCarry [Register(0x40), Constant32(0x000f1004=987140)]
#       t2878 <- tad4e Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 40 04 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 00267 LoadImm8 [Register(0x45), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 45 20 

# mem[t2878] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# 0026a Store8 [Register(0x45), Register(0x40)]
#       mem[t2878] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
06 45 40 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# 0026d Load8 [Register(0x38), Register(0x44)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
05 38 44 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 00270 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 00273 Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x44)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 44 00 44 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# 00277 Store8 [Register(0x44), Register(0x38)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
06 44 38 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 0027a JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 3f 02 00 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 0027e JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 c9 02 00 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_else_0_2
# t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# 00282 LoadImm32 [Register(0x38), Constant32(0x000f1000=987136)]
#       t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
20 38 00 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# 00288 Load8 [Register(0x38), Register(0x44)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
05 38 44 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 0028b LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 40 00 00 00 00 

# 00291 Copy8 [Register(0x44), Register(0x40)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 44 40 

# t2878 <- tad4e Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 00294 AddImm32IgnoreCarry [Register(0x40), Constant32(0x000f1004=987140)]
#       t2878 <- tad4e Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 40 04 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x35), Register(0x35)], resolved: None }
# mem[t2878] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 0029a Store8 [Register(0x35), Register(0x40)]
#       mem[t2878] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 35 40 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# 0029d Load8 [Register(0x38), Register(0x44)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
05 38 44 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x35), Register(0x35)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 002a0 Copy8 [Register(0x44), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 44 00 

# 002a3 Copy8 [Register(0x35), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 35 04 

# Registers used by this function: {53, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers to save: []
# 002a6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 002ac StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c b6 02 00 00 

# 002b2 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 50 00 00 

# 002b6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# 002bc Load8 [Register(0x38), Register(0x44)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
05 38 44 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 002bf LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 002c2 Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x44)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 44 00 44 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# 002c6 Store8 [Register(0x44), Register(0x38)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
06 44 38 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_end_0
# t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t9 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
# 002c9 LoadImm32 [Register(0x38), Constant32(0x000f1000=987136)]
#       t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t9 <- 0n987136/0x000f1000u32  -> t0 <- 0n987136/0x000f1000u32 
20 38 00 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# 002cf Load8 [Register(0x38), Register(0x44)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
05 38 44 

# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 002d2 LoadImm8 [Register(0x35), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 35 50 

# if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# 002d5 Cmp8 [Register(0x35), Register(0x44)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
15 35 44 

# 002d8 JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
71 e0 02 00 

# 002dc JmpImm [Label24(lcd_putc_if_end_6)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
70 f6 02 00 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(63,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {53, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers to save: []
# 002e0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 002e6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c f0 02 00 00 

# 002ec JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 fd 02 00 

# 002f0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 002f6 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 002f8 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([70])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([71])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([72, 73, 74, 75]) Number(0n987136/0x000f1000u32)
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([71])
# Var t72c9 (t72c9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }) Reg(U32) Some([72, 73, 74, 75])
# Var t760c (t760c Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t81b5 (t81b5 Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([71])
# Var t9586 (t9586 Number(0n60/0x3cu8)) Reg(U8) Some([70]) Number(0n60/0x3cu8)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([76, 77, 78, 79])
# Var ta094 (ta094 Index("lcd_display", Ident("i"))) Reg(U8) Some([80])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([71])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([70]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([70])
# Var tdd66 (tdd66 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([76, 77, 78, 79])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([70]) Number(0n32/0x20u8)
# Var tfd89 (tfd89 Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) Reg(U8) Some([70])
# t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 002fd LoadImm32 [Register(0x48), Constant32(0x000f1000=987136)]
#       t0 <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
20 48 00 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 00303 Load8 [Register(0x48), Register(0x47)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987136/0x000f1000u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 48 47 

# t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# 00306 LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 ec 

# 00309 Add8NoCarryIn [Register(0x47), Register(0x00), Register(0x47)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
14 47 00 47 

# mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 0030d Store8 [Register(0x47), Register(0x48)]
#       mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
06 47 48 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00310 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 47 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Number(0n60/0x3cu8)
# 00313 LoadImm8 [Register(0x46), Constant8(0x3c=60)]
#       t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
#       Number(0n60/0x3cu8)
04 46 3c 

# if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# 00316 Cmp8 [Register(0x46), Register(0x47)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
15 46 47 

# 00319 JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
71 88 03 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }) }\nArithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# 0031d LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 00320 Add8NoCarryIn [Register(0x47), Register(0x00), Register(0x46)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
14 47 00 46 

# t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# 00324 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
20 48 00 00 00 00 

# 0032a Copy8 [Register(0x46), Register(0x48)]
#       t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
0b 46 48 

# t72c9 <- t760c Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# 0032d AddImm32IgnoreCarry [Register(0x48), Constant32(0x000f1004=987140)]
#       t72c9 <- t760c Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
32 48 04 10 0f 00 

# ch <- mem[t72c9] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# 00333 Load8 [Register(0x48), Register(0x46)]
#       ch <- mem[t72c9] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
05 48 46 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x46), Register(0x46)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 00336 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 4c 00 00 00 00 

# 0033c Copy8 [Register(0x47), Register(0x4c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 47 4c 

# tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 0033f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x000f1004=987140)]
#       tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 4c 04 10 0f 00 

# ta094 <- mem[tdd66] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# 00345 Load8 [Register(0x4c), Register(0x50)]
#       ta094 <- mem[tdd66] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
05 4c 50 

# if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# 00348 Cmp8 [Register(0x46), Register(0x50)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
15 46 50 

# 0034b JzImm [Label24(lcd_scroll_up_if_end_3)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
72 7d 03 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_4)], resolved: None }
# :lcd_scroll_up_if_true_0_4 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 0034f LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 4c 00 00 00 00 

# 00355 Copy8 [Register(0x47), Register(0x4c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 47 4c 

# tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 00358 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x000f1004=987140)]
#       tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 4c 04 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x46), Register(0x46)], resolved: None }
# mem[tdd66] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 0035e Store8 [Register(0x46), Register(0x4c)]
#       mem[tdd66] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 46 4c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x46), Register(0x46)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 00361 Copy8 [Register(0x47), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 47 00 

# 00364 Copy8 [Register(0x46), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 46 04 

# Registers used by this function: {70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers to save: []
# 00367 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 0036d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 77 03 00 00 

# 00373 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 50 00 00 

# 00377 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# :lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_end_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 0037d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 00380 Add8NoCarryIn [Register(0x47), Register(0x00), Register(0x47)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 47 00 47 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 00384 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 13 03 00 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 00388 LoadImm8 [Register(0x46), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 46 50 

# if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 0038b Cmp8 [Register(0x46), Register(0x47)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 46 47 

# 0038e JcImm [Label24(lcd_scroll_up_while_end_8)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 ea 03 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_7)], resolved: None }
# :lcd_scroll_up_while_body_7 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_7
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 00392 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 4c 00 00 00 00 

# 00398 Copy8 [Register(0x47), Register(0x4c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 47 4c 

# tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 0039b AddImm32IgnoreCarry [Register(0x4c), Constant32(0x000f1004=987140)]
#       tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 4c 04 10 0f 00 

# ta094 <- mem[tdd66] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# 003a1 Load8 [Register(0x4c), Register(0x50)]
#       ta094 <- mem[tdd66] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
05 4c 50 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 003a4 LoadImm8 [Register(0x46), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 46 20 

# if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# 003a7 Cmp8 [Register(0x50), Register(0x46)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
15 50 46 

# 003aa JzImm [Label24(lcd_scroll_up_if_end_9)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
72 df 03 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_10)], resolved: None }
# :lcd_scroll_up_if_true_0_10 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_10
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 003ae LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 4c 00 00 00 00 

# 003b4 Copy8 [Register(0x47), Register(0x4c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 47 4c 

# tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 003b7 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x000f1004=987140)]
#       tdd66 <- t9725 Add Number(0n987140/0x000f1004u32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987140/0x000f1004u32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 4c 04 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 003bd LoadImm8 [Register(0x46), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 46 20 

# mem[tdd66] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 003c0 Store8 [Register(0x46), Register(0x4c)]
#       mem[tdd66] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 46 4c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# 003c3 Copy8 [Register(0x47), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 47 00 

# 003c6 Copy8 [Register(0x46), Register(0x04)]
#       Arg1[ch]=tdf3b None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 46 04 

# Registers used by this function: {70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers to save: []
# 003c9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 003cf StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c d9 03 00 00 

# 003d5 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 50 00 00 

# 003d9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# :lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_end_9
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 003df LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 003e2 Add8NoCarryIn [Register(0x47), Register(0x00), Register(0x47)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 47 00 47 

# goto lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 003e6 JmpImm [Label24(lcd_scroll_up_while_end_2)]
#       goto lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 88 03 00 

# :lcd_scroll_up_while_end_8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_while_end_8
# return None None
# Return { value: None }
# 003ea JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 003ec Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var t1b2d (t1b2d Number(0n122/0x7au8)) Reg(U8) Some([82]) Number(0n122/0x7au8)
# Var t3640 (t3640 Number(0n90/0x5au8)) Reg(U8) Some([82]) Number(0n90/0x5au8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([81])
# None <= call lcd_init() Some('programs/test/echo_lcd.j':(4,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {81, 82}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52}
# Registers to save: []
# 003f1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 003f7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c 01 04 00 00 

# 003fd JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 ef 00 00 

# 00401 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# ch <- 0n97/0x61u8  Some('programs/test/echo_lcd.j':(6,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n97/0x61u8) }
# Number(0n97/0x61u8)
# 00407 LoadImm8 [Register(0x51), Constant8(0x61=97)]
#       ch <- 0n97/0x61u8  Some('programs/test/echo_lcd.j':(6,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n97/0x61u8) }
#       Number(0n97/0x61u8)
04 51 61 

# :main_while_predicate_0 Some('programs/test/echo_lcd.j':(7,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# main_while_predicate_0
# tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(7,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(7,5))\nWhile { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n122/0x7au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# t1b2d <- 0n122/0x7au8  Some('programs/test/echo_lcd.j':(7,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }
# Number(0n122/0x7au8)
# 0040a LoadImm8 [Register(0x52), Constant8(0x7a=122)]
#       t1b2d <- 0n122/0x7au8  Some('programs/test/echo_lcd.j':(7,5))
#       While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }
#       Number(0n122/0x7au8)
04 52 7a 

# if tdcd9 <= t1b2d then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/echo_lcd.j':(7,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }
# 0040d Cmp8 [Register(0x51), Register(0x52)]
#       if tdcd9 <= t1b2d then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/echo_lcd.j':(7,5))
#       While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }
15 51 52 

# 00410 JcImm [Label24(main_while_body_1)]
#       if tdcd9 <= t1b2d then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/echo_lcd.j':(7,5))
#       While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }
71 18 04 00 

# 00414 JmpImm [Label24(main_while_end_2)]
#       if tdcd9 <= t1b2d then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/echo_lcd.j':(7,5))
#       While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }
70 3c 04 00 

# :main_while_body_1 Some('programs/test/echo_lcd.j':(7,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n122/0x7au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# main_while_body_1
# tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(7,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(7,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(tdcd9,) Some('programs/test/echo_lcd.j':(7,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("ch")] })
# 00418 Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=tdcd9 None <= call lcd_putc(tdcd9,) Some('programs/test/echo_lcd.j':(7,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("ch")] })
0b 51 00 

# Registers used by this function: {81, 82}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 53, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers to save: []
# 0041b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00421 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 2b 04 00 00 

# 00427 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 10 02 00 

# 0042b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(7,5))
# Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(7,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"ch\"), Number(0n1/0x01u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# ch <- tdcd9 Add Number(0n1/0x01u8) Some('programs/test/echo_lcd.j':(7,5))
# Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8))
# 00431 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       ch <- tdcd9 Add Number(0n1/0x01u8) Some('programs/test/echo_lcd.j':(7,5))
#       Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8))
04 00 01 

# 00434 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       ch <- tdcd9 Add Number(0n1/0x01u8) Some('programs/test/echo_lcd.j':(7,5))
#       Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8))
14 51 00 51 

# goto main_while_predicate_0 Some('programs/test/echo_lcd.j':(7,5))
# 00438 JmpImm [Label24(main_while_predicate_0)]
#       goto main_while_predicate_0 Some('programs/test/echo_lcd.j':(7,5))
70 0a 04 00 

# :main_while_end_2 Some('programs/test/echo_lcd.j':(7,5))
# main_while_end_2
# ch <- 0n65/0x41u8  Some('programs/test/echo_lcd.j':(12,5))
# Assign { target: Ident("ch"), var_type: None, value: Number(0n65/0x41u8) }
# Number(0n65/0x41u8)
# 0043c LoadImm8 [Register(0x51), Constant8(0x41=65)]
#       ch <- 0n65/0x41u8  Some('programs/test/echo_lcd.j':(12,5))
#       Assign { target: Ident("ch"), var_type: None, value: Number(0n65/0x41u8) }
#       Number(0n65/0x41u8)
04 51 41 

# :main_while_predicate_3 Some('programs/test/echo_lcd.j':(13,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# main_while_predicate_3
# tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(13,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(13,5))\nWhile { predicate: Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n90/0x5au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# t3640 <- 0n90/0x5au8  Some('programs/test/echo_lcd.j':(13,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }
# Number(0n90/0x5au8)
# 0043f LoadImm8 [Register(0x52), Constant8(0x5a=90)]
#       t3640 <- 0n90/0x5au8  Some('programs/test/echo_lcd.j':(13,5))
#       While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }
#       Number(0n90/0x5au8)
04 52 5a 

# if tdcd9 <= t3640 then 'main_while_body_4' else 'function_end_main' Some('programs/test/echo_lcd.j':(13,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }
# 00442 Cmp8 [Register(0x51), Register(0x52)]
#       if tdcd9 <= t3640 then 'main_while_body_4' else 'function_end_main' Some('programs/test/echo_lcd.j':(13,5))
#       While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }
15 51 52 

# 00445 JcImm [Label24(main_while_body_4)]
#       if tdcd9 <= t3640 then 'main_while_body_4' else 'function_end_main' Some('programs/test/echo_lcd.j':(13,5))
#       While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }
71 4d 04 00 

# 00449 JmpImm [Label24(function_end_main)]
#       if tdcd9 <= t3640 then 'main_while_body_4' else 'function_end_main' Some('programs/test/echo_lcd.j':(13,5))
#       While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }
70 71 04 00 

# :main_while_body_4 Some('programs/test/echo_lcd.j':(13,5))
# While { predicate: Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n90/0x5au8) }, while_true: [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }, Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }] }
# main_while_body_4
# tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(13,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(13,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(tdcd9,) Some('programs/test/echo_lcd.j':(13,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("ch")] })
# 0044d Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=tdcd9 None <= call lcd_putc(tdcd9,) Some('programs/test/echo_lcd.j':(13,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("ch")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("ch")] })
0b 51 00 

# Registers used by this function: {81, 82}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 53, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers to save: []
# 00450 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00456 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 60 04 00 00 

# 0045c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 10 02 00 

# 00460 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(13,5))
# Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/echo_lcd.j':(13,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Arithmetic(Add, Ident(\"ch\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"ch\"), Number(0n1/0x01u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# ch <- tdcd9 Add Number(0n1/0x01u8) Some('programs/test/echo_lcd.j':(13,5))
# Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8))
# 00466 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       ch <- tdcd9 Add Number(0n1/0x01u8) Some('programs/test/echo_lcd.j':(13,5))
#       Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8))
04 00 01 

# 00469 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       ch <- tdcd9 Add Number(0n1/0x01u8) Some('programs/test/echo_lcd.j':(13,5))
#       Assign { target: Ident("ch"), var_type: None, value: Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("ch"), Number(0n1/0x01u8))
14 51 00 51 

# goto main_while_predicate_3 Some('programs/test/echo_lcd.j':(13,5))
# 0046d JmpImm [Label24(main_while_predicate_3)]
#       goto main_while_predicate_3 Some('programs/test/echo_lcd.j':(13,5))
70 3f 04 00 

# :function_end_main Some('programs/test/echo_lcd.j':(13,5))
# function_end_main
# Unreachable None
# 00471 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

