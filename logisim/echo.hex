v2.0 raw
#  line: 'loadimm8 r01 <- 'H''
#   instruction: 'loadimm8 r01 <- 'H''
#    loadimm8: 'loadimm8 r01 <- 'H''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: ''H''
#      char_constant: ''H''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'loadimm8 r01 <- 'i''
#   instruction: 'loadimm8 r01 <- 'i''
#    loadimm8: 'loadimm8 r01 <- 'i''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: ''i''
#      char_constant: ''i''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'loadimm8 r01 <- '!''
#   instruction: 'loadimm8 r01 <- '!''
#    loadimm8: 'loadimm8 r01 <- '!''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: ''!''
#      char_constant: ''!''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'loadimm8 r01 <- $0A'
#   instruction: 'loadimm8 r01 <- $0A'
#    loadimm8: 'loadimm8 r01 <- $0A'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: '$0A'
#      signed_hex_constant: '0A'
#       unsigned_hex_constant: '0A'
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: ':prompt'
#   label: ':prompt'
#  line: 'loadimm8 r01 <- '>''
#   instruction: 'loadimm8 r01 <- '>''
#    loadimm8: 'loadimm8 r01 <- '>''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: ''>''
#      char_constant: ''>''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'loadimm8 r01 <- ':''
#   instruction: 'loadimm8 r01 <- ':''
#    loadimm8: 'loadimm8 r01 <- ':''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: '':''
#      char_constant: '':''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: ':read'
#   label: ':read'
#  line: 'ttyin r01'
#   instruction: 'ttyin r01'
#    ttyin: 'ttyin r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'and8 r01 r01 -> r02'
#   instruction: 'and8 r01 r01 -> r02'
#    and8: 'and8 r01 r01 -> r02'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#  line: 'andimm8 r02 <- $80'
#   instruction: 'andimm8 r02 <- $80'
#    andimm8: 'andimm8 r02 <- $80'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#     constant8: '$80'
#      signed_hex_constant: '80'
#       unsigned_hex_constant: '80'
#  line: 'jzimm :read'
#   instruction: 'jzimm :read'
#    jzimm: 'jzimm :read'
#     constant24: ':read'
#      label: ':read'
#  line: 'andimm8 r01 <- $7f'
#   instruction: 'andimm8 r01 <- $7f'
#    andimm8: 'andimm8 r01 <- $7f'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: '$7f'
#      signed_hex_constant: '7f'
#       unsigned_hex_constant: '7f'
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'and8 r01 r01 -> r02'
#   instruction: 'and8 r01 r01 -> r02'
#    and8: 'and8 r01 r01 -> r02'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#  line: 'xorimm8 r02 <- 'q''
#   instruction: 'xorimm8 r02 <- 'q''
#    xorimm8: 'xorimm8 r02 <- 'q''
#     register: 'r02'
#      unsigned_hex_constant: '02'
#     constant8: ''q''
#      char_constant: ''q''
#  line: 'jzimm :halt'
#   instruction: 'jzimm :halt'
#    jzimm: 'jzimm :halt'
#     constant24: ':halt'
#      label: ':halt'
#  line: 'and8 r01 r01 -> r02'
#   instruction: 'and8 r01 r01 -> r02'
#    and8: 'and8 r01 r01 -> r02'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#  line: 'xorimm8 r02 <- $0A'
#   instruction: 'xorimm8 r02 <- $0A'
#    xorimm8: 'xorimm8 r02 <- $0A'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#     constant8: '$0A'
#      signed_hex_constant: '0A'
#       unsigned_hex_constant: '0A'
#  line: 'jzimm :prompt'
#   instruction: 'jzimm :prompt'
#    jzimm: 'jzimm :prompt'
#     constant24: ':prompt'
#      label: ':prompt'
#  line: 'jmpimm :read'
#   instruction: 'jmpimm :read'
#    jmpimm: 'jmpimm :read'
#     constant24: ':read'
#      label: ':read'
#  line: ':halt'
#   label: ':halt'
#  line: 'halt'
#   instruction: 'halt'
#    halt: 'halt'
#  EOI: ''
# 00000 Instruction { source: "loadimm8 r01 <- 'H'", opcode: LoadImm8, args: [Register(1), Constant8(72)], resolved: None }
00 01 48 
# 00003 Instruction { source: "ttyout r01", opcode: TtyOut, args: [Register(1)], resolved: None }
13 01 
# 00005 Instruction { source: "loadimm8 r01 <- 'i'", opcode: LoadImm8, args: [Register(1), Constant8(105)], resolved: None }
00 01 69 
# 00008 Instruction { source: "ttyout r01", opcode: TtyOut, args: [Register(1)], resolved: None }
13 01 
# 0000a Instruction { source: "loadimm8 r01 <- '!'", opcode: LoadImm8, args: [Register(1), Constant8(33)], resolved: None }
00 01 21 
# 0000d Instruction { source: "ttyout r01", opcode: TtyOut, args: [Register(1)], resolved: None }
13 01 
# 0000f Instruction { source: "loadimm8 r01 <- $0A", opcode: LoadImm8, args: [Register(1), Constant8(10)], resolved: None }
00 01 0a 
# 00012 Instruction { source: "ttyout r01", opcode: TtyOut, args: [Register(1)], resolved: None }
13 01 
# :prompt
# 00014 Instruction { source: "loadimm8 r01 <- '>'", opcode: LoadImm8, args: [Register(1), Constant8(62)], resolved: None }
00 01 3e 
# 00017 Instruction { source: "ttyout r01", opcode: TtyOut, args: [Register(1)], resolved: None }
13 01 
# 00019 Instruction { source: "loadimm8 r01 <- ':'", opcode: LoadImm8, args: [Register(1), Constant8(58)], resolved: None }
00 01 3a 
# 0001c Instruction { source: "ttyout r01", opcode: TtyOut, args: [Register(1)], resolved: None }
13 01 
# :read
# 0001e Instruction { source: "ttyin r01", opcode: TtyIn, args: [Register(1)], resolved: None }
12 01 
# 00020 Instruction { source: "and8 r01 r01 -> r02", opcode: And8, args: [Register(1), Register(1), Register(2)], resolved: None }
33 01 01 02 
# 00024 Instruction { source: "andimm8 r02 <- $80", opcode: AndImm8, args: [Register(2), Constant8(128)], resolved: None }
30 02 80 
# 00027 Instruction { source: "jzimm :read", opcode: JzImm, args: [Label24(":read")], resolved: None }
42 1e 00 00 
# 0002b Instruction { source: "andimm8 r01 <- $7f", opcode: AndImm8, args: [Register(1), Constant8(127)], resolved: None }
30 01 7f 
# 0002e Instruction { source: "ttyout r01", opcode: TtyOut, args: [Register(1)], resolved: None }
13 01 
# 00030 Instruction { source: "and8 r01 r01 -> r02", opcode: And8, args: [Register(1), Register(1), Register(2)], resolved: None }
33 01 01 02 
# 00034 Instruction { source: "xorimm8 r02 <- 'q'", opcode: XorImm8, args: [Register(2), Constant8(113)], resolved: None }
32 02 71 
# 00037 Instruction { source: "jzimm :halt", opcode: JzImm, args: [Label24(":halt")], resolved: None }
42 4a 00 00 
# 0003b Instruction { source: "and8 r01 r01 -> r02", opcode: And8, args: [Register(1), Register(1), Register(2)], resolved: None }
33 01 01 02 
# 0003f Instruction { source: "xorimm8 r02 <- $0A", opcode: XorImm8, args: [Register(2), Constant8(10)], resolved: None }
32 02 0a 
# 00042 Instruction { source: "jzimm :prompt", opcode: JzImm, args: [Label24(":prompt")], resolved: None }
42 14 00 00 
# 00046 Instruction { source: "jmpimm :read", opcode: JmpImm, args: [Label24(":read")], resolved: None }
40 1e 00 00 
# :halt
# 0004a Instruction { source: "halt", opcode: Halt, args: [], resolved: None }
ff 
