v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
0f 
# 00001 Instruction { source: "Initialzing stack register to 0x000ffffc.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000ffffc=1048572)], resolved: None }
80 0c fc ff 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
40 57 00 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
ff 00 00 00 00 
# :getchar
# Ret Some(U8)
# Var t0 (t0 Arithmetic(And, Ident("tty"), Number(U8, 128))) Reg(U8) Some([18])
# Var t1 (t1 Ident("tty")) Reg(U8) Some([18])
# Var t2 (t2 Number(U8, 128)) Reg(U8) Some([19])
# Var t3 (t3 Number(U8, 0)) Reg(U8) Some([19])
# Var t4 (t4 Arithmetic(And, Ident("tty"), Number(U8, 127))) Reg(U8) Some([18])
# Var t5 (t5 Ident("tty")) Reg(U8) Some([18])
# Var t6 (t6 Number(U8, 127)) Reg(U8) Some([19])
# Var tty (Local tty Number(U8) Reg(U8)) Reg(U8) Some([20])
# tty <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"tty\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00022 Instruction { source: "tty <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"tty\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
00 14 00 
# :getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }"] }
# getchar_while_predicate_0
# t1 <- tty U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Ident(\"tty\")", "Ident(\"tty\")"] }
# 00025 Instruction { source: "t1 <- tty U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Ident(\\\"tty\\\")\", \"Ident(\\\"tty\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x12)], resolved: None }
16 14 12 
# t2 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00028 Instruction { source: "t2 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x80=128)], resolved: None }
00 13 80 
# t0 <- t1 BitwiseAnd t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))"] }
# 0002b Instruction { source: "t0 <- t1 BitwiseAnd t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x12), Register(0x13), Register(0x12)], resolved: None }
33 12 13 12 
# t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0002f Instruction { source: "t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x00=0)], resolved: None }
00 13 00 
# if t0 == t3 then 'getchar_while_body_1' else 'getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }"] }
# 00032 Instruction { source: "if t0 == t3 then 'getchar_while_body_1' else 'getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x12), Register(0x13)], resolved: None }
25 12 13 
# 00035 Instruction { source: "if t0 == t3 then 'getchar_while_body_1' else 'getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(getchar_while_body_1)], resolved: None }
42 3d 00 00 
# 00039 Instruction { source: "if t0 == t3 then 'getchar_while_body_1' else 'getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(getchar_while_end_2)], resolved: None }
40 43 00 00 
# :getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }"] }
# getchar_while_body_1
# tty <- ttyin
# 	SourceContext { contexts: ["Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }", "TtyIn"] }
# 0003d Instruction { source: "tty <- ttyin\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }\", \"TtyIn\"] }", opcode: TtyIn, args: [Register(0x14)], resolved: None }
12 14 
# goto getchar_while_predicate_0
# 	SourceContext { contexts: [] }
# 0003f Instruction { source: "goto getchar_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(getchar_while_predicate_0)], resolved: None }
40 25 00 00 
# :getchar_while_end_2
# 	SourceContext { contexts: [] }
# getchar_while_end_2
# t5 <- tty U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Ident(\"tty\")", "Ident(\"tty\")"] }
# 00043 Instruction { source: "t5 <- tty U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Ident(\\\"tty\\\")\", \"Ident(\\\"tty\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x12)], resolved: None }
16 14 12 
# t6 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00046 Instruction { source: "t6 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x7f=127)], resolved: None }
00 13 7f 
# t4 <- t5 BitwiseAnd t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))"] }
# 00049 Instruction { source: "t4 <- t5 BitwiseAnd t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x12), Register(0x13), Register(0x12)], resolved: None }
33 12 13 12 
# return Some(t4)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }"] }
# 0004d Instruction { source: "return Some(t4)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\"] }", opcode: Copy8, args: [Register(0x12), Register(0x00)], resolved: None }
16 12 00 
# 00050 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_getchar
# 	SourceContext { contexts: [] }
# function_end_getchar
# Unreachable
# 	SourceContext { contexts: [] }
# 00052 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :main
# Ret Some(U8)
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var addr (Local addr Number(USIZE) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var buf (Local buf Array(Number(U8), 20) FrameOffset(0)) FrameOffset(0) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var i (Local i Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_main_readline_2_buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_main_readline_2_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([36])
# Var inline_main_readline_2_inline_readline_getchar_0_t0 (t0 Arithmetic(And, Ident("tty"), Number(U8, 128))) Reg(U8) Some([36])
# Var inline_main_readline_2_inline_readline_getchar_0_t1 (t1 Ident("tty")) Reg(U8) Some([36])
# Var inline_main_readline_2_inline_readline_getchar_0_t2 (t2 Number(U8, 128)) Reg(U8) Some([37])
# Var inline_main_readline_2_inline_readline_getchar_0_t3 (t3 Number(U8, 0)) Reg(U8) Some([37])
# Var inline_main_readline_2_inline_readline_getchar_0_t4 (t4 Arithmetic(And, Ident("tty"), Number(U8, 127))) Reg(U8) Some([36])
# Var inline_main_readline_2_inline_readline_getchar_0_t5 (t5 Ident("tty")) Reg(U8) Some([36])
# Var inline_main_readline_2_inline_readline_getchar_0_t6 (t6 Number(U8, 127)) Reg(U8) Some([37])
# Var inline_main_readline_2_inline_readline_getchar_0_tty (Local tty Number(U8) Reg(U8)) Reg(U8) Some([38])
# Var inline_main_readline_2_t0 (t0 Number(U8, 0)) Reg(U8) Some([36])
# Var inline_main_readline_2_t1 (t1 Number(U8, 0)) Reg(U8) Some([37])
# Var inline_main_readline_2_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_main_readline_2_t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_main_readline_2_t12 (t12 Number(USIZE, 1)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_main_readline_2_t2 (t2 Ident("ch")) Reg(U8) Some([36])
# Var inline_main_readline_2_t3 (t3 Number(U8, 13)) Reg(U8) Some([37])
# Var inline_main_readline_2_t4 (t4 Ident("ch")) Reg(U8) Some([36])
# Var inline_main_readline_2_t5 (t5 Number(U8, 10)) Reg(U8) Some([37])
# Var inline_main_readline_2_t6 (t6 Ident("buf")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_main_readline_2_t7 (t7 Number(U8, 0)) Reg(U8) Some([36])
# Var inline_main_readline_2_t8 (t8 Ident("buf")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_main_readline_2_t9 (t9 Ident("ch")) Reg(U8) Some([36])
# Var p_byte (Local p_byte Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var t0 (Stack size negated) Reg(U32) Some([24, 25, 26, 27])
# Var t1 (t1 Number(U8, 82)) Reg(U8) Some([28])
# Var t10 (t10 AddressOf(Index("buf", Number(U8, 0)))) Reg(U32) Some([32, 33, 34, 35])
# Var t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }) Reg(U32) Some([32, 33, 34, 35])
# Var t12 (t12 Ident("__frame_pointer")) Reg(U32) Some([44, 45, 46, 47])
# Var t13 (t13 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) Reg(U32) Some([32, 33, 34, 35])
# Var t14 (t14 Number(U8, 0)) Reg(U8) Some([28])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }) Reg(U32) Some([32, 33, 34, 35])
# Var t16 (t16 Ident("__frame_pointer")) Reg(U32) Some([44, 45, 46, 47])
# Var t17 (t17 Number(USIZE, 0)) Reg(U32) Some([32, 33, 34, 35])
# Var t18 (t18 Ident("ch")) Reg(U8) Some([28])
# Var t19 (t19 Number(U8, 114)) Reg(U8) Some([36])
# Var t2 (t2 Number(U8, 69)) Reg(U8) Some([28])
# Var t20 (t20 Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })) Reg(U8) Some([48])
# Var t21 (t21 Deref(Ident("p_byte"))) Reg(U8) Some([28])
# Var t22 (t22 Ident("p_byte")) Reg(U32) Some([32, 33, 34, 35])
# Var t23 (t23 Number(U8, 10)) Reg(U8) Some([28])
# Var t24 (t24 Ident("ch")) Reg(U8) Some([28])
# Var t25 (t25 Number(U8, 119)) Reg(U8) Some([36])
# Var t26 (t26 Ident("p_byte")) Reg(U32) Some([32, 33, 34, 35])
# Var t27 (t27 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })) Reg(U8) Some([36])
# Var t28 (t28 AddressOf(Index("buf", Number(USIZE, 1)))) Reg(U32) Some([40, 41, 42, 43])
# Var t29 (t29 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }) Reg(U32) Some([40, 41, 42, 43])
# Var t3 (t3 Number(U8, 65)) Reg(U8) Some([28])
# Var t30 (t30 Ident("__frame_pointer")) Reg(U32) Some([44, 45, 46, 47])
# Var t31 (t31 Number(USIZE, 1)) Reg(U32) Some([40, 41, 42, 43])
# Var t32 (t32 Ident("ch")) Reg(U8) Some([28])
# Var t33 (t33 Number(U8, 110)) Reg(U8) Some([36])
# Var t34 (t34 Ident("addr")) Reg(U32) Some([24, 25, 26, 27])
# Var t35 (t35 Number(USIZE, 1)) Reg(U32) Some([32, 33, 34, 35])
# Var t36 (t36 Ident("ch")) Reg(U8) Some([28])
# Var t37 (t37 Number(U8, 97)) Reg(U8) Some([36])
# Var t38 (t38 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })) Reg(U8) Some([48])
# Var t39 (t39 Index("addr", Number(USIZE, 3))) Reg(U8) Some([49])
# Var t4 (t4 Number(U8, 68)) Reg(U8) Some([28])
# Var t40 (t40 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })) Reg(U8) Some([48])
# Var t41 (t41 Index("addr", Number(USIZE, 2))) Reg(U8) Some([49])
# Var t42 (t42 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })) Reg(U8) Some([48])
# Var t43 (t43 Index("addr", Number(USIZE, 1))) Reg(U8) Some([49])
# Var t44 (t44 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })) Reg(U8) Some([48])
# Var t45 (t45 Index("addr", Number(USIZE, 0))) Reg(U8) Some([49])
# Var t46 (t46 Number(U8, 10)) Reg(U8) Some([28])
# Var t47 (t47 Ident("ch")) Reg(U8) Some([28])
# Var t48 (t48 Number(U8, 115)) Reg(U8) Some([36])
# Var t49 (t49 Index("buf", Ident("i"))) Reg(U8) Some([36])
# Var t5 (t5 Number(U8, 89)) Reg(U8) Some([28])
# Var t50 (t50 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([40, 41, 42, 43])
# Var t51 (t51 Ident("__frame_pointer")) Reg(U32) Some([44, 45, 46, 47])
# Var t52 (t52 Ident("i")) Reg(U32) Some([32, 33, 34, 35])
# Var t53 (t53 Number(U8, 0)) Reg(U8) Some([37])
# Var t54 (t54 Index("addr", Number(USIZE, 2))) Reg(U8) Some([49])
# Var t55 (t55 Index("addr", Number(USIZE, 1))) Reg(U8) Some([49])
# Var t56 (t56 Index("addr", Number(USIZE, 0))) Reg(U8) Some([49])
# Var t57 (t57 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })) Reg(U8) Some([36])
# Var t58 (t58 AddressOf(Index("buf", Ident("i")))) Reg(U32) Some([40, 41, 42, 43])
# Var t59 (t59 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([40, 41, 42, 43])
# Var t6 (t6 Number(U8, 10)) Reg(U8) Some([28])
# Var t60 (t60 Ident("__frame_pointer")) Reg(U32) Some([44, 45, 46, 47])
# Var t61 (t61 Ident("i")) Reg(U32) Some([32, 33, 34, 35])
# Var t62 (t62 Ident("i")) Reg(U32) Some([32, 33, 34, 35])
# Var t63 (t63 Number(USIZE, 2)) Reg(U32) Some([40, 41, 42, 43])
# Var t64 (t64 Ident("ch")) Reg(U8) Some([28])
# Var t65 (t65 Number(U8, 113)) Reg(U8) Some([36])
# Var t66 (t66 Number(U8, 0)) Reg(U8) Some([49])
# Var t67 (Stack size) Reg(U32) Some([32, 33, 34, 35])
# Var t68 (t68 Ident("ch")) Reg(U8) Some([28])
# Var t69 (t69 Number(U8, 105)) Reg(U8) Some([36])
# Var t7 (t7 Number(U8, 0)) Reg(U8) Some([28])
# Var t70 (t70 Number(U8, 66)) Reg(U8) Some([28])
# Var t71 (t71 Number(U8, 111)) Reg(U8) Some([28])
# Var t72 (t72 Number(U8, 111)) Reg(U8) Some([28])
# Var t73 (t73 Number(U8, 116)) Reg(U8) Some([28])
# Var t74 (t74 Number(U8, 114)) Reg(U8) Some([28])
# Var t75 (t75 Number(U8, 97)) Reg(U8) Some([28])
# Var t76 (t76 Number(U8, 109)) Reg(U8) Some([28])
# Var t77 (t77 Number(U8, 10)) Reg(U8) Some([28])
# Var t78 (t78 Number(U8, 72)) Reg(U8) Some([36])
# Var t79 (t79 Number(U8, 117)) Reg(U8) Some([36])
# Var t8 (t8 Number(U8, 0)) Reg(U8) Some([36])
# Var t80 (t80 Number(U8, 104)) Reg(U8) Some([36])
# Var t81 (t81 Number(U8, 63)) Reg(U8) Some([36])
# Var t82 (t82 Ident("ch")) Reg(U8) Some([28])
# Var t83 (t83 Number(U8, 10)) Reg(U8) Some([28])
# Var t84 (t84 Number(U8, 0)) Reg(U8) Some([49])
# Var t85 (Stack size) Reg(U32) Some([32, 33, 34, 35])
# Var t9 (t9 Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })) Reg(U8) Some([48])
# 00057 Instruction { source: "reserve 20 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xffffffec=4294967276)], resolved: None }
a4 0c ec ff ff ff 
# t0 <- 0xffffffecu32 
# 	SourceContext { contexts: [] }
# 0005d Instruction { source: "t0 <- 0xffffffecu32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0xffffffec=4294967276)], resolved: None }
80 18 ec ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 00063 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 00064 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x18), Register(0x0c)], resolved: None }
a2 0c 18 0c 
# 00068 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# addr <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00069 Instruction { source: "addr <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
80 18 00 00 00 00 
# i <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 0006f Instruction { source: "i <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000000=0)], resolved: None }
80 20 00 00 00 00 
# ch <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00075 Instruction { source: "ch <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
00 1c 00 
# t1 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 82) }", "Number(U8, 82)", "Number(U8, 82)"] }
# 00078 Instruction { source: "t1 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 82) }\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x52=82)], resolved: None }
00 1c 52 
# ttyout <- t1
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 82) }"] }
# 0007b Instruction { source: "ttyout <- t1\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 82) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t2 <- 0n69/0x45u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 69) }", "Number(U8, 69)", "Number(U8, 69)"] }
# 0007d Instruction { source: "t2 <- 0n69/0x45u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 69) }\", \"Number(U8, 69)\", \"Number(U8, 69)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x45=69)], resolved: None }
00 1c 45 
# ttyout <- t2
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 69) }"] }
# 00080 Instruction { source: "ttyout <- t2\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 69) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t3 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 65) }", "Number(U8, 65)", "Number(U8, 65)"] }
# 00082 Instruction { source: "t3 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 65) }\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x41=65)], resolved: None }
00 1c 41 
# ttyout <- t3
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 65) }"] }
# 00085 Instruction { source: "ttyout <- t3\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 65) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t4 <- 0n68/0x44u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 68) }", "Number(U8, 68)", "Number(U8, 68)"] }
# 00087 Instruction { source: "t4 <- 0n68/0x44u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 68) }\", \"Number(U8, 68)\", \"Number(U8, 68)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x44=68)], resolved: None }
00 1c 44 
# ttyout <- t4
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 68) }"] }
# 0008a Instruction { source: "ttyout <- t4\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 68) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t5 <- 0n89/0x59u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 89) }", "Number(U8, 89)", "Number(U8, 89)"] }
# 0008c Instruction { source: "t5 <- 0n89/0x59u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 89) }\", \"Number(U8, 89)\", \"Number(U8, 89)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x59=89)], resolved: None }
00 1c 59 
# ttyout <- t5
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 89) }"] }
# 0008f Instruction { source: "ttyout <- t5\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 89) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00091 Instruction { source: "t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
00 1c 0a 
# ttyout <- t6
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00094 Instruction { source: "ttyout <- t6\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# p_byte <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00096 Instruction { source: "p_byte <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000000=0)], resolved: None }
80 20 00 00 00 00 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }"] }
# main_while_predicate_0
# t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0009c Instruction { source: "t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
00 1c 00 
# t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0009f Instruction { source: "t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x00=0)], resolved: None }
00 24 00 
# if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 000a2 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x24)], resolved: None }
25 1c 24 
# 000a5 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_1)], resolved: None }
42 ad 00 00 
# 000a9 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
40 76 03 00 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }"] }
# main_while_body_1
# t12 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 000ad Instruction { source: "t12 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x2c)], resolved: None }
81 0c 2c 
# t14 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000b0 Instruction { source: "t14 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
00 1c 00 
# t13 U32 <- t14 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }"] }
# 000b3 Instruction { source: "Zero-pad for t13 U32 <- t14 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000000=0)], resolved: None }
80 20 00 00 00 00 
# 000b9 Instruction { source: "t13 U32 <- t14 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x20)], resolved: None }
16 1c 20 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })"] }
# 000bc Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 000bd Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x20), Register(0x20)], resolved: None }
a2 2c 20 20 
# 000c1 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# t10 <- t11 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))"] }
# optimized away noop copy Instruction { source: "t10 <- t11 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_readline_2_buf <- t10 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_buf <- t10 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# :inline_main_readline_2_readline_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_main_readline_2_readline_while_predicate_0
# inline_main_readline_2_t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000c2 Instruction { source: "inline_main_readline_2_t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x00=0)], resolved: None }
00 24 00 
# inline_main_readline_2_t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000c5 Instruction { source: "inline_main_readline_2_t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x25), Constant8(0x00=0)], resolved: None }
00 25 00 
# if inline_main_readline_2_t0 == inline_main_readline_2_t1 then 'inline_main_readline_2_readline_while_body_1' else 'inline_main_readline_2_readline_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 000c8 Instruction { source: "if inline_main_readline_2_t0 == inline_main_readline_2_t1 then 'inline_main_readline_2_readline_while_body_1' else 'inline_main_readline_2_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x24), Register(0x25)], resolved: None }
25 24 25 
# 000cb Instruction { source: "if inline_main_readline_2_t0 == inline_main_readline_2_t1 then 'inline_main_readline_2_readline_while_body_1' else 'inline_main_readline_2_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_2_readline_while_body_1)], resolved: None }
42 d3 00 00 
# 000cf Instruction { source: "if inline_main_readline_2_t0 == inline_main_readline_2_t1 then 'inline_main_readline_2_readline_while_body_1' else 'inline_main_readline_2_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_readline_while_end_2)], resolved: None }
40 3f 01 00 
# :inline_main_readline_2_readline_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_main_readline_2_readline_while_body_1
# inline_main_readline_2_inline_readline_getchar_0_tty <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"tty\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 000d3 Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_tty <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"tty\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x26), Constant8(0x00=0)], resolved: None }
00 26 00 
# :inline_main_readline_2_inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }"] }
# inline_main_readline_2_inline_readline_getchar_0_getchar_while_predicate_0
# inline_main_readline_2_inline_readline_getchar_0_t1 <- inline_main_readline_2_inline_readline_getchar_0_tty U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Ident(\"tty\")", "Ident(\"tty\")"] }
# 000d6 Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_t1 <- inline_main_readline_2_inline_readline_getchar_0_tty U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Ident(\\\"tty\\\")\", \"Ident(\\\"tty\\\")\"] }", opcode: Copy8, args: [Register(0x26), Register(0x24)], resolved: None }
16 26 24 
# inline_main_readline_2_inline_readline_getchar_0_t2 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 000d9 Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_t2 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x25), Constant8(0x80=128)], resolved: None }
00 25 80 
# inline_main_readline_2_inline_readline_getchar_0_t0 <- inline_main_readline_2_inline_readline_getchar_0_t1 BitwiseAnd inline_main_readline_2_inline_readline_getchar_0_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))"] }
# 000dc Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_t0 <- inline_main_readline_2_inline_readline_getchar_0_t1 BitwiseAnd inline_main_readline_2_inline_readline_getchar_0_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x24), Register(0x25), Register(0x24)], resolved: None }
33 24 25 24 
# inline_main_readline_2_inline_readline_getchar_0_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000e0 Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x25), Constant8(0x00=0)], resolved: None }
00 25 00 
# if inline_main_readline_2_inline_readline_getchar_0_t0 == inline_main_readline_2_inline_readline_getchar_0_t3 then 'inline_main_readline_2_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_2_inline_readline_getchar_0_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }"] }
# 000e3 Instruction { source: "if inline_main_readline_2_inline_readline_getchar_0_t0 == inline_main_readline_2_inline_readline_getchar_0_t3 then 'inline_main_readline_2_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_2_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x24), Register(0x25)], resolved: None }
25 24 25 
# 000e6 Instruction { source: "if inline_main_readline_2_inline_readline_getchar_0_t0 == inline_main_readline_2_inline_readline_getchar_0_t3 then 'inline_main_readline_2_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_2_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_2_inline_readline_getchar_0_getchar_while_body_1)], resolved: None }
42 ee 00 00 
# 000ea Instruction { source: "if inline_main_readline_2_inline_readline_getchar_0_t0 == inline_main_readline_2_inline_readline_getchar_0_t3 then 'inline_main_readline_2_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_2_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_inline_readline_getchar_0_getchar_while_end_2)], resolved: None }
40 f4 00 00 
# :inline_main_readline_2_inline_readline_getchar_0_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }"] }
# inline_main_readline_2_inline_readline_getchar_0_getchar_while_body_1
# inline_main_readline_2_inline_readline_getchar_0_tty <- ttyin
# 	SourceContext { contexts: ["Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }", "TtyIn"] }
# 000ee Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_tty <- ttyin\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }\", \"TtyIn\"] }", opcode: TtyIn, args: [Register(0x26)], resolved: None }
12 26 
# goto inline_main_readline_2_inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: [] }
# 000f0 Instruction { source: "goto inline_main_readline_2_inline_readline_getchar_0_getchar_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_inline_readline_getchar_0_getchar_while_predicate_0)], resolved: None }
40 d6 00 00 
# :inline_main_readline_2_inline_readline_getchar_0_getchar_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_readline_2_inline_readline_getchar_0_getchar_while_end_2
# inline_main_readline_2_inline_readline_getchar_0_t5 <- inline_main_readline_2_inline_readline_getchar_0_tty U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Ident(\"tty\")", "Ident(\"tty\")"] }
# 000f4 Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_t5 <- inline_main_readline_2_inline_readline_getchar_0_tty U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Ident(\\\"tty\\\")\", \"Ident(\\\"tty\\\")\"] }", opcode: Copy8, args: [Register(0x26), Register(0x24)], resolved: None }
16 26 24 
# inline_main_readline_2_inline_readline_getchar_0_t6 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 000f7 Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_t6 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x25), Constant8(0x7f=127)], resolved: None }
00 25 7f 
# inline_main_readline_2_inline_readline_getchar_0_t4 <- inline_main_readline_2_inline_readline_getchar_0_t5 BitwiseAnd inline_main_readline_2_inline_readline_getchar_0_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))"] }
# 000fa Instruction { source: "inline_main_readline_2_inline_readline_getchar_0_t4 <- inline_main_readline_2_inline_readline_getchar_0_t5 BitwiseAnd inline_main_readline_2_inline_readline_getchar_0_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x24), Register(0x25), Register(0x24)], resolved: None }
33 24 25 24 
# inline_main_readline_2_ch <- inline_main_readline_2_inline_readline_getchar_0_t4 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_ch <- inline_main_readline_2_inline_readline_getchar_0_t4 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\"] }", opcode: Copy8, args: [Register(0x24), Register(0x24)], resolved: None }
# goto inline_main_readline_2_inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_readline_2_inline_readline_getchar_0_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_inline_readline_getchar_0_function_end_getchar)], resolved: None }
# :inline_main_readline_2_inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_main_readline_2_inline_readline_getchar_0_function_end_getchar
# inline_main_readline_2_t2 <- inline_main_readline_2_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_t2 <- inline_main_readline_2_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_main_readline_2_t3 <- 0n13/0x0du8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Number(U8, 13)", "Number(U8, 13)"] }
# 000fe Instruction { source: "inline_main_readline_2_t3 <- 0n13/0x0du8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Number(U8, 13)\", \"Number(U8, 13)\"] }", opcode: LoadImm8, args: [Register(0x25), Constant8(0x0d=13)], resolved: None }
00 25 0d 
# if inline_main_readline_2_t2 == inline_main_readline_2_t3 then 'inline_main_readline_2_readline_if_true_0_4' else 'inline_main_readline_2_readline_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }"] }
# 00101 Instruction { source: "if inline_main_readline_2_t2 == inline_main_readline_2_t3 then 'inline_main_readline_2_readline_if_true_0_4' else 'inline_main_readline_2_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: Cmp8, args: [Register(0x24), Register(0x25)], resolved: None }
25 24 25 
# 00104 Instruction { source: "if inline_main_readline_2_t2 == inline_main_readline_2_t3 then 'inline_main_readline_2_readline_if_true_0_4' else 'inline_main_readline_2_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_2_readline_if_true_0_4)], resolved: None }
42 0c 01 00 
# 00108 Instruction { source: "if inline_main_readline_2_t2 == inline_main_readline_2_t3 then 'inline_main_readline_2_readline_if_true_0_4' else 'inline_main_readline_2_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_readline_if_else_0_5)], resolved: None }
40 10 01 00 
# :inline_main_readline_2_readline_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_2_readline_if_true_0_4
# goto inline_main_readline_2_readline_if_end_3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# 0010c Instruction { source: "goto inline_main_readline_2_readline_if_end_3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_readline_if_end_3)], resolved: None }
40 3b 01 00 
# :inline_main_readline_2_readline_if_else_0_5
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_2_readline_if_else_0_5
# inline_main_readline_2_t4 <- inline_main_readline_2_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_t4 <- inline_main_readline_2_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_main_readline_2_t5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00110 Instruction { source: "inline_main_readline_2_t5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x25), Constant8(0x0a=10)], resolved: None }
00 25 0a 
# if inline_main_readline_2_t4 == inline_main_readline_2_t5 then 'inline_main_readline_2_readline_if_true_1_6' else 'inline_main_readline_2_readline_if_else_1_7'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 00113 Instruction { source: "if inline_main_readline_2_t4 == inline_main_readline_2_t5 then 'inline_main_readline_2_readline_if_true_1_6' else 'inline_main_readline_2_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x24), Register(0x25)], resolved: None }
25 24 25 
# 00116 Instruction { source: "if inline_main_readline_2_t4 == inline_main_readline_2_t5 then 'inline_main_readline_2_readline_if_true_1_6' else 'inline_main_readline_2_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_2_readline_if_true_1_6)], resolved: None }
42 1e 01 00 
# 0011a Instruction { source: "if inline_main_readline_2_t4 == inline_main_readline_2_t5 then 'inline_main_readline_2_readline_if_true_1_6' else 'inline_main_readline_2_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_readline_if_else_1_7)], resolved: None }
40 2c 01 00 
# :inline_main_readline_2_readline_if_true_1_6
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_2_readline_if_true_1_6
# inline_main_readline_2_t6 <- inline_main_readline_2_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_t6 <- inline_main_readline_2_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_readline_2_t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0011e Instruction { source: "inline_main_readline_2_t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x00=0)], resolved: None }
00 24 00 
# mem[inline_main_readline_2_t6] <- inline_main_readline_2_t7 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }"] }
# 00121 Instruction { source: "mem[inline_main_readline_2_t6] <- inline_main_readline_2_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x24), Register(0x20)], resolved: None }
11 24 20 
# goto inline_main_readline_2_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 00124 Instruction { source: "goto inline_main_readline_2_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_function_end_readline)], resolved: None }
40 43 01 00 
# goto inline_main_readline_2_readline_if_end_3
# 	SourceContext { contexts: [] }
# 00128 Instruction { source: "goto inline_main_readline_2_readline_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_readline_if_end_3)], resolved: None }
40 3b 01 00 
# :inline_main_readline_2_readline_if_else_1_7
# 	SourceContext { contexts: [] }
# inline_main_readline_2_readline_if_else_1_7
# inline_main_readline_2_t8 <- inline_main_readline_2_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_t8 <- inline_main_readline_2_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_readline_2_t9 <- inline_main_readline_2_ch U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_t9 <- inline_main_readline_2_ch U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x24), Register(0x24)], resolved: None }
# mem[inline_main_readline_2_t8] <- inline_main_readline_2_t9 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }"] }
# 0012c Instruction { source: "mem[inline_main_readline_2_t8] <- inline_main_readline_2_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x24), Register(0x20)], resolved: None }
11 24 20 
# inline_main_readline_2_t11 <- inline_main_readline_2_buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_t11 <- inline_main_readline_2_buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_readline_2_t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0012f Instruction { source: "inline_main_readline_2_t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000001=1)], resolved: None }
80 28 01 00 00 00 
# inline_main_readline_2_t10 <- inline_main_readline_2_t11 Add inline_main_readline_2_t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))"] }
# 00135 Instruction { source: "inline_main_readline_2_t10 <- inline_main_readline_2_t11 Add inline_main_readline_2_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 00136 Instruction { source: "inline_main_readline_2_t10 <- inline_main_readline_2_t11 Add inline_main_readline_2_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x28), Register(0x20)], resolved: None }
a2 20 28 20 
# 0013a Instruction { source: "inline_main_readline_2_t10 <- inline_main_readline_2_t11 Add inline_main_readline_2_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# inline_main_readline_2_buf <- inline_main_readline_2_t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_readline_2_buf <- inline_main_readline_2_t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# :inline_main_readline_2_readline_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_readline_2_readline_if_end_3
# goto inline_main_readline_2_readline_while_predicate_0
# 	SourceContext { contexts: [] }
# 0013b Instruction { source: "goto inline_main_readline_2_readline_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_readline_while_predicate_0)], resolved: None }
40 c2 00 00 
# :inline_main_readline_2_readline_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_readline_2_readline_while_end_2
# goto inline_main_readline_2_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0013f Instruction { source: "goto inline_main_readline_2_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_2_function_end_readline)], resolved: None }
40 43 01 00 
# :inline_main_readline_2_function_end_readline
# 	SourceContext { contexts: [] }
# inline_main_readline_2_function_end_readline
# t16 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00143 Instruction { source: "t16 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x2c)], resolved: None }
81 0c 2c 
# t17 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00146 Instruction { source: "t17 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000000=0)], resolved: None }
80 20 00 00 00 00 
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 0014c Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 0014d Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x20), Register(0x20)], resolved: None }
a2 2c 20 20 
# 00151 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# ch <- mem[t15] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))"] }
# 00152 Instruction { source: "ch <- mem[t15] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\"] }", opcode: Load8, args: [Register(0x20), Register(0x1c)], resolved: None }
10 20 1c 
# t18 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t18 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t19 <- 0n114/0x72u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }", "Number(U8, 114)", "Number(U8, 114)"] }
# 00155 Instruction { source: "t19 <- 0n114/0x72u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\", \"Number(U8, 114)\", \"Number(U8, 114)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x72=114)], resolved: None }
00 24 72 
# if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }"] }
# 00158 Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x24)], resolved: None }
25 1c 24 
# 0015b Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_4)], resolved: None }
42 63 01 00 
# 0015f Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_5)], resolved: None }
40 8b 01 00 
# :main_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }"] }
# main_if_true_0_4
# p_byte <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }", "Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") }", "Ident(\"addr\")"] }
# 00163 Instruction { source: "p_byte <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }\", \"Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") }\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x20)], resolved: None }
81 18 20 
# t22 <- p_byte U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Deref(Ident(\"p_byte\"))", "Deref(Ident(\"p_byte\"))", "Ident(\"p_byte\")", "Ident(\"p_byte\")"] }
# optimized away noop copy Instruction { source: "t22 <- p_byte U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Ident(\\\"p_byte\\\")\", \"Ident(\\\"p_byte\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t21 <- mem[t22] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Deref(Ident(\"p_byte\"))", "Deref(Ident(\"p_byte\"))"] }
# 00166 Instruction { source: "t21 <- mem[t22] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Deref(Ident(\\\"p_byte\\\"))\"] }", opcode: Load8, args: [Register(0x20), Register(0x1c)], resolved: None }
10 20 1c 
# None <= call printHex(t21,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })"] }
# 00169 Instruction { source: "Arg0[a]=t21 None <= call printHex(t21,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
16 1c 00 
# Registers used by this function: {24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {66, 67, 68, 69, 70}
# Registers to save: []
# 0016c Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 00172 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c 7c 01 00 00 
# 00178 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: JmpImm, args: [Label24(:printHex)], resolved: None }
40 67 04 00 
# 0017c Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# t23 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00182 Instruction { source: "t23 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
00 1c 0a 
# ttyout <- t23
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00185 Instruction { source: "ttyout <- t23\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00187 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
40 72 03 00 
# :main_if_else_0_5
# 	SourceContext { contexts: [] }
# main_if_else_0_5
# t24 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t24 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t25 <- 0n119/0x77u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }", "Number(U8, 119)", "Number(U8, 119)"] }
# 0018b Instruction { source: "t25 <- 0n119/0x77u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\", \"Number(U8, 119)\", \"Number(U8, 119)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x77=119)], resolved: None }
00 24 77 
# if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }"] }
# 0018e Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x24)], resolved: None }
25 1c 24 
# 00191 Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: JzImm, args: [Label24(main_if_true_1_6)], resolved: None }
42 99 01 00 
# 00195 Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_1_7)], resolved: None }
40 ce 01 00 
# :main_if_true_1_6
# 	SourceContext { contexts: [] }
# main_if_true_1_6
# p_byte <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }", "Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") }", "Ident(\"addr\")"] }
# 00199 Instruction { source: "p_byte <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }\", \"Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") }\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x20)], resolved: None }
81 18 20 
# t26 <- p_byte U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Ident(\"p_byte\")", "Ident(\"p_byte\")"] }
# optimized away noop copy Instruction { source: "t26 <- p_byte U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Ident(\\\"p_byte\\\")\", \"Ident(\\\"p_byte\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t30 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 0019c Instruction { source: "t30 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x2c)], resolved: None }
81 0c 2c 
# t31 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0019f Instruction { source: "t31 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000001=1)], resolved: None }
80 28 01 00 00 00 
# t29 <- t30 Add t31
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))"] }
# 001a5 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 001a6 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x28), Register(0x28)], resolved: None }
a2 2c 28 28 
# 001aa Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# t28 <- t29 U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "t28 <- t29 U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# Some(t27) <= call parseHex(t28,)
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })"] }
# 001ab Instruction { source: "Arg0[c]=t28 Some(t27) <= call parseHex(t28,)\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\"] }", opcode: Copy32, args: [Register(0x28), Register(0x00)], resolved: None }
81 28 00 
# Registers used by this function: {24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65}
# Registers to save: []
# 001ae Instruction { source: "PseudoCall(Label24(:parseHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 001b4 Instruction { source: "PseudoCall(Label24(:parseHex))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c be 01 00 00 
# 001ba Instruction { source: "PseudoCall(Label24(:parseHex))", opcode: JmpImm, args: [Label24(:parseHex)], resolved: None }
40 95 03 00 
# 001be Instruction { source: "PseudoCall(Label24(:parseHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# 001c4 Instruction { source: "Some(t27) <= call parseHex(t28,)\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x24)], resolved: None }
16 00 24 
# mem[t26] <- t27 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }"] }
# 001c7 Instruction { source: "mem[t26] <- t27 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\"] }", opcode: Store8, args: [Register(0x24), Register(0x20)], resolved: None }
11 24 20 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 001ca Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
40 72 03 00 
# :main_if_else_1_7
# 	SourceContext { contexts: [] }
# main_if_else_1_7
# t32 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t32 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t33 <- 0n110/0x6eu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }", "Number(U8, 110)", "Number(U8, 110)"] }
# 001ce Instruction { source: "t33 <- 0n110/0x6eu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\", \"Number(U8, 110)\", \"Number(U8, 110)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x6e=110)], resolved: None }
00 24 6e 
# if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }"] }
# 001d1 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x24)], resolved: None }
25 1c 24 
# 001d4 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: JzImm, args: [Label24(main_if_true_2_8)], resolved: None }
42 dc 01 00 
# 001d8 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_2_9)], resolved: None }
40 ec 01 00 
# :main_if_true_2_8
# 	SourceContext { contexts: [] }
# main_if_true_2_8
# t34 <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))", "Ident(\"addr\")", "Ident(\"addr\")"] }
# optimized away noop copy Instruction { source: "t34 <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\", \"Ident(\\\"addr\\\")\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t35 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 001dc Instruction { source: "t35 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000001=1)], resolved: None }
80 20 01 00 00 00 
# addr <- t34 Add t35
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))"] }
# 001e2 Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 001e3 Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
a2 18 20 18 
# 001e7 Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 001e8 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
40 72 03 00 
# :main_if_else_2_9
# 	SourceContext { contexts: [] }
# main_if_else_2_9
# t36 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t36 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t37 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 001ec Instruction { source: "t37 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x61=97)], resolved: None }
00 24 61 
# if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 001ef Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x24)], resolved: None }
25 1c 24 
# 001f2 Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JzImm, args: [Label24(main_if_true_3_10)], resolved: None }
42 fa 01 00 
# 001f6 Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_3_11)], resolved: None }
40 73 02 00 
# :main_if_true_3_10
# 	SourceContext { contexts: [] }
# main_if_true_3_10
# t39 <- addr[0x03..0x04] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Index(\"addr\", Number(USIZE, 3))", "Index(\"addr\", Number(USIZE, 3))"] }
# 001fa Instruction { source: "t39 <- addr[0x03..0x04] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Index(\\\"addr\\\", Number(USIZE, 3))\", \"Index(\\\"addr\\\", Number(USIZE, 3))\"] }", opcode: Copy8, args: [Register(0x1b), Register(0x31)], resolved: None }
16 1b 31 
# None <= call printHex(t39,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })"] }
# 001fd Instruction { source: "Arg0[a]=t39 None <= call printHex(t39,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\"] }", opcode: Copy8, args: [Register(0x31), Register(0x00)], resolved: None }
16 31 00 
# Registers used by this function: {24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {66, 67, 68, 69, 70}
# Registers to save: []
# 00200 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 00206 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c 10 02 00 00 
# 0020c Instruction { source: "PseudoCall(Label24(:printHex))", opcode: JmpImm, args: [Label24(:printHex)], resolved: None }
40 67 04 00 
# 00210 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# t41 <- addr[0x02..0x03] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Index(\"addr\", Number(USIZE, 2))", "Index(\"addr\", Number(USIZE, 2))"] }
# 00216 Instruction { source: "t41 <- addr[0x02..0x03] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Index(\\\"addr\\\", Number(USIZE, 2))\", \"Index(\\\"addr\\\", Number(USIZE, 2))\"] }", opcode: Copy8, args: [Register(0x1a), Register(0x31)], resolved: None }
16 1a 31 
# None <= call printHex(t41,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })"] }
# 00219 Instruction { source: "Arg0[a]=t41 None <= call printHex(t41,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\"] }", opcode: Copy8, args: [Register(0x31), Register(0x00)], resolved: None }
16 31 00 
# Registers used by this function: {24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {66, 67, 68, 69, 70}
# Registers to save: []
# 0021c Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 00222 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c 2c 02 00 00 
# 00228 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: JmpImm, args: [Label24(:printHex)], resolved: None }
40 67 04 00 
# 0022c Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# t43 <- addr[0x01..0x02] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Index(\"addr\", Number(USIZE, 1))", "Index(\"addr\", Number(USIZE, 1))"] }
# 00232 Instruction { source: "t43 <- addr[0x01..0x02] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Index(\\\"addr\\\", Number(USIZE, 1))\", \"Index(\\\"addr\\\", Number(USIZE, 1))\"] }", opcode: Copy8, args: [Register(0x19), Register(0x31)], resolved: None }
16 19 31 
# None <= call printHex(t43,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })"] }
# 00235 Instruction { source: "Arg0[a]=t43 None <= call printHex(t43,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\"] }", opcode: Copy8, args: [Register(0x31), Register(0x00)], resolved: None }
16 31 00 
# Registers used by this function: {24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {66, 67, 68, 69, 70}
# Registers to save: []
# 00238 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 0023e Instruction { source: "PseudoCall(Label24(:printHex))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c 48 02 00 00 
# 00244 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: JmpImm, args: [Label24(:printHex)], resolved: None }
40 67 04 00 
# 00248 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# t45 <- addr[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Index(\"addr\", Number(USIZE, 0))", "Index(\"addr\", Number(USIZE, 0))"] }
# 0024e Instruction { source: "t45 <- addr[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Index(\\\"addr\\\", Number(USIZE, 0))\", \"Index(\\\"addr\\\", Number(USIZE, 0))\"] }", opcode: Copy8, args: [Register(0x18), Register(0x31)], resolved: None }
16 18 31 
# None <= call printHex(t45,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })"] }
# 00251 Instruction { source: "Arg0[a]=t45 None <= call printHex(t45,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\"] }", opcode: Copy8, args: [Register(0x31), Register(0x00)], resolved: None }
16 31 00 
# Registers used by this function: {24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {66, 67, 68, 69, 70}
# Registers to save: []
# 00254 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 0025a Instruction { source: "PseudoCall(Label24(:printHex))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c 64 02 00 00 
# 00260 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: JmpImm, args: [Label24(:printHex)], resolved: None }
40 67 04 00 
# 00264 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# t46 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0026a Instruction { source: "t46 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
00 1c 0a 
# ttyout <- t46
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 0026d Instruction { source: "ttyout <- t46\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 0026f Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
40 72 03 00 
# :main_if_else_3_11
# 	SourceContext { contexts: [] }
# main_if_else_3_11
# t47 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t47 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t48 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 00273 Instruction { source: "t48 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x73=115)], resolved: None }
00 24 73 
# if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 00276 Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x24)], resolved: None }
25 1c 24 
# 00279 Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(main_if_true_4_12)], resolved: None }
42 81 02 00 
# 0027d Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_4_13)], resolved: None }
40 f1 02 00 
# :main_if_true_4_12
# 	SourceContext { contexts: [] }
# main_if_true_4_12
# i <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }", "Number(USIZE, 1)"] }
# 00281 Instruction { source: "i <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000001=1)], resolved: None }
80 20 01 00 00 00 
# addr <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00287 Instruction { source: "addr <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
80 18 00 00 00 00 
# :main_while_predicate_14
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }"] }
# main_while_predicate_14
# t51 <- __frame_pointer U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 0028d Instruction { source: "t51 <- __frame_pointer U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x2c)], resolved: None }
81 0c 2c 
# t52 <- i U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t52 <- i U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t50 <- t51 Add t52
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))"] }
# 00290 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 00291 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x20), Register(0x28)], resolved: None }
a2 2c 20 28 
# 00295 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# t49 <- mem[t50] U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))"] }
# 00296 Instruction { source: "t49 <- mem[t50] U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\"] }", opcode: Load8, args: [Register(0x28), Register(0x24)], resolved: None }
10 28 24 
# t53 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00299 Instruction { source: "t53 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x25), Constant8(0x00=0)], resolved: None }
00 25 00 
# if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }"] }
# 0029c Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x24), Register(0x25)], resolved: None }
25 24 25 
# 0029f Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_end_16)], resolved: None }
42 ed 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_body_15)], resolved: None }
# :main_while_body_15
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }"] }
# main_while_body_15
# t54 <- addr[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }", "Index(\"addr\", Number(USIZE, 2))", "Index(\"addr\", Number(USIZE, 2))"] }
# 002a3 Instruction { source: "t54 <- addr[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }\", \"Index(\\\"addr\\\", Number(USIZE, 2))\", \"Index(\\\"addr\\\", Number(USIZE, 2))\"] }", opcode: Copy8, args: [Register(0x1a), Register(0x31)], resolved: None }
16 1a 31 
# addr[0x03..0x04] <- t54 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }"] }
# 002a6 Instruction { source: "addr[0x03..0x04] <- t54 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }\"] }", opcode: Copy8, args: [Register(0x31), Register(0x1b)], resolved: None }
16 31 1b 
# t55 <- addr[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }", "Index(\"addr\", Number(USIZE, 1))", "Index(\"addr\", Number(USIZE, 1))"] }
# 002a9 Instruction { source: "t55 <- addr[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }\", \"Index(\\\"addr\\\", Number(USIZE, 1))\", \"Index(\\\"addr\\\", Number(USIZE, 1))\"] }", opcode: Copy8, args: [Register(0x19), Register(0x31)], resolved: None }
16 19 31 
# addr[0x02..0x03] <- t55 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }"] }
# 002ac Instruction { source: "addr[0x02..0x03] <- t55 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }\"] }", opcode: Copy8, args: [Register(0x31), Register(0x1a)], resolved: None }
16 31 1a 
# t56 <- addr[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }", "Index(\"addr\", Number(USIZE, 0))", "Index(\"addr\", Number(USIZE, 0))"] }
# 002af Instruction { source: "t56 <- addr[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }\", \"Index(\\\"addr\\\", Number(USIZE, 0))\", \"Index(\\\"addr\\\", Number(USIZE, 0))\"] }", opcode: Copy8, args: [Register(0x18), Register(0x31)], resolved: None }
16 18 31 
# addr[0x01..0x02] <- t56 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }"] }
# 002b2 Instruction { source: "addr[0x01..0x02] <- t56 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }\"] }", opcode: Copy8, args: [Register(0x31), Register(0x19)], resolved: None }
16 31 19 
# t60 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 002b5 Instruction { source: "t60 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x2c)], resolved: None }
81 0c 2c 
# t61 <- i U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t61 <- i U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t59 <- t60 Add t61
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))"] }
# 002b8 Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 002b9 Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x20), Register(0x28)], resolved: None }
a2 2c 20 28 
# 002bd Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# t58 <- t59 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))"] }
# optimized away noop copy Instruction { source: "t58 <- t59 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# Some(t57) <= call parseHex(t58,)
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })"] }
# 002be Instruction { source: "Arg0[c]=t58 Some(t57) <= call parseHex(t58,)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\"] }", opcode: Copy32, args: [Register(0x28), Register(0x00)], resolved: None }
81 28 00 
# Registers used by this function: {24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65}
# Registers to save: []
# 002c1 Instruction { source: "PseudoCall(Label24(:parseHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 002c7 Instruction { source: "PseudoCall(Label24(:parseHex))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c d1 02 00 00 
# 002cd Instruction { source: "PseudoCall(Label24(:parseHex))", opcode: JmpImm, args: [Label24(:parseHex)], resolved: None }
40 95 03 00 
# 002d1 Instruction { source: "PseudoCall(Label24(:parseHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# 002d7 Instruction { source: "Some(t57) <= call parseHex(t58,)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x24)], resolved: None }
16 00 24 
# addr[0x00..0x01] <- t57 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }"] }
# 002da Instruction { source: "addr[0x00..0x01] <- t57 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\"] }", opcode: Copy8, args: [Register(0x24), Register(0x18)], resolved: None }
16 24 18 
# t62 <- i U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t62 <- i U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t63 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 002dd Instruction { source: "t63 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000002=2)], resolved: None }
80 28 02 00 00 00 
# i <- t62 Add t63
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))"] }
# 002e3 Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 002e4 Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x28), Register(0x20)], resolved: None }
a2 20 28 20 
# 002e8 Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# goto main_while_predicate_14
# 	SourceContext { contexts: [] }
# 002e9 Instruction { source: "goto main_while_predicate_14\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_14)], resolved: None }
40 8d 02 00 
# :main_while_end_16
# 	SourceContext { contexts: [] }
# main_while_end_16
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 002ed Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
40 72 03 00 
# :main_if_else_4_13
# 	SourceContext { contexts: [] }
# main_if_else_4_13
# t64 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t64 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t65 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 002f1 Instruction { source: "t65 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x71=113)], resolved: None }
00 24 71 
# if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 002f4 Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x24)], resolved: None }
25 1c 24 
# 002f7 Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(main_if_true_5_17)], resolved: None }
42 ff 02 00 
# 002fb Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_5_18)], resolved: None }
40 1d 03 00 
# :main_if_true_5_17
# 	SourceContext { contexts: [] }
# main_if_true_5_17
# t66 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 002ff Instruction { source: "t66 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x31), Constant8(0x00=0)], resolved: None }
00 31 00 
# t67 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00302 Instruction { source: "t67 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000014=20)], resolved: None }
80 20 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t67
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00308 Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 00309 Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x20), Register(0x0c)], resolved: None }
a2 0c 20 0c 
# 0030d Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# return Some(t66)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 0030e Instruction { source: "return Some(t66)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x31), Register(0x00)], resolved: None }
16 31 00 
# 00311 Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
a4 0c 14 00 00 00 
# 00317 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00319 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
40 72 03 00 
# :main_if_else_5_18
# 	SourceContext { contexts: [] }
# main_if_else_5_18
# t68 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t68 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t69 <- 0n105/0x69u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }", "Number(U8, 105)", "Number(U8, 105)"] }
# 0031d Instruction { source: "t69 <- 0n105/0x69u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\", \"Number(U8, 105)\", \"Number(U8, 105)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x69=105)], resolved: None }
00 24 69 
# if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }"] }
# 00320 Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x24)], resolved: None }
25 1c 24 
# 00323 Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: JzImm, args: [Label24(main_if_true_6_19)], resolved: None }
42 2b 03 00 
# 00327 Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_6_20)], resolved: None }
40 57 03 00 
# :main_if_true_6_19
# 	SourceContext { contexts: [] }
# main_if_true_6_19
# t70 <- 0n66/0x42u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 66) }", "Number(U8, 66)", "Number(U8, 66)"] }
# 0032b Instruction { source: "t70 <- 0n66/0x42u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 66) }\", \"Number(U8, 66)\", \"Number(U8, 66)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x42=66)], resolved: None }
00 1c 42 
# ttyout <- t70
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 66) }"] }
# 0032e Instruction { source: "ttyout <- t70\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 66) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t71 <- 0n111/0x6fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }", "Number(U8, 111)", "Number(U8, 111)"] }
# 00330 Instruction { source: "t71 <- 0n111/0x6fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\", \"Number(U8, 111)\", \"Number(U8, 111)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x6f=111)], resolved: None }
00 1c 6f 
# ttyout <- t71
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }"] }
# 00333 Instruction { source: "ttyout <- t71\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t72 <- 0n111/0x6fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }", "Number(U8, 111)", "Number(U8, 111)"] }
# 00335 Instruction { source: "t72 <- 0n111/0x6fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\", \"Number(U8, 111)\", \"Number(U8, 111)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x6f=111)], resolved: None }
00 1c 6f 
# ttyout <- t72
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }"] }
# 00338 Instruction { source: "ttyout <- t72\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t73 <- 0n116/0x74u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 116) }", "Number(U8, 116)", "Number(U8, 116)"] }
# 0033a Instruction { source: "t73 <- 0n116/0x74u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 116) }\", \"Number(U8, 116)\", \"Number(U8, 116)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x74=116)], resolved: None }
00 1c 74 
# ttyout <- t73
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 116) }"] }
# 0033d Instruction { source: "ttyout <- t73\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 116) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t74 <- 0n114/0x72u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 114) }", "Number(U8, 114)", "Number(U8, 114)"] }
# 0033f Instruction { source: "t74 <- 0n114/0x72u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 114) }\", \"Number(U8, 114)\", \"Number(U8, 114)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x72=114)], resolved: None }
00 1c 72 
# ttyout <- t74
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 114) }"] }
# 00342 Instruction { source: "ttyout <- t74\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 114) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t75 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 00344 Instruction { source: "t75 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x61=97)], resolved: None }
00 1c 61 
# ttyout <- t75
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }"] }
# 00347 Instruction { source: "ttyout <- t75\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t76 <- 0n109/0x6du8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 109) }", "Number(U8, 109)", "Number(U8, 109)"] }
# 00349 Instruction { source: "t76 <- 0n109/0x6du8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 109) }\", \"Number(U8, 109)\", \"Number(U8, 109)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x6d=109)], resolved: None }
00 1c 6d 
# ttyout <- t76
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 109) }"] }
# 0034c Instruction { source: "ttyout <- t76\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 109) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t77 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0034e Instruction { source: "t77 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
00 1c 0a 
# ttyout <- t77
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00351 Instruction { source: "ttyout <- t77\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00353 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
40 72 03 00 
# :main_if_else_6_20
# 	SourceContext { contexts: [] }
# main_if_else_6_20
# t78 <- 0n72/0x48u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 72) }", "Number(U8, 72)", "Number(U8, 72)"] }
# 00357 Instruction { source: "t78 <- 0n72/0x48u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 72) }\", \"Number(U8, 72)\", \"Number(U8, 72)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x48=72)], resolved: None }
00 24 48 
# ttyout <- t78
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 72) }"] }
# 0035a Instruction { source: "ttyout <- t78\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 72) }\"] }", opcode: TtyOut, args: [Register(0x24)], resolved: None }
13 24 
# t79 <- 0n117/0x75u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 117) }", "Number(U8, 117)", "Number(U8, 117)"] }
# 0035c Instruction { source: "t79 <- 0n117/0x75u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 117) }\", \"Number(U8, 117)\", \"Number(U8, 117)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x75=117)], resolved: None }
00 24 75 
# ttyout <- t79
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 117) }"] }
# 0035f Instruction { source: "ttyout <- t79\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 117) }\"] }", opcode: TtyOut, args: [Register(0x24)], resolved: None }
13 24 
# t80 <- 0n104/0x68u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 104) }", "Number(U8, 104)", "Number(U8, 104)"] }
# 00361 Instruction { source: "t80 <- 0n104/0x68u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 104) }\", \"Number(U8, 104)\", \"Number(U8, 104)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x68=104)], resolved: None }
00 24 68 
# ttyout <- t80
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 104) }"] }
# 00364 Instruction { source: "ttyout <- t80\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 104) }\"] }", opcode: TtyOut, args: [Register(0x24)], resolved: None }
13 24 
# t81 <- 0n63/0x3fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 63) }", "Number(U8, 63)", "Number(U8, 63)"] }
# 00366 Instruction { source: "t81 <- 0n63/0x3fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 63) }\", \"Number(U8, 63)\", \"Number(U8, 63)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x3f=63)], resolved: None }
00 24 3f 
# ttyout <- t81
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 63) }"] }
# 00369 Instruction { source: "ttyout <- t81\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 63) }\"] }", opcode: TtyOut, args: [Register(0x24)], resolved: None }
13 24 
# t82 <- ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t82 <- ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# ttyout <- t82
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 0036b Instruction { source: "ttyout <- t82\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# t83 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0036d Instruction { source: "t83 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
00 1c 0a 
# ttyout <- t83
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00370 Instruction { source: "ttyout <- t83\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: TtyOut, args: [Register(0x1c)], resolved: None }
13 1c 
# :main_if_end_3
# 	SourceContext { contexts: [] }
# main_if_end_3
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 00372 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
40 9c 00 00 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# t84 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00376 Instruction { source: "t84 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x31), Constant8(0x00=0)], resolved: None }
00 31 00 
# t85 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00379 Instruction { source: "t85 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000014=20)], resolved: None }
80 20 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t85
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 0037f Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 00380 Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x20), Register(0x0c)], resolved: None }
a2 0c 20 0c 
# 00384 Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# return Some(t84)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00385 Instruction { source: "return Some(t84)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x31), Register(0x00)], resolved: None }
16 31 00 
# 00388 Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
a4 0c 14 00 00 00 
# 0038e Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 00390 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :parseHex
# Ret Some(U8)
# Arg0=c
# Var c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([52, 53, 54, 55])
# Var h (Local h Number(U8) Reg(U8)) Reg(U8) Some([56])
# Var t0 (t0 Number(U8, 16)) Reg(U8) Some([56])
# Var t1 (t1 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([57])
# Var t10 (t10 Ident("c")) Reg(U32) Some([52, 53, 54, 55])
# Var t11 (t11 Ident("h")) Reg(U8) Some([58])
# Var t2 (t2 Deref(Ident("c"))) Reg(U8) Some([57])
# Var t3 (t3 Ident("c")) Reg(U32) Some([52, 53, 54, 55])
# Var t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([52, 53, 54, 55])
# Var t5 (t5 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([52, 53, 54, 55])
# Var t6 (t6 Number(USIZE, 1)) Reg(U32) Some([60, 61, 62, 63])
# Var t7 (t7 Ident("h")) Reg(U8) Some([56])
# Var t8 (t8 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([58])
# Var t9 (t9 Deref(Ident("c"))) Reg(U8) Some([58])
# 00395 Instruction { source: "Save function parameter 'c' registers [0, 1, 2, 3] to locals [52, 53, 54, 55].", opcode: Copy32, args: [Register(0x00), Register(0x34)], resolved: None }
81 00 34 
# t0 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00398 Instruction { source: "t0 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x38), Constant8(0x10=16)], resolved: None }
00 38 10 
# t3 <- c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t3 <- c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t2 <- mem[t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 0039b Instruction { source: "t2 <- mem[t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x34), Register(0x39)], resolved: None }
10 34 39 
# Some(t1) <= call parseHexNibble(t2,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# 0039e Instruction { source: "Arg0[ch]=t2 Some(t1) <= call parseHexNibble(t2,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x39), Register(0x00)], resolved: None }
16 39 00 
# Registers used by this function: {52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63}
# Registers used by callee tree: {64, 65}
# Registers to save: []
# 003a1 Instruction { source: "PseudoCall(Label24(:parseHexNibble))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 003a7 Instruction { source: "PseudoCall(Label24(:parseHexNibble))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c b1 03 00 00 
# 003ad Instruction { source: "PseudoCall(Label24(:parseHexNibble))", opcode: JmpImm, args: [Label24(:parseHexNibble)], resolved: None }
40 fa 03 00 
# 003b1 Instruction { source: "PseudoCall(Label24(:parseHexNibble))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# 003b7 Instruction { source: "Some(t1) <= call parseHexNibble(t2,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x39)], resolved: None }
16 00 39 
# h <- t0 Multiply t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 003ba Instruction { source: "h <- t0 Multiply t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Mul8_8, args: [Register(0x38), Register(0x39), Register(0x38)], resolved: None }
20 38 39 38 
# t5 <- c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t5 <- c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t6 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 003be Instruction { source: "t6 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x3c), Constant32(0x00000001=1)], resolved: None }
80 3c 01 00 00 00 
# t4 <- t5 Add t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))"] }
# 003c4 Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 003c5 Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x3c), Register(0x34)], resolved: None }
a2 34 3c 34 
# 003c9 Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# c <- t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "c <- t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t7 <- h U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Ident(\"h\")", "Ident(\"h\")"] }
# optimized away noop copy Instruction { source: "t7 <- h U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x38), Register(0x38)], resolved: None }
# t10 <- c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t10 <- c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t9 <- mem[t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 003ca Instruction { source: "t9 <- mem[t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x34), Register(0x3a)], resolved: None }
10 34 3a 
# Some(t8) <= call parseHexNibble(t9,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# 003cd Instruction { source: "Arg0[ch]=t9 Some(t8) <= call parseHexNibble(t9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x3a), Register(0x00)], resolved: None }
16 3a 00 
# Registers used by this function: {52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63}
# Registers used by callee tree: {64, 65}
# Registers to save: []
# 003d0 Instruction { source: "PseudoCall(Label24(:parseHexNibble))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 003d6 Instruction { source: "PseudoCall(Label24(:parseHexNibble))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c e0 03 00 00 
# 003dc Instruction { source: "PseudoCall(Label24(:parseHexNibble))", opcode: JmpImm, args: [Label24(:parseHexNibble)], resolved: None }
40 fa 03 00 
# 003e0 Instruction { source: "PseudoCall(Label24(:parseHexNibble))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# 003e6 Instruction { source: "Some(t8) <= call parseHexNibble(t9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x3a)], resolved: None }
16 00 3a 
# h <- t7 Add t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 003e9 Instruction { source: "h <- t7 Add t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Add8NoCarryIn, args: [Register(0x38), Register(0x3a), Register(0x38)], resolved: None }
24 38 3a 38 
# t11 <- h U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }", "Ident(\"h\")", "Ident(\"h\")"] }
# 003ed Instruction { source: "t11 <- h U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x38), Register(0x3a)], resolved: None }
16 38 3a 
# return Some(t11)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# 003f0 Instruction { source: "return Some(t11)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: Copy8, args: [Register(0x3a), Register(0x00)], resolved: None }
16 3a 00 
# 003f3 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_parseHex
# 	SourceContext { contexts: [] }
# function_end_parseHex
# Unreachable
# 	SourceContext { contexts: [] }
# 003f5 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :parseHexNibble
# Ret Some(U8)
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([64])
# Var t0 (t0 Ident("ch")) Reg(U8) Some([64])
# Var t1 (t1 Number(U8, 97)) Reg(U8) Some([65])
# Var t10 (t10 Ident("ch")) Reg(U8) Some([64])
# Var t11 (t11 Number(U8, 48)) Reg(U8) Some([65])
# Var t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([64])
# Var t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([64])
# Var t14 (t14 Ident("ch")) Reg(U8) Some([64])
# Var t15 (t15 Number(U8, 65)) Reg(U8) Some([65])
# Var t16 (t16 Number(U8, 10)) Reg(U8) Some([65])
# Var t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([64])
# Var t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([64])
# Var t4 (t4 Ident("ch")) Reg(U8) Some([64])
# Var t5 (t5 Number(U8, 97)) Reg(U8) Some([65])
# Var t6 (t6 Number(U8, 10)) Reg(U8) Some([65])
# Var t7 (t7 Ident("ch")) Reg(U8) Some([64])
# Var t8 (t8 Number(U8, 57)) Reg(U8) Some([65])
# Var t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([64])
# 003fa Instruction { source: "Save function parameter 'ch' registers [0] to locals [64].", opcode: Copy8, args: [Register(0x00), Register(0x40)], resolved: None }
16 00 40 
# t0 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t0 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 003fd Instruction { source: "t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x41), Constant8(0x61=97)], resolved: None }
00 41 61 
# if t0 >= t1 then 'parseHexNibble_if_true_0_1' else 'parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 00400 Instruction { source: "if t0 >= t1 then 'parseHexNibble_if_true_0_1' else 'parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x41), Register(0x40)], resolved: None }
25 41 40 
# 00403 Instruction { source: "if t0 >= t1 then 'parseHexNibble_if_true_0_1' else 'parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(parseHexNibble_if_true_0_1)], resolved: None }
41 0b 04 00 
# 00407 Instruction { source: "if t0 >= t1 then 'parseHexNibble_if_true_0_1' else 'parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(parseHexNibble_if_else_0_2)], resolved: None }
40 27 04 00 
# :parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# parseHexNibble_if_true_0_1
# t4 <- ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t4 <- ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 0040b Instruction { source: "t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x41), Constant8(0x61=97)], resolved: None }
00 41 61 
# t3 <- t4 Subtract t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 0040e Instruction { source: "t3 <- t4 Subtract t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x00)], resolved: None }
16 41 00 
# 00411 Instruction { source: "t3 <- t4 Subtract t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
04 00 
# 00413 Instruction { source: "t3 <- t4 Subtract t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x40), Register(0x00), Register(0x40)], resolved: None }
24 40 00 40 
# t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00417 Instruction { source: "t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x41), Constant8(0x0a=10)], resolved: None }
00 41 0a 
# t2 <- t3 Add t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 0041a Instruction { source: "t2 <- t3 Add t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x40), Register(0x41), Register(0x40)], resolved: None }
24 40 41 40 
# return Some(t2)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 0041e Instruction { source: "return Some(t2)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x40), Register(0x00)], resolved: None }
16 40 00 
# 00421 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# goto parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 00423 Instruction { source: "goto parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(parseHexNibble_if_end_0)], resolved: None }
40 27 04 00 
# :parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# parseHexNibble_if_else_0_2
# :parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# parseHexNibble_if_end_0
# t7 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t7 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 00427 Instruction { source: "t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x41), Constant8(0x39=57)], resolved: None }
00 41 39 
# if t7 <= t8 then 'parseHexNibble_if_true_0_4' else 'parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 0042a Instruction { source: "if t7 <= t8 then 'parseHexNibble_if_true_0_4' else 'parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x40), Register(0x41)], resolved: None }
25 40 41 
# 0042d Instruction { source: "if t7 <= t8 then 'parseHexNibble_if_true_0_4' else 'parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(parseHexNibble_if_true_0_4)], resolved: None }
41 35 04 00 
# 00431 Instruction { source: "if t7 <= t8 then 'parseHexNibble_if_true_0_4' else 'parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(parseHexNibble_if_else_0_5)], resolved: None }
40 4a 04 00 
# :parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# parseHexNibble_if_true_0_4
# t10 <- ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t10 <- ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00435 Instruction { source: "t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x41), Constant8(0x30=48)], resolved: None }
00 41 30 
# t9 <- t10 Subtract t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 00438 Instruction { source: "t9 <- t10 Subtract t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x00)], resolved: None }
16 41 00 
# 0043b Instruction { source: "t9 <- t10 Subtract t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
04 00 
# 0043d Instruction { source: "t9 <- t10 Subtract t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x40), Register(0x00), Register(0x40)], resolved: None }
24 40 00 40 
# return Some(t9)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 00441 Instruction { source: "return Some(t9)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x40), Register(0x00)], resolved: None }
16 40 00 
# 00444 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# goto parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 00446 Instruction { source: "goto parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(parseHexNibble_if_end_3)], resolved: None }
40 4a 04 00 
# :parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# parseHexNibble_if_else_0_5
# :parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# parseHexNibble_if_end_3
# t14 <- ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t14 <- ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0044a Instruction { source: "t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x41), Constant8(0x41=65)], resolved: None }
00 41 41 
# t13 <- t14 Subtract t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 0044d Instruction { source: "t13 <- t14 Subtract t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x00)], resolved: None }
16 41 00 
# 00450 Instruction { source: "t13 <- t14 Subtract t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
04 00 
# 00452 Instruction { source: "t13 <- t14 Subtract t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x40), Register(0x00), Register(0x40)], resolved: None }
24 40 00 40 
# t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00456 Instruction { source: "t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x41), Constant8(0x0a=10)], resolved: None }
00 41 0a 
# t12 <- t13 Add t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 00459 Instruction { source: "t12 <- t13 Add t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x40), Register(0x41), Register(0x40)], resolved: None }
24 40 41 40 
# return Some(t12)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 0045d Instruction { source: "return Some(t12)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x40), Register(0x00)], resolved: None }
16 40 00 
# 00460 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# function_end_parseHexNibble
# Unreachable
# 	SourceContext { contexts: [] }
# 00462 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :printHex
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([66])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var t0 (t0 Ident("a")) Reg(U8) Some([66])
# Var t1 (t1 Number(U8, 15)) Reg(U8) Some([67])
# Var t10 (t10 Number(U8, 48)) Reg(U8) Some([67])
# Var t11 (t11 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([66])
# Var t12 (t12 Ident("a")) Reg(U8) Some([66])
# Var t2 (t2 Ident("a")) Reg(U8) Some([66])
# Var t3 (t3 Number(U8, 16)) Reg(U8) Some([67])
# Var t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([66])
# Var t5 (t5 Ident("b")) Reg(U8) Some([67])
# Var t6 (t6 Ident("a")) Reg(U8) Some([66])
# Var t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([67])
# Var t8 (t8 Ident("b")) Reg(U8) Some([67])
# Var t9 (t9 Number(U8, 16)) Reg(U8) Some([68])
# 00467 Instruction { source: "Save function parameter 'a' registers [0] to locals [66].", opcode: Copy8, args: [Register(0x00), Register(0x42)], resolved: None }
16 00 42 
# t0 <- a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t0 <- a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x42), Register(0x42)], resolved: None }
# t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 0046a Instruction { source: "t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x0f=15)], resolved: None }
00 43 0f 
# if t0 > t1 then 'printHex_if_true_0_1' else 'printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 0046d Instruction { source: "if t0 > t1 then 'printHex_if_true_0_1' else 'printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x42), Register(0x43)], resolved: None }
25 42 43 
# 00470 Instruction { source: "if t0 > t1 then 'printHex_if_true_0_1' else 'printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(printHex_if_else_0_2)], resolved: None }
41 a8 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 > t1 then 'printHex_if_true_0_1' else 'printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(printHex_if_true_0_1)], resolved: None }
# :printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }"] }
# printHex_if_true_0_1
# t2 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t2 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x42), Register(0x42)], resolved: None }
# t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00474 Instruction { source: "t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x10=16)], resolved: None }
00 43 10 
# b <- t2 Divide t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 00477 Instruction { source: "b <- t2 Divide t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x42), Register(0x43), Register(0x43)], resolved: None }
27 42 43 43 
# t5 <- b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t5 <- b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# None <= call printHexDigit(t5,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 0047b Instruction { source: "Arg0[a]=t5 None <= call printHexDigit(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x43), Register(0x00)], resolved: None }
16 43 00 
# Registers used by this function: {66, 67, 68}
# Registers used by callee tree: {69, 70}
# Registers to save: []
# 0047e Instruction { source: "PseudoCall(Label24(:printHexDigit))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 00484 Instruction { source: "PseudoCall(Label24(:printHexDigit))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c 8e 04 00 00 
# 0048a Instruction { source: "PseudoCall(Label24(:printHexDigit))", opcode: JmpImm, args: [Label24(:printHexDigit)], resolved: None }
40 cd 04 00 
# 0048e Instruction { source: "PseudoCall(Label24(:printHexDigit))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# t6 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t6 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x42), Register(0x42)], resolved: None }
# t8 <- b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t8 <- b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00494 Instruction { source: "t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x10=16)], resolved: None }
00 44 10 
# t7 <- t8 Multiply t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 00497 Instruction { source: "t7 <- t8 Multiply t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x43), Register(0x44), Register(0x43)], resolved: None }
20 43 44 43 
# a <- t6 Subtract t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 0049b Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x43), Register(0x00)], resolved: None }
16 43 00 
# 0049e Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
04 00 
# 004a0 Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x42), Register(0x00), Register(0x42)], resolved: None }
24 42 00 42 
# goto printHex_if_end_0
# 	SourceContext { contexts: [] }
# 004a4 Instruction { source: "goto printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(printHex_if_end_0)], resolved: None }
40 ad 04 00 
# :printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# printHex_if_else_0_2
# t10 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 004a8 Instruction { source: "t10 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x30=48)], resolved: None }
00 43 30 
# ttyout <- t10
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }"] }
# 004ab Instruction { source: "ttyout <- t10\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\"] }", opcode: TtyOut, args: [Register(0x43)], resolved: None }
13 43 
# :printHex_if_end_0
# 	SourceContext { contexts: [] }
# printHex_if_end_0
# t12 <- a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t12 <- a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x42), Register(0x42)], resolved: None }
# None <= call printHexDigit(t12,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# 004ad Instruction { source: "Arg0[a]=t12 None <= call printHexDigit(t12,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x42), Register(0x00)], resolved: None }
16 42 00 
# Registers used by this function: {66, 67, 68}
# Registers used by callee tree: {69, 70}
# Registers to save: []
# 004b0 Instruction { source: "PseudoCall(Label24(:printHexDigit))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 004b6 Instruction { source: "PseudoCall(Label24(:printHexDigit))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c c0 04 00 00 
# 004bc Instruction { source: "PseudoCall(Label24(:printHexDigit))", opcode: JmpImm, args: [Label24(:printHexDigit)], resolved: None }
40 cd 04 00 
# 004c0 Instruction { source: "PseudoCall(Label24(:printHexDigit))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 004c6 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_printHex
# 	SourceContext { contexts: [] }
# function_end_printHex
# Unreachable
# 	SourceContext { contexts: [] }
# 004c8 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :printHexDigit
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([69])
# Var t0 (t0 Ident("a")) Reg(U8) Some([69])
# Var t1 (t1 Number(U8, 10)) Reg(U8) Some([70])
# Var t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([69])
# Var t3 (t3 Ident("a")) Reg(U8) Some([69])
# Var t4 (t4 Number(U8, 48)) Reg(U8) Some([70])
# Var t5 (t5 Ident("a")) Reg(U8) Some([69])
# Var t6 (t6 Number(U8, 10)) Reg(U8) Some([70])
# Var t7 (t7 Ident("a")) Reg(U8) Some([69])
# Var t8 (t8 Number(U8, 65)) Reg(U8) Some([70])
# Var t9 (t9 Ident("a")) Reg(U8) Some([69])
# 004cd Instruction { source: "Save function parameter 'a' registers [0] to locals [69].", opcode: Copy8, args: [Register(0x00), Register(0x45)], resolved: None }
16 00 45 
# t0 <- a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t0 <- a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 004d0 Instruction { source: "t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x0a=10)], resolved: None }
00 46 0a 
# if t0 < t1 then 'printHexDigit_if_true_0_1' else 'printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 004d3 Instruction { source: "if t0 < t1 then 'printHexDigit_if_true_0_1' else 'printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x46), Register(0x45)], resolved: None }
25 46 45 
# 004d6 Instruction { source: "if t0 < t1 then 'printHexDigit_if_true_0_1' else 'printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(printHexDigit_if_else_0_2)], resolved: None }
41 e7 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 < t1 then 'printHexDigit_if_true_0_1' else 'printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(printHexDigit_if_true_0_1)], resolved: None }
# :printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# printHexDigit_if_true_0_1
# t3 <- a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t3 <- a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 004da Instruction { source: "t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x30=48)], resolved: None }
00 46 30 
# t2 <- t3 Add t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 004dd Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x45), Register(0x46), Register(0x45)], resolved: None }
24 45 46 45 
# ttyout <- t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 004e1 Instruction { source: "ttyout <- t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: TtyOut, args: [Register(0x45)], resolved: None }
13 45 
# goto printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 004e3 Instruction { source: "goto printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(printHexDigit_if_end_0)], resolved: None }
40 fc 04 00 
# :printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# printHexDigit_if_else_0_2
# t5 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t5 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 004e7 Instruction { source: "t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x0a=10)], resolved: None }
00 46 0a 
# a <- t5 Subtract t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 004ea Instruction { source: "a <- t5 Subtract t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x46), Register(0x00)], resolved: None }
16 46 00 
# 004ed Instruction { source: "a <- t5 Subtract t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
04 00 
# 004ef Instruction { source: "a <- t5 Subtract t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x45), Register(0x00), Register(0x45)], resolved: None }
24 45 00 45 
# t7 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t7 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 004f3 Instruction { source: "t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x41=65)], resolved: None }
00 46 41 
# a <- t7 Add t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 004f6 Instruction { source: "a <- t7 Add t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x45), Register(0x46), Register(0x45)], resolved: None }
24 45 46 45 
# t9 <- a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t9 <- a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# ttyout <- t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 004fa Instruction { source: "ttyout <- t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: TtyOut, args: [Register(0x45)], resolved: None }
13 45 
# :printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# printHexDigit_if_end_0
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 004fc Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_printHexDigit
# 	SourceContext { contexts: [] }
# function_end_printHexDigit
# Unreachable
# 	SourceContext { contexts: [] }
# 004fe Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :printHexTest
# Ret Some(U8)
# Arg0=a
# Arg1=b
# Var a (Arg0 a Number(U8)) Reg(U8) Some([71])
# Var b (Arg1 b Number(U8)) Reg(U8) Some([72])
# Var t0 (t0 Call(Call { function: "printHex", parameters: [Ident("a")] })) Reg(U8) Some([71])
# Var t1 (t1 Ident("a")) Reg(U8) Some([71])
# Var t2 (t2 Number(U8, 10)) Reg(U8) Some([71])
# Var t3 (t3 Number(U8, 0)) Reg(U8) Some([71])
# 00503 Instruction { source: "Save function parameter 'a' registers [0] to locals [71].", opcode: Copy8, args: [Register(0x00), Register(0x47)], resolved: None }
16 00 47 
# 00506 Instruction { source: "Save function parameter 'b' registers [4] to locals [72].", opcode: Copy8, args: [Register(0x04), Register(0x48)], resolved: None }
16 04 48 
# t1 <- a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHex\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHex\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t1 <- a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# None <= call printHex(t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHex\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHex\", parameters: [Ident(\"a\")] })"] }
# 00509 Instruction { source: "Arg0[a]=t1 None <= call printHex(t1,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x47), Register(0x00)], resolved: None }
16 47 00 
# Registers used by this function: {71, 72}
# Registers used by callee tree: {66, 67, 68, 69, 70}
# Registers to save: []
# 0050c Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
a4 0c fc ff ff ff 
# 00512 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
94 0c 1c 05 00 00 
# 00518 Instruction { source: "PseudoCall(Label24(:printHex))", opcode: JmpImm, args: [Label24(:printHex)], resolved: None }
40 67 04 00 
# 0051c Instruction { source: "PseudoCall(Label24(:printHex))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
a4 0c 04 00 00 00 
# t2 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00522 Instruction { source: "t2 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x0a=10)], resolved: None }
00 47 0a 
# ttyout <- t2
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00525 Instruction { source: "ttyout <- t2\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: TtyOut, args: [Register(0x47)], resolved: None }
13 47 
# t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00527 Instruction { source: "t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x00=0)], resolved: None }
00 47 00 
# return Some(t3)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 0052a Instruction { source: "return Some(t3)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x47), Register(0x00)], resolved: None }
16 47 00 
# 0052d Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_printHexTest
# 	SourceContext { contexts: [] }
# function_end_printHexTest
# Unreachable
# 	SourceContext { contexts: [] }
# 0052f Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :println
# Ret None
# Arg0=buf
# Var buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([76, 77, 78, 79])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([80])
# Var t0 (t0 Ident("buf")) Reg(U32) Some([76, 77, 78, 79])
# Var t1 (t1 Ident("ch")) Reg(U8) Some([80])
# Var t2 (t2 Number(U8, 0)) Reg(U8) Some([81])
# Var t3 (t3 Ident("ch")) Reg(U8) Some([80])
# Var t4 (t4 Ident("buf")) Reg(U32) Some([76, 77, 78, 79])
# Var t5 (t5 Number(USIZE, 1)) Reg(U32) Some([84, 85, 86, 87])
# Var t6 (t6 Ident("buf")) Reg(U32) Some([76, 77, 78, 79])
# 00534 Instruction { source: "Save function parameter 'buf' registers [0, 1, 2, 3] to locals [76, 77, 78, 79].", opcode: Copy32, args: [Register(0x00), Register(0x4c)], resolved: None }
81 00 4c 
# t0 <- buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Deref(Ident(\"buf\")) }", "Deref(Ident(\"buf\"))", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "t0 <- buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Deref(Ident(\\\"buf\\\")) }\", \"Deref(Ident(\\\"buf\\\"))\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# ch <- mem[t0] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Deref(Ident(\"buf\")) }", "Deref(Ident(\"buf\"))"] }
# 00537 Instruction { source: "ch <- mem[t0] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Deref(Ident(\\\"buf\\\")) }\", \"Deref(Ident(\\\"buf\\\"))\"] }", opcode: Load8, args: [Register(0x4c), Register(0x50)], resolved: None }
10 4c 50 
# :println_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }"] }
# println_while_predicate_0
# t1 <- ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t1 <- ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x50), Register(0x50)], resolved: None }
# t2 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0053a Instruction { source: "t2 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x51), Constant8(0x00=0)], resolved: None }
00 51 00 
# if t1 != t2 then 'println_while_body_1' else 'println_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 0053d Instruction { source: "if t1 != t2 then 'println_while_body_1' else 'println_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x50), Register(0x51)], resolved: None }
25 50 51 
# 00540 Instruction { source: "if t1 != t2 then 'println_while_body_1' else 'println_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(println_while_end_2)], resolved: None }
42 59 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1 != t2 then 'println_while_body_1' else 'println_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(println_while_body_1)], resolved: None }
# :println_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }"] }
# println_while_body_1
# t3 <- ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t3 <- ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x50), Register(0x50)], resolved: None }
# ttyout <- t3
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 00544 Instruction { source: "ttyout <- t3\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: TtyOut, args: [Register(0x50)], resolved: None }
13 50 
# t4 <- buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1))", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "t4 <- buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# t5 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00546 Instruction { source: "t5 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000001=1)], resolved: None }
80 54 01 00 00 00 
# buf <- t4 Add t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1))"] }
# 0054c Instruction { source: "buf <- t4 Add t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 0054d Instruction { source: "buf <- t4 Add t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x54), Register(0x4c)], resolved: None }
a2 4c 54 4c 
# 00551 Instruction { source: "buf <- t4 Add t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# t6 <- buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }", "Deref(Ident(\"buf\"))", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "t6 <- buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }\", \"Deref(Ident(\\\"buf\\\"))\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# ch <- mem[t6] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }", "Deref(Ident(\"buf\"))"] }
# 00552 Instruction { source: "ch <- mem[t6] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }\", \"Deref(Ident(\\\"buf\\\"))\"] }", opcode: Load8, args: [Register(0x4c), Register(0x50)], resolved: None }
10 4c 50 
# goto println_while_predicate_0
# 	SourceContext { contexts: [] }
# 00555 Instruction { source: "goto println_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(println_while_predicate_0)], resolved: None }
40 3a 05 00 
# :println_while_end_2
# 	SourceContext { contexts: [] }
# println_while_end_2
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 00559 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_println
# 	SourceContext { contexts: [] }
# function_end_println
# Unreachable
# 	SourceContext { contexts: [] }
# 0055b Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :readline
# Ret None
# Arg0=buf
# Var buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([88, 89, 90, 91])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([92])
# Var inline_readline_getchar_0_t0 (t0 Arithmetic(And, Ident("tty"), Number(U8, 128))) Reg(U8) Some([92])
# Var inline_readline_getchar_0_t1 (t1 Ident("tty")) Reg(U8) Some([92])
# Var inline_readline_getchar_0_t2 (t2 Number(U8, 128)) Reg(U8) Some([93])
# Var inline_readline_getchar_0_t3 (t3 Number(U8, 0)) Reg(U8) Some([93])
# Var inline_readline_getchar_0_t4 (t4 Arithmetic(And, Ident("tty"), Number(U8, 127))) Reg(U8) Some([92])
# Var inline_readline_getchar_0_t5 (t5 Ident("tty")) Reg(U8) Some([92])
# Var inline_readline_getchar_0_t6 (t6 Number(U8, 127)) Reg(U8) Some([93])
# Var inline_readline_getchar_0_tty (Local tty Number(U8) Reg(U8)) Reg(U8) Some([94])
# Var t0 (t0 Number(U8, 0)) Reg(U8) Some([92])
# Var t1 (t1 Number(U8, 0)) Reg(U8) Some([93])
# Var t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }) Reg(U32) Some([88, 89, 90, 91])
# Var t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }) Reg(U32) Some([88, 89, 90, 91])
# Var t12 (t12 Number(USIZE, 1)) Reg(U32) Some([96, 97, 98, 99])
# Var t2 (t2 Ident("ch")) Reg(U8) Some([92])
# Var t3 (t3 Number(U8, 13)) Reg(U8) Some([93])
# Var t4 (t4 Ident("ch")) Reg(U8) Some([92])
# Var t5 (t5 Number(U8, 10)) Reg(U8) Some([93])
# Var t6 (t6 Ident("buf")) Reg(U32) Some([88, 89, 90, 91])
# Var t7 (t7 Number(U8, 0)) Reg(U8) Some([92])
# Var t8 (t8 Ident("buf")) Reg(U32) Some([88, 89, 90, 91])
# Var t9 (t9 Ident("ch")) Reg(U8) Some([92])
# 00560 Instruction { source: "Save function parameter 'buf' registers [0, 1, 2, 3] to locals [88, 89, 90, 91].", opcode: Copy32, args: [Register(0x00), Register(0x58)], resolved: None }
81 00 58 
# :readline_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# readline_while_predicate_0
# t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00563 Instruction { source: "t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x5c), Constant8(0x00=0)], resolved: None }
00 5c 00 
# t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00566 Instruction { source: "t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x5d), Constant8(0x00=0)], resolved: None }
00 5d 00 
# if t0 == t1 then 'readline_while_body_1' else 'readline_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 00569 Instruction { source: "if t0 == t1 then 'readline_while_body_1' else 'readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x5c), Register(0x5d)], resolved: None }
25 5c 5d 
# 0056c Instruction { source: "if t0 == t1 then 'readline_while_body_1' else 'readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(readline_while_body_1)], resolved: None }
42 74 05 00 
# 00570 Instruction { source: "if t0 == t1 then 'readline_while_body_1' else 'readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(readline_while_end_2)], resolved: None }
40 de 05 00 
# :readline_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# readline_while_body_1
# inline_readline_getchar_0_tty <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"tty\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00574 Instruction { source: "inline_readline_getchar_0_tty <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"tty\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x5e), Constant8(0x00=0)], resolved: None }
00 5e 00 
# :inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }"] }
# inline_readline_getchar_0_getchar_while_predicate_0
# inline_readline_getchar_0_t1 <- inline_readline_getchar_0_tty U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Ident(\"tty\")", "Ident(\"tty\")"] }
# 00577 Instruction { source: "inline_readline_getchar_0_t1 <- inline_readline_getchar_0_tty U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Ident(\\\"tty\\\")\", \"Ident(\\\"tty\\\")\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x5c)], resolved: None }
16 5e 5c 
# inline_readline_getchar_0_t2 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0057a Instruction { source: "inline_readline_getchar_0_t2 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x5d), Constant8(0x80=128)], resolved: None }
00 5d 80 
# inline_readline_getchar_0_t0 <- inline_readline_getchar_0_t1 BitwiseAnd inline_readline_getchar_0_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))"] }
# 0057d Instruction { source: "inline_readline_getchar_0_t0 <- inline_readline_getchar_0_t1 BitwiseAnd inline_readline_getchar_0_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x5c), Register(0x5d), Register(0x5c)], resolved: None }
33 5c 5d 5c 
# inline_readline_getchar_0_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00581 Instruction { source: "inline_readline_getchar_0_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x5d), Constant8(0x00=0)], resolved: None }
00 5d 00 
# if inline_readline_getchar_0_t0 == inline_readline_getchar_0_t3 then 'inline_readline_getchar_0_getchar_while_body_1' else 'inline_readline_getchar_0_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }"] }
# 00584 Instruction { source: "if inline_readline_getchar_0_t0 == inline_readline_getchar_0_t3 then 'inline_readline_getchar_0_getchar_while_body_1' else 'inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x5c), Register(0x5d)], resolved: None }
25 5c 5d 
# 00587 Instruction { source: "if inline_readline_getchar_0_t0 == inline_readline_getchar_0_t3 then 'inline_readline_getchar_0_getchar_while_body_1' else 'inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_readline_getchar_0_getchar_while_body_1)], resolved: None }
42 8f 05 00 
# 0058b Instruction { source: "if inline_readline_getchar_0_t0 == inline_readline_getchar_0_t3 then 'inline_readline_getchar_0_getchar_while_body_1' else 'inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_readline_getchar_0_getchar_while_end_2)], resolved: None }
40 95 05 00 
# :inline_readline_getchar_0_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }"] }
# inline_readline_getchar_0_getchar_while_body_1
# inline_readline_getchar_0_tty <- ttyin
# 	SourceContext { contexts: ["Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }", "TtyIn"] }
# 0058f Instruction { source: "inline_readline_getchar_0_tty <- ttyin\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }\", \"TtyIn\"] }", opcode: TtyIn, args: [Register(0x5e)], resolved: None }
12 5e 
# goto inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: [] }
# 00591 Instruction { source: "goto inline_readline_getchar_0_getchar_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_readline_getchar_0_getchar_while_predicate_0)], resolved: None }
40 77 05 00 
# :inline_readline_getchar_0_getchar_while_end_2
# 	SourceContext { contexts: [] }
# inline_readline_getchar_0_getchar_while_end_2
# inline_readline_getchar_0_t5 <- inline_readline_getchar_0_tty U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Ident(\"tty\")", "Ident(\"tty\")"] }
# 00595 Instruction { source: "inline_readline_getchar_0_t5 <- inline_readline_getchar_0_tty U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Ident(\\\"tty\\\")\", \"Ident(\\\"tty\\\")\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x5c)], resolved: None }
16 5e 5c 
# inline_readline_getchar_0_t6 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00598 Instruction { source: "inline_readline_getchar_0_t6 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x5d), Constant8(0x7f=127)], resolved: None }
00 5d 7f 
# inline_readline_getchar_0_t4 <- inline_readline_getchar_0_t5 BitwiseAnd inline_readline_getchar_0_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))"] }
# 0059b Instruction { source: "inline_readline_getchar_0_t4 <- inline_readline_getchar_0_t5 BitwiseAnd inline_readline_getchar_0_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x5c), Register(0x5d), Register(0x5c)], resolved: None }
33 5c 5d 5c 
# ch <- inline_readline_getchar_0_t4 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }"] }
# optimized away noop copy Instruction { source: "ch <- inline_readline_getchar_0_t4 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_readline_getchar_0_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\"] }", opcode: JmpImm, args: [Label24(inline_readline_getchar_0_function_end_getchar)], resolved: None }
# :inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_readline_getchar_0_function_end_getchar
# t2 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t2 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t3 <- 0n13/0x0du8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Number(U8, 13)", "Number(U8, 13)"] }
# 0059f Instruction { source: "t3 <- 0n13/0x0du8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Number(U8, 13)\", \"Number(U8, 13)\"] }", opcode: LoadImm8, args: [Register(0x5d), Constant8(0x0d=13)], resolved: None }
00 5d 0d 
# if t2 == t3 then 'readline_if_true_0_4' else 'readline_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }"] }
# 005a2 Instruction { source: "if t2 == t3 then 'readline_if_true_0_4' else 'readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: Cmp8, args: [Register(0x5c), Register(0x5d)], resolved: None }
25 5c 5d 
# 005a5 Instruction { source: "if t2 == t3 then 'readline_if_true_0_4' else 'readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JzImm, args: [Label24(readline_if_true_0_4)], resolved: None }
42 ad 05 00 
# 005a9 Instruction { source: "if t2 == t3 then 'readline_if_true_0_4' else 'readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JmpImm, args: [Label24(readline_if_else_0_5)], resolved: None }
40 b1 05 00 
# :readline_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# readline_if_true_0_4
# goto readline_if_end_3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# 005ad Instruction { source: "goto readline_if_end_3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\"] }", opcode: JmpImm, args: [Label24(readline_if_end_3)], resolved: None }
40 da 05 00 
# :readline_if_else_0_5
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# readline_if_else_0_5
# t4 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t4 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 005b1 Instruction { source: "t5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x5d), Constant8(0x0a=10)], resolved: None }
00 5d 0a 
# if t4 == t5 then 'readline_if_true_1_6' else 'readline_if_else_1_7'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 005b4 Instruction { source: "if t4 == t5 then 'readline_if_true_1_6' else 'readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x5c), Register(0x5d)], resolved: None }
25 5c 5d 
# 005b7 Instruction { source: "if t4 == t5 then 'readline_if_true_1_6' else 'readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(readline_if_true_1_6)], resolved: None }
42 bf 05 00 
# 005bb Instruction { source: "if t4 == t5 then 'readline_if_true_1_6' else 'readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(readline_if_else_1_7)], resolved: None }
40 cb 05 00 
# :readline_if_true_1_6
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# readline_if_true_1_6
# t6 <- buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "t6 <- buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005bf Instruction { source: "t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x5c), Constant8(0x00=0)], resolved: None }
00 5c 00 
# mem[t6] <- t7 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }"] }
# 005c2 Instruction { source: "mem[t6] <- t7 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x5c), Register(0x58)], resolved: None }
11 5c 58 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 005c5 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# goto readline_if_end_3
# 	SourceContext { contexts: [] }
# 005c7 Instruction { source: "goto readline_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(readline_if_end_3)], resolved: None }
40 da 05 00 
# :readline_if_else_1_7
# 	SourceContext { contexts: [] }
# readline_if_else_1_7
# t8 <- buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "t8 <- buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# t9 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t9 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# mem[t8] <- t9 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }"] }
# 005cb Instruction { source: "mem[t8] <- t9 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x5c), Register(0x58)], resolved: None }
11 5c 58 
# t11 <- buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "t11 <- buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 005ce Instruction { source: "t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000001=1)], resolved: None }
80 60 01 00 00 00 
# t10 <- t11 Add t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))"] }
# 005d4 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 005d5 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x60), Register(0x58)], resolved: None }
a2 58 60 58 
# 005d9 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# buf <- t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "buf <- t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# :readline_if_end_3
# 	SourceContext { contexts: [] }
# readline_if_end_3
# goto readline_while_predicate_0
# 	SourceContext { contexts: [] }
# 005da Instruction { source: "goto readline_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(readline_while_predicate_0)], resolved: None }
40 63 05 00 
# :readline_while_end_2
# 	SourceContext { contexts: [] }
# readline_while_end_2
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 005de Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_readline
# 	SourceContext { contexts: [] }
# function_end_readline
# Unreachable
# 	SourceContext { contexts: [] }
# 005e0 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
# :test_echoline
# Ret Some(U8)
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var buf (Local buf Array(Number(U8), 20) FrameOffset(0)) FrameOffset(0) None
# Var inline_test_echoline_println_1_buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_println_1_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([104])
# Var inline_test_echoline_println_1_t0 (t0 Ident("buf")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_println_1_t1 (t1 Ident("ch")) Reg(U8) Some([104])
# Var inline_test_echoline_println_1_t2 (t2 Number(U8, 0)) Reg(U8) Some([105])
# Var inline_test_echoline_println_1_t3 (t3 Ident("ch")) Reg(U8) Some([104])
# Var inline_test_echoline_println_1_t4 (t4 Ident("buf")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_println_1_t5 (t5 Number(USIZE, 1)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_test_echoline_println_1_t6 (t6 Ident("buf")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_readline_3_buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_readline_3_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_inline_readline_getchar_0_t0 (t0 Arithmetic(And, Ident("tty"), Number(U8, 128))) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_inline_readline_getchar_0_t1 (t1 Ident("tty")) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_inline_readline_getchar_0_t2 (t2 Number(U8, 128)) Reg(U8) Some([105])
# Var inline_test_echoline_readline_3_inline_readline_getchar_0_t3 (t3 Number(U8, 0)) Reg(U8) Some([105])
# Var inline_test_echoline_readline_3_inline_readline_getchar_0_t4 (t4 Arithmetic(And, Ident("tty"), Number(U8, 127))) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_inline_readline_getchar_0_t5 (t5 Ident("tty")) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_inline_readline_getchar_0_t6 (t6 Number(U8, 127)) Reg(U8) Some([105])
# Var inline_test_echoline_readline_3_inline_readline_getchar_0_tty (Local tty Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_test_echoline_readline_3_t0 (t0 Number(U8, 0)) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_t1 (t1 Number(U8, 0)) Reg(U8) Some([105])
# Var inline_test_echoline_readline_3_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_readline_3_t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_readline_3_t12 (t12 Number(USIZE, 1)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_test_echoline_readline_3_t2 (t2 Ident("ch")) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_t3 (t3 Number(U8, 13)) Reg(U8) Some([105])
# Var inline_test_echoline_readline_3_t4 (t4 Ident("ch")) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_t5 (t5 Number(U8, 10)) Reg(U8) Some([105])
# Var inline_test_echoline_readline_3_t6 (t6 Ident("buf")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_readline_3_t7 (t7 Number(U8, 0)) Reg(U8) Some([104])
# Var inline_test_echoline_readline_3_t8 (t8 Ident("buf")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_test_echoline_readline_3_t9 (t9 Ident("ch")) Reg(U8) Some([104])
# Var t0 (Stack size negated) Reg(U32) Some([100, 101, 102, 103])
# Var t1 (t1 Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })) Reg(U8) Some([113])
# Var t10 (t10 Ident("__frame_pointer")) Reg(U32) Some([116, 117, 118, 119])
# Var t11 (t11 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) Reg(U32) Some([100, 101, 102, 103])
# Var t12 (t12 Number(U8, 0)) Reg(U8) Some([120])
# Var t13 (t13 Number(U8, 0)) Reg(U8) Some([120])
# Var t14 (Stack size) Reg(U32) Some([108, 109, 110, 111])
# Var t2 (t2 AddressOf(Index("buf", Number(U8, 0)))) Reg(U32) Some([100, 101, 102, 103])
# Var t3 (t3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }) Reg(U32) Some([100, 101, 102, 103])
# Var t4 (t4 Ident("__frame_pointer")) Reg(U32) Some([116, 117, 118, 119])
# Var t5 (t5 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) Reg(U32) Some([100, 101, 102, 103])
# Var t6 (t6 Number(U8, 0)) Reg(U8) Some([120])
# Var t7 (t7 Call(Call { function: "println", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })) Reg(U8) Some([113])
# Var t8 (t8 AddressOf(Index("buf", Number(U8, 0)))) Reg(U32) Some([100, 101, 102, 103])
# Var t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }) Reg(U32) Some([100, 101, 102, 103])
# 005e5 Instruction { source: "reserve 20 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xffffffec=4294967276)], resolved: None }
a4 0c ec ff ff ff 
# t0 <- 0xffffffecu32 
# 	SourceContext { contexts: [] }
# 005eb Instruction { source: "t0 <- 0xffffffecu32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0xffffffec=4294967276)], resolved: None }
80 64 ec ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 005f1 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 005f2 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x64), Register(0x0c)], resolved: None }
a2 0c 64 0c 
# 005f6 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# t4 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 005f7 Instruction { source: "t4 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x74)], resolved: None }
81 0c 74 
# t6 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005fa Instruction { source: "t6 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x78), Constant8(0x00=0)], resolved: None }
00 78 00 
# t5 U32 <- t6 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }"] }
# 005fd Instruction { source: "Zero-pad for t5 U32 <- t6 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
80 64 00 00 00 00 
# 00603 Instruction { source: "t5 U32 <- t6 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x64)], resolved: None }
16 78 64 
# t3 <- t4 Add t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })"] }
# 00606 Instruction { source: "t3 <- t4 Add t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 00607 Instruction { source: "t3 <- t4 Add t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_1, args: [Register(0x74), Register(0x64), Register(0x64)], resolved: None }
a2 74 64 64 
# 0060b Instruction { source: "t3 <- t4 Add t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# t2 <- t3 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))"] }
# optimized away noop copy Instruction { source: "t2 <- t3 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_readline_3_buf <- t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_buf <- t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# :inline_test_echoline_readline_3_readline_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_test_echoline_readline_3_readline_while_predicate_0
# inline_test_echoline_readline_3_t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0060c Instruction { source: "inline_test_echoline_readline_3_t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x00=0)], resolved: None }
00 68 00 
# inline_test_echoline_readline_3_t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0060f Instruction { source: "inline_test_echoline_readline_3_t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x00=0)], resolved: None }
00 69 00 
# if inline_test_echoline_readline_3_t0 == inline_test_echoline_readline_3_t1 then 'inline_test_echoline_readline_3_readline_while_body_1' else 'inline_test_echoline_readline_3_readline_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 00612 Instruction { source: "if inline_test_echoline_readline_3_t0 == inline_test_echoline_readline_3_t1 then 'inline_test_echoline_readline_3_readline_while_body_1' else 'inline_test_echoline_readline_3_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x69)], resolved: None }
25 68 69 
# 00615 Instruction { source: "if inline_test_echoline_readline_3_t0 == inline_test_echoline_readline_3_t1 then 'inline_test_echoline_readline_3_readline_while_body_1' else 'inline_test_echoline_readline_3_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_test_echoline_readline_3_readline_while_body_1)], resolved: None }
42 1d 06 00 
# 00619 Instruction { source: "if inline_test_echoline_readline_3_t0 == inline_test_echoline_readline_3_t1 then 'inline_test_echoline_readline_3_readline_while_body_1' else 'inline_test_echoline_readline_3_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_readline_while_end_2)], resolved: None }
40 89 06 00 
# :inline_test_echoline_readline_3_readline_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_test_echoline_readline_3_readline_while_body_1
# inline_test_echoline_readline_3_inline_readline_getchar_0_tty <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"tty\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 0061d Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_tty <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"tty\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x70), Constant8(0x00=0)], resolved: None }
00 70 00 
# :inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }"] }
# inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_predicate_0
# inline_test_echoline_readline_3_inline_readline_getchar_0_t1 <- inline_test_echoline_readline_3_inline_readline_getchar_0_tty U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Ident(\"tty\")", "Ident(\"tty\")"] }
# 00620 Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_t1 <- inline_test_echoline_readline_3_inline_readline_getchar_0_tty U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Ident(\\\"tty\\\")\", \"Ident(\\\"tty\\\")\"] }", opcode: Copy8, args: [Register(0x70), Register(0x68)], resolved: None }
16 70 68 
# inline_test_echoline_readline_3_inline_readline_getchar_0_t2 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00623 Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_t2 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x80=128)], resolved: None }
00 69 80 
# inline_test_echoline_readline_3_inline_readline_getchar_0_t0 <- inline_test_echoline_readline_3_inline_readline_getchar_0_t1 BitwiseAnd inline_test_echoline_readline_3_inline_readline_getchar_0_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 128))"] }
# 00626 Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_t0 <- inline_test_echoline_readline_3_inline_readline_getchar_0_t1 BitwiseAnd inline_test_echoline_readline_3_inline_readline_getchar_0_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x68), Register(0x69), Register(0x68)], resolved: None }
33 68 69 68 
# inline_test_echoline_readline_3_inline_readline_getchar_0_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0062a Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x00=0)], resolved: None }
00 69 00 
# if inline_test_echoline_readline_3_inline_readline_getchar_0_t0 == inline_test_echoline_readline_3_inline_readline_getchar_0_t3 then 'inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_body_1' else 'inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }", "Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }"] }
# 0062d Instruction { source: "if inline_test_echoline_readline_3_inline_readline_getchar_0_t0 == inline_test_echoline_readline_3_inline_readline_getchar_0_t3 then 'inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_body_1' else 'inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x69)], resolved: None }
25 68 69 
# 00630 Instruction { source: "if inline_test_echoline_readline_3_inline_readline_getchar_0_t0 == inline_test_echoline_readline_3_inline_readline_getchar_0_t3 then 'inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_body_1' else 'inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_body_1)], resolved: None }
42 38 06 00 
# 00634 Instruction { source: "if inline_test_echoline_readline_3_inline_readline_getchar_0_t0 == inline_test_echoline_readline_3_inline_readline_getchar_0_t3 then 'inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_body_1' else 'inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }] }\", \"Comparison { op: Equals, left: Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 128)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_end_2)], resolved: None }
40 3e 06 00 
# :inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Ident(\"tty\"), Number(U8, 128)), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }] }"] }
# inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_body_1
# inline_test_echoline_readline_3_inline_readline_getchar_0_tty <- ttyin
# 	SourceContext { contexts: ["Assign { target: Ident(\"tty\"), var_type: None, value: TtyIn }", "TtyIn"] }
# 00638 Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_tty <- ttyin\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"tty\\\"), var_type: None, value: TtyIn }\", \"TtyIn\"] }", opcode: TtyIn, args: [Register(0x70)], resolved: None }
12 70 
# goto inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: [] }
# 0063a Instruction { source: "goto inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_predicate_0)], resolved: None }
40 20 06 00 
# :inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_end_2
# 	SourceContext { contexts: [] }
# inline_test_echoline_readline_3_inline_readline_getchar_0_getchar_while_end_2
# inline_test_echoline_readline_3_inline_readline_getchar_0_t5 <- inline_test_echoline_readline_3_inline_readline_getchar_0_tty U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Ident(\"tty\")", "Ident(\"tty\")"] }
# 0063e Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_t5 <- inline_test_echoline_readline_3_inline_readline_getchar_0_tty U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Ident(\\\"tty\\\")\", \"Ident(\\\"tty\\\")\"] }", opcode: Copy8, args: [Register(0x70), Register(0x68)], resolved: None }
16 70 68 
# inline_test_echoline_readline_3_inline_readline_getchar_0_t6 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00641 Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_t6 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x7f=127)], resolved: None }
00 69 7f 
# inline_test_echoline_readline_3_inline_readline_getchar_0_t4 <- inline_test_echoline_readline_3_inline_readline_getchar_0_t5 BitwiseAnd inline_test_echoline_readline_3_inline_readline_getchar_0_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))", "Arithmetic(And, Ident(\"tty\"), Number(U8, 127))"] }
# 00644 Instruction { source: "inline_test_echoline_readline_3_inline_readline_getchar_0_t4 <- inline_test_echoline_readline_3_inline_readline_getchar_0_t5 BitwiseAnd inline_test_echoline_readline_3_inline_readline_getchar_0_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\", \"Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x68), Register(0x69), Register(0x68)], resolved: None }
33 68 69 68 
# inline_test_echoline_readline_3_ch <- inline_test_echoline_readline_3_inline_readline_getchar_0_t4 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_ch <- inline_test_echoline_readline_3_inline_readline_getchar_0_t4 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# goto inline_test_echoline_readline_3_inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(And, Ident(\"tty\"), Number(U8, 127))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_test_echoline_readline_3_inline_readline_getchar_0_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(And, Ident(\\\"tty\\\"), Number(U8, 127))) }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_inline_readline_getchar_0_function_end_getchar)], resolved: None }
# :inline_test_echoline_readline_3_inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_test_echoline_readline_3_inline_readline_getchar_0_function_end_getchar
# inline_test_echoline_readline_3_t2 <- inline_test_echoline_readline_3_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_t2 <- inline_test_echoline_readline_3_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_test_echoline_readline_3_t3 <- 0n13/0x0du8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Number(U8, 13)", "Number(U8, 13)"] }
# 00648 Instruction { source: "inline_test_echoline_readline_3_t3 <- 0n13/0x0du8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Number(U8, 13)\", \"Number(U8, 13)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x0d=13)], resolved: None }
00 69 0d 
# if inline_test_echoline_readline_3_t2 == inline_test_echoline_readline_3_t3 then 'inline_test_echoline_readline_3_readline_if_true_0_4' else 'inline_test_echoline_readline_3_readline_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }"] }
# 0064b Instruction { source: "if inline_test_echoline_readline_3_t2 == inline_test_echoline_readline_3_t3 then 'inline_test_echoline_readline_3_readline_if_true_0_4' else 'inline_test_echoline_readline_3_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x69)], resolved: None }
25 68 69 
# 0064e Instruction { source: "if inline_test_echoline_readline_3_t2 == inline_test_echoline_readline_3_t3 then 'inline_test_echoline_readline_3_readline_if_true_0_4' else 'inline_test_echoline_readline_3_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JzImm, args: [Label24(inline_test_echoline_readline_3_readline_if_true_0_4)], resolved: None }
42 56 06 00 
# 00652 Instruction { source: "if inline_test_echoline_readline_3_t2 == inline_test_echoline_readline_3_t3 then 'inline_test_echoline_readline_3_readline_if_true_0_4' else 'inline_test_echoline_readline_3_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_readline_if_else_0_5)], resolved: None }
40 5a 06 00 
# :inline_test_echoline_readline_3_readline_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_test_echoline_readline_3_readline_if_true_0_4
# goto inline_test_echoline_readline_3_readline_if_end_3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# 00656 Instruction { source: "goto inline_test_echoline_readline_3_readline_if_end_3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_readline_if_end_3)], resolved: None }
40 85 06 00 
# :inline_test_echoline_readline_3_readline_if_else_0_5
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_test_echoline_readline_3_readline_if_else_0_5
# inline_test_echoline_readline_3_t4 <- inline_test_echoline_readline_3_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_t4 <- inline_test_echoline_readline_3_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_test_echoline_readline_3_t5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0065a Instruction { source: "inline_test_echoline_readline_3_t5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x0a=10)], resolved: None }
00 69 0a 
# if inline_test_echoline_readline_3_t4 == inline_test_echoline_readline_3_t5 then 'inline_test_echoline_readline_3_readline_if_true_1_6' else 'inline_test_echoline_readline_3_readline_if_else_1_7'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 0065d Instruction { source: "if inline_test_echoline_readline_3_t4 == inline_test_echoline_readline_3_t5 then 'inline_test_echoline_readline_3_readline_if_true_1_6' else 'inline_test_echoline_readline_3_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x69)], resolved: None }
25 68 69 
# 00660 Instruction { source: "if inline_test_echoline_readline_3_t4 == inline_test_echoline_readline_3_t5 then 'inline_test_echoline_readline_3_readline_if_true_1_6' else 'inline_test_echoline_readline_3_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(inline_test_echoline_readline_3_readline_if_true_1_6)], resolved: None }
42 68 06 00 
# 00664 Instruction { source: "if inline_test_echoline_readline_3_t4 == inline_test_echoline_readline_3_t5 then 'inline_test_echoline_readline_3_readline_if_true_1_6' else 'inline_test_echoline_readline_3_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_readline_if_else_1_7)], resolved: None }
40 76 06 00 
# :inline_test_echoline_readline_3_readline_if_true_1_6
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_test_echoline_readline_3_readline_if_true_1_6
# inline_test_echoline_readline_3_t6 <- inline_test_echoline_readline_3_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_t6 <- inline_test_echoline_readline_3_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_readline_3_t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00668 Instruction { source: "inline_test_echoline_readline_3_t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x00=0)], resolved: None }
00 68 00 
# mem[inline_test_echoline_readline_3_t6] <- inline_test_echoline_readline_3_t7 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }"] }
# 0066b Instruction { source: "mem[inline_test_echoline_readline_3_t6] <- inline_test_echoline_readline_3_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x68), Register(0x64)], resolved: None }
11 68 64 
# goto inline_test_echoline_readline_3_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0066e Instruction { source: "goto inline_test_echoline_readline_3_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_function_end_readline)], resolved: None }
40 8d 06 00 
# goto inline_test_echoline_readline_3_readline_if_end_3
# 	SourceContext { contexts: [] }
# 00672 Instruction { source: "goto inline_test_echoline_readline_3_readline_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_readline_if_end_3)], resolved: None }
40 85 06 00 
# :inline_test_echoline_readline_3_readline_if_else_1_7
# 	SourceContext { contexts: [] }
# inline_test_echoline_readline_3_readline_if_else_1_7
# inline_test_echoline_readline_3_t8 <- inline_test_echoline_readline_3_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_t8 <- inline_test_echoline_readline_3_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_readline_3_t9 <- inline_test_echoline_readline_3_ch U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_t9 <- inline_test_echoline_readline_3_ch U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# mem[inline_test_echoline_readline_3_t8] <- inline_test_echoline_readline_3_t9 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }"] }
# 00676 Instruction { source: "mem[inline_test_echoline_readline_3_t8] <- inline_test_echoline_readline_3_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x68), Register(0x64)], resolved: None }
11 68 64 
# inline_test_echoline_readline_3_t11 <- inline_test_echoline_readline_3_buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_t11 <- inline_test_echoline_readline_3_buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_readline_3_t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00679 Instruction { source: "inline_test_echoline_readline_3_t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000001=1)], resolved: None }
80 6c 01 00 00 00 
# inline_test_echoline_readline_3_t10 <- inline_test_echoline_readline_3_t11 Add inline_test_echoline_readline_3_t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))"] }
# 0067f Instruction { source: "inline_test_echoline_readline_3_t10 <- inline_test_echoline_readline_3_t11 Add inline_test_echoline_readline_3_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 00680 Instruction { source: "inline_test_echoline_readline_3_t10 <- inline_test_echoline_readline_3_t11 Add inline_test_echoline_readline_3_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x6c), Register(0x64)], resolved: None }
a2 64 6c 64 
# 00684 Instruction { source: "inline_test_echoline_readline_3_t10 <- inline_test_echoline_readline_3_t11 Add inline_test_echoline_readline_3_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# inline_test_echoline_readline_3_buf <- inline_test_echoline_readline_3_t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_readline_3_buf <- inline_test_echoline_readline_3_t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# :inline_test_echoline_readline_3_readline_if_end_3
# 	SourceContext { contexts: [] }
# inline_test_echoline_readline_3_readline_if_end_3
# goto inline_test_echoline_readline_3_readline_while_predicate_0
# 	SourceContext { contexts: [] }
# 00685 Instruction { source: "goto inline_test_echoline_readline_3_readline_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_readline_while_predicate_0)], resolved: None }
40 0c 06 00 
# :inline_test_echoline_readline_3_readline_while_end_2
# 	SourceContext { contexts: [] }
# inline_test_echoline_readline_3_readline_while_end_2
# goto inline_test_echoline_readline_3_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 00689 Instruction { source: "goto inline_test_echoline_readline_3_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_readline_3_function_end_readline)], resolved: None }
40 8d 06 00 
# :inline_test_echoline_readline_3_function_end_readline
# 	SourceContext { contexts: [] }
# inline_test_echoline_readline_3_function_end_readline
# t10 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 0068d Instruction { source: "t10 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x74)], resolved: None }
81 0c 74 
# t12 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00690 Instruction { source: "t12 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x78), Constant8(0x00=0)], resolved: None }
00 78 00 
# t11 U32 <- t12 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }"] }
# 00693 Instruction { source: "Zero-pad for t11 U32 <- t12 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
80 64 00 00 00 00 
# 00699 Instruction { source: "t11 U32 <- t12 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x64)], resolved: None }
16 78 64 
# t9 <- t10 Add t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })"] }
# 0069c Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 0069d Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_1, args: [Register(0x74), Register(0x64), Register(0x64)], resolved: None }
a2 74 64 64 
# 006a1 Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# t8 <- t9 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))"] }
# optimized away noop copy Instruction { source: "t8 <- t9 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_println_1_buf <- t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"println\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_println_1_buf <- t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"println\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_println_1_t0 <- inline_test_echoline_println_1_buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Deref(Ident(\"buf\")) }", "Deref(Ident(\"buf\"))", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_println_1_t0 <- inline_test_echoline_println_1_buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Deref(Ident(\\\"buf\\\")) }\", \"Deref(Ident(\\\"buf\\\"))\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_println_1_ch <- mem[inline_test_echoline_println_1_t0] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Deref(Ident(\"buf\")) }", "Deref(Ident(\"buf\"))"] }
# 006a2 Instruction { source: "inline_test_echoline_println_1_ch <- mem[inline_test_echoline_println_1_t0] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Deref(Ident(\\\"buf\\\")) }\", \"Deref(Ident(\\\"buf\\\"))\"] }", opcode: Load8, args: [Register(0x64), Register(0x68)], resolved: None }
10 64 68 
# :inline_test_echoline_println_1_println_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }"] }
# inline_test_echoline_println_1_println_while_predicate_0
# inline_test_echoline_println_1_t1 <- inline_test_echoline_println_1_ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_println_1_t1 <- inline_test_echoline_println_1_ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_test_echoline_println_1_t2 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006a5 Instruction { source: "inline_test_echoline_println_1_t2 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x00=0)], resolved: None }
00 69 00 
# if inline_test_echoline_println_1_t1 != inline_test_echoline_println_1_t2 then 'inline_test_echoline_println_1_println_while_body_1' else 'inline_test_echoline_println_1_println_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 006a8 Instruction { source: "if inline_test_echoline_println_1_t1 != inline_test_echoline_println_1_t2 then 'inline_test_echoline_println_1_println_while_body_1' else 'inline_test_echoline_println_1_println_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x69)], resolved: None }
25 68 69 
# 006ab Instruction { source: "if inline_test_echoline_println_1_t1 != inline_test_echoline_println_1_t2 then 'inline_test_echoline_println_1_println_while_body_1' else 'inline_test_echoline_println_1_println_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_test_echoline_println_1_println_while_end_2)], resolved: None }
42 c4 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_test_echoline_println_1_t1 != inline_test_echoline_println_1_t2 then 'inline_test_echoline_println_1_println_while_body_1' else 'inline_test_echoline_println_1_println_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_println_1_println_while_body_1)], resolved: None }
# :inline_test_echoline_println_1_println_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [TtyOut { value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }, Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }] }"] }
# inline_test_echoline_println_1_println_while_body_1
# inline_test_echoline_println_1_t3 <- inline_test_echoline_println_1_ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_println_1_t3 <- inline_test_echoline_println_1_ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# ttyout <- inline_test_echoline_println_1_t3
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 006af Instruction { source: "ttyout <- inline_test_echoline_println_1_t3\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: TtyOut, args: [Register(0x68)], resolved: None }
13 68 
# inline_test_echoline_println_1_t4 <- inline_test_echoline_println_1_buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1))", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_println_1_t4 <- inline_test_echoline_println_1_buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_println_1_t5 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 006b1 Instruction { source: "inline_test_echoline_println_1_t5 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000001=1)], resolved: None }
80 6c 01 00 00 00 
# inline_test_echoline_println_1_buf <- inline_test_echoline_println_1_t4 Add inline_test_echoline_println_1_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"buf\"), Number(USIZE, 1))"] }
# 006b7 Instruction { source: "inline_test_echoline_println_1_buf <- inline_test_echoline_println_1_t4 Add inline_test_echoline_println_1_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 006b8 Instruction { source: "inline_test_echoline_println_1_buf <- inline_test_echoline_println_1_t4 Add inline_test_echoline_println_1_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x6c), Register(0x64)], resolved: None }
a2 64 6c 64 
# 006bc Instruction { source: "inline_test_echoline_println_1_buf <- inline_test_echoline_println_1_t4 Add inline_test_echoline_println_1_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"buf\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# inline_test_echoline_println_1_t6 <- inline_test_echoline_println_1_buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }", "Deref(Ident(\"buf\"))", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_test_echoline_println_1_t6 <- inline_test_echoline_println_1_buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }\", \"Deref(Ident(\\\"buf\\\"))\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_test_echoline_println_1_ch <- mem[inline_test_echoline_println_1_t6] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Deref(Ident(\"buf\")) }", "Deref(Ident(\"buf\"))"] }
# 006bd Instruction { source: "inline_test_echoline_println_1_ch <- mem[inline_test_echoline_println_1_t6] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Deref(Ident(\\\"buf\\\")) }\", \"Deref(Ident(\\\"buf\\\"))\"] }", opcode: Load8, args: [Register(0x64), Register(0x68)], resolved: None }
10 64 68 
# goto inline_test_echoline_println_1_println_while_predicate_0
# 	SourceContext { contexts: [] }
# 006c0 Instruction { source: "goto inline_test_echoline_println_1_println_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_test_echoline_println_1_println_while_predicate_0)], resolved: None }
40 a5 06 00 
# :inline_test_echoline_println_1_println_while_end_2
# 	SourceContext { contexts: [] }
# inline_test_echoline_println_1_println_while_end_2
# goto inline_test_echoline_println_1_function_end_println
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_test_echoline_println_1_function_end_println\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_test_echoline_println_1_function_end_println)], resolved: None }
# :inline_test_echoline_println_1_function_end_println
# 	SourceContext { contexts: [] }
# inline_test_echoline_println_1_function_end_println
# t13 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006c4 Instruction { source: "t13 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x78), Constant8(0x00=0)], resolved: None }
00 78 00 
# t14 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 006c7 Instruction { source: "t14 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000014=20)], resolved: None }
80 6c 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t14
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 006cd Instruction { source: "__frame_pointer <- __frame_pointer Add t14\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
0e 
# 006ce Instruction { source: "__frame_pointer <- __frame_pointer Add t14\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x6c), Register(0x0c)], resolved: None }
a2 0c 6c 0c 
# 006d2 Instruction { source: "__frame_pointer <- __frame_pointer Add t14\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
a3 
# return Some(t13)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 006d3 Instruction { source: "return Some(t13)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x00)], resolved: None }
16 78 00 
# 006d6 Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
a4 0c 14 00 00 00 
# 006dc Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
49 0c 
# :function_end_test_echoline
# 	SourceContext { contexts: [] }
# function_end_test_echoline
# Unreachable
# 	SourceContext { contexts: [] }
# 006de Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
ff 00 00 00 10 
