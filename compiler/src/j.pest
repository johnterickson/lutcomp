WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

lower = _{ 'a'..'z' }
alpha = _{ lower | 'A'..'Z' }
digit = { '0'..'9' }
ident_char = _{alpha | digit | "_" }
decimal_number = { digit+ }
hex_number = { "0x" ~ hex_digit+ }
number = { hex_number | decimal_number | char_literal }
hex_digit = _{ digit | 'a'..'f' | 'A'..'F' }
ident = { lower ~ ident_char* }
ttyin = { "ttyin" }
char_literal_value = { ANY }
char_literal = { "'" ~ char_literal_value ~ "'" }

arithmetic = _{ add | subtract | multiply | or | and }
add      = { "+" }
subtract = { "-" }
multiply = { "*" }
or = { "|" }
and = { "&" }
deref_operator = { "*" }
address_of_operator = {"&"}

comparison = _{ equals | notequals | greater_than_or_equal | greater_than | less_than_or_equal | less_than }
equals = { "==" }
notequals = { "!=" }
greater_than = { ">" }
greater_than_or_equal = { ">=" }
less_than = { "<" }
less_than_or_equal = { "<=" }

rotate_right_expression = { "(" ~ expression ~ ">>>" ~ number ~ ")" }
comparison_expression = { "(" ~ expression ~ comparison ~ expression ~ ")" }
arithmetic_expression = { "(" ~ expression ~ arithmetic ~ expression ~ ")" }
deref_expression = { deref_operator ~ expression }
local_field_expression = {ident ~ "." ~ ident}
ptr_field_expression = {ident ~ "->" ~ ident}
address_of_expression = {address_of_operator ~ expression}
index_expression = {ident ~ "[" ~ expression ~ "]" }
expression = { 
    index_expression | local_field_expression | ptr_field_expression | 
    ttyin | ident | number | arithmetic_expression | rotate_right_expression | 
    comparison_expression | deref_expression | address_of_expression
    }

pointer_type = { "&" ~ variable_type }
number_type = {"U8" | "UPTR"}
array_type = { number_type ~ "[" ~ number ~ "]" }
variable_type = {array_type | number_type | pointer_type | ident}
variable_decl = {ident ~ ":" ~ variable_type}

else_clause = {"ELSE" ~ "{"~ statement* ~ "}"}
if_else_statement = { "IF" ~ expression ~ "{" ~ statement* ~ "}" ~ else_clause? }
declare_statement = {"DECLARE" ~ variable_decl ~ ";"}
while_loop = { "WHILE" ~ expression ~ "{" ~ statement* ~ "}" }
assign_declare = { variable_decl | ident }
assign_deref = { deref_operator ~ ident }
assign_target = { index_expression | local_field_expression | ptr_field_expression | assign_deref | assign_declare }
assign = { "ASSIGN" ~ assign_target ~ ":=" ~ expression ~ ";" }
ttyout = { "TTYOUT" ~ expression ~ ";" }
return_statement = { "RETURN" ~ expression ~ ";" }
call_return_value = {ident ~ (":" ~ variable_type)? ~ ":="}

call = { "CALL" ~ call_return_value? ~ ident ~ "(" ~  (expression)? ~ ("," ~ expression)* ~ ")" ~ ";" }

statement = { assign | if_else_statement | ttyout | return_statement | call | while_loop | declare_statement}
body = { (statement)+ }
paramters = { variable_decl? ~ ("," ~ variable_decl)* }
function_return_type = {"->" ~ variable_type}
function = {"FUNCTION " ~ ident ~ "(" ~ paramters ~ ")" ~ function_return_type? ~ "{" ~ body ~ "}"}

field = { variable_decl }
fields = { (field ~ ";")+ }
struct_decl = {"STRUCT " ~ ident ~ "{" ~ fields ~ "}"}

program = {
    SOI ~
    struct_decl * ~
    function+ ~
    EOI
}