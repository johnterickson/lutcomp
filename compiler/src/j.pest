WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ c_style_comment | hex_style_comment }

c_style_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
hex_style_comment = _{ "#" ~ (!"\n" ~ ANY)* ~ "\n"}

lower = _{ 'a'..'z' }
alpha = _{ lower | 'A'..'Z' }
digit = { '0'..'9' }
ident_char = _{alpha | digit | "_" }
decimal_number = { digit+ }
hex_number = { "0x" ~ hex_digit+ }
number = { hex_number | decimal_number | char_literal }
hex_digit = _{ digit | 'a'..'f' | 'A'..'F' }
ident = { ident_char+ }
ttyin = { "ttyin" }
char_literal_value = { ANY }
char_literal = { "'" ~ char_literal_value ~ "'" }

arithmetic = _{ add | subtract | multiply | divide | or | and | left_shift | right_shift | rotate_right }
add      = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }
or = { "|" }
and = { "&" }
left_shift = { "<<" }
right_shift = { ">>" }
rotate_right = { ">ROR>" }

deref_operator = { "*" }
address_of_operator = {"&"}

comparison = _{ equals | notequals | greater_than_or_equal | greater_than | less_than_or_equal | less_than }
equals = { "==" }
notequals = { "!=" }
greater_than = { ">" }
greater_than_or_equal = { ">=" }
less_than = { "<" }
less_than_or_equal = { "<=" }

RAM_MIN_expression = { "RAM_MIN" }
parentheses_expression = { "(" ~ expression ~ ")" }
comparison_expression = { "(" ~ expression ~ comparison ~ expression ~ ")" }
arithmetic_expression = { "(" ~ expression ~ arithmetic ~ expression ~ ")" }
cast_expression = { "(" ~ expression ~ "AS" ~ variable_type ~ ")" }
deref_expression = { deref_operator ~ expression }
local_field_expression = {ident ~ "." ~ ident}
ptr_field_expression = {ident ~ "->" ~ ident}
call_expression = {ident ~ "(" ~  (expression)? ~ ("," ~ expression)* ~ ")" }
address_of_expression = {address_of_operator ~ expression}
index_expression = {ident ~ "[" ~ expression ~ "]" }
array_expression = {"[" ~ (expression) ~ ("," ~ expression)* ~ "]"}
expression = {
    RAM_MIN_expression | number | cast_expression | 
    index_expression | local_field_expression | ptr_field_expression | call_expression |
    ttyin | arithmetic_expression | 
    comparison_expression | deref_expression | address_of_expression | 
    array_expression |
    ident | parentheses_expression
    }

pointer_type = { "&" ~ variable_type }
number_type = {"u8" | "u16" | "usize" | "char" }
array_type = { ident ~ "[" ~ expression? ~ "]" }
variable_type = {array_type | number_type | pointer_type | ident}
variable_decl = {ident ~ ":" ~ variable_type}

if_clause = {"if" ~ expression ~ "{" ~ statement* ~ "}"}
else_if_clause = {"else if" ~ expression ~ "{" ~ statement* ~ "}"}
else_clause = {"else" ~ "{" ~ statement* ~ "}"}
if_else_statement = { if_clause ~ else_if_clause* ~ else_clause? }
declare_statement = { variable_decl ~ ";"}
continue_statement = { "continue;" }
break_statement = { "break;" }
static_statement = { "static" ~ variable_decl ~ ";"}
while_loop = { "while" ~ expression ~ "{" ~ statement* ~ "}" }
assign_declare = { variable_decl | ident }
assign_deref = { deref_operator ~ ident }
assign_target = { index_expression | local_field_expression | ptr_field_expression | assign_deref | assign_declare }
assign = { assign_target ~ "=" ~ expression ~ ";" }
ttyout = { "ttyout" ~ "(" ~ expression ~ ")" ~ ";" }
return_statement = { "return" ~ expression? ~ ";" }
call_return_value = {ident ~ (":" ~ variable_type)? ~ "="}
void_expression_statement = { expression ~ ";" }

statement = { 
    if_else_statement | ttyout | continue_statement | return_statement | 
    while_loop | assign | static_statement | declare_statement | break_statement |
    void_expression_statement
    }

inline_attribute = { "inline" }
attribute = { inline_attribute }
attributes = { ("[" ~ attribute ~ "]")* }

body = { (statement)+ }
parameters = { variable_decl? ~ ("," ~ variable_decl)* }
function_return_type = {"->" ~ variable_type}
function = {"fn " ~ attributes ~ ident ~ "(" ~ parameters ~ ")" ~ function_return_type? ~ "{" ~ body ~ "}"}

field = { variable_decl }
fields = { (field ~ ";")+ }
struct_decl = {"struct" ~ ident ~ "{" ~ fields ~ "}"}

include_path = { (!"'" ~ ANY)+ }
include = { "!include" ~ "'" ~ include_path ~ "'" }

image_base_address = { "!image_base_address=(" ~ expression ~ ")"}
statics_base_address = { "!statics_base_address=(" ~ expression ~ ")"}

const_value = { "const" ~ variable_decl  ~ "=" ~ expression ~ ";" }

program = {
    SOI ~
    (image_base_address | statics_base_address | include | struct_decl | function | const_value)+   ~
    EOI
}